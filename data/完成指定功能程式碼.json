[
    {
        "instruction": "請完成一個可以計算一個字串中的所有字母出現頻率的Python程式碼。",
        "input": "",
        "output": "def letter_frequency(s):\n    # 使用一個字典來存儲每個字母的出現頻率\n    frequency = {}\n    for letter in s:\n        if letter.isalpha(): # 只計算字母\n            if letter in frequency:\n                frequencyletter] += 1\n            else:\n                frequencyletter] = 1\n    return frequency\n\n# 測試函式\nprint(letter_frequency('Hello World'))\n\n這段程式碼定義了一個函式 letter_frequency(s)，用於計算給定字串中所有字母的出現頻率。\n\n具體來說，函式首先初始化一個空字典 frequency 來存儲每個字母的出現頻率。接著，使用一個for迴圈遍歷字串中的每個字元。如果字元是字母，則檢查該字母是否已存在於字典中。如果已存在，則將其對應的值加一，否則將其對應的值設置為一。\n\n最後，函式返回該字典，字典中存儲了每個字母的出現頻率。\n\n測試結果示例：\n執行print(letter_frequency('Hello World'))將輸出：\n{'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}\n"
    },
    {
        "instruction": "請完成一個計算字串反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n# 題目理解: 題目要求寫一個函式，接收一個字串作為輸入並返回反轉後的字串。\n\n# 詳細性:\n# 1. 首先，定義一個函式 reverse_string(s)，其中 s 是一個字串。\n# 2. 函式內使用 Python 字串切片功能 ::-1] 來達到反轉字串的效果。\n# 3. 最終，返回反轉後的字串。\n# 4. 這種方法簡潔高效，且容易理解。\n\n# 可運作性:\n# 測試 reverse_string 函式：\n# print(reverse_string('hello'))  # 輸出: 'olleh'\n# print(reverse_string('world'))  # 輸出: 'dlrow'\n\n# 總結：這段程式碼定義了一個函式 reverse_string，用於反轉字串。具體來說，函式使用 Python 字串的切片功能 ::-1]，以簡潔快速且高效的方式反轉字串並返回。"
    },
    {
        "instruction": "請完成一個可以將一段文字中所有的英文字母轉成大寫的Python程式碼。",
        "input": "",
        "output": "def to_uppercase(text):\n    return text.upper()\n\n# 範例測試\nprint(to_uppercase('Hello, World!'))  # 應輸出：'HELLO, WORLD!'\n\n這段程式碼定義了一個函式 to_uppercase(text)，用於將輸入的文字中的所有英文字母轉換成大寫。\n\n詳細實現邏輯如下：\n1. 使用內建的 upper() 方法，該方法會將字串中所有的小寫英文字母轉換成大寫，並返回轉換後的字串。\n2. 將轉換後的結果返回。\n\n這是一種高效的方法，因為 upper() 方法是 Python 的內置方法，且經過優化處理，能夠快速地進行大小寫轉換。\n\n可以運作性：此程式碼簡單明了，功能單一且兼容性好，在任何 Python 環境下都可以正常運行並完成指定的功能。"
    },
    {
        "instruction": "請完成一個可以判斷給定年份是否為閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於判斷給定年份是否為閏年。\n\n題目理解: 正確理解題目要求，需判斷年份是否符合閏年的條件。\n詳細性: 提供閏年定義的詳細說明。根據公立歷法，閏年需滿足以下條件之一：(1) 能被4整除但不能被100整除，(2) 能被400整除。\n可運作性: 函式使用簡單的條件判斷，根據閏年的邏輯規則，返回布林值 True 或 False，正確實現指定功能。"
    },
    {
        "instruction": "請完成一個可以計算字串中每個單詞出現頻率的Python程式碼。",
        "input": "",
        "output": "def word_count(s):\n    words = s.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freqword] += 1\n        else:\n            freqword] = 1\n    return freq\n\n這段程式碼定義了一個函式 word_count(s)，用於計算輸入字串中每個單詞出現的頻率。\n\n具體來說，當收到一個字串時，函式首先使用 split() 方法將字串拆分為單詞列表。接著，初始化一個空字典 freq 用於記錄每個單詞的頻率。函式遍歷單詞列表中的每個單詞，如果單詞已經存在於字典中，則將其頻率加1；如果單詞尚未存在於字典中，則將其加入字典，並將其頻率設為1。最後，函式返回這個記錄了所有單詞頻率的字典。\n\n題目理解: 要撰寫一個Python程式碼來計算字串中每個單詞的出現頻率。\n\n詳細性: 程式碼中每一步的操作都有清晰的註解，說明了如何拆分字串、初始化空字典、遍歷單詞列表以及更新字典中的單詞頻率。\n\n可運作性: 這個函式可以正確地處理任意輸入的字串，並精確地計算其中每個單詞出現的次數。"
    },
    {
        "instruction": "請完成一個可以計算一個數字的階乘(factorial)的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n < 0:\n        raise ValueError(\"負數沒有階乘\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n# 題目理解: 寫一個函式計算一個非負整數的階乘\n# 詳細性: 三個主要部分, 分別處理負數, 特殊情況(0和1), 及一般情況的階乘計算。\n# 可運作性: 檢查負數後引發錯誤, 對0或1回傳1, 否則進行連續乘法計算並返回結果。這個函式可以正確計算任何非負整數的階乘。"
    },
    {
        "instruction": "請完成一個可以計算一段文本中字母出現頻率的Python程式碼。",
        "input": "",
        "output": "def letter_frequency(text):\n    frequency = {}\n    for letter in text:\n        if letter.isalpha():\n            if letter in frequency:\n                frequencyletter] += 1\n            else:\n                frequencyletter] = 1\n    return frequency\n\n# 題目理解: 正確理解題目要求 - 編寫一個函式，計算文本中每個字母出現的頻率。\n\n# 詳細性: 提供實現邏輯的詳細說明 - 這段程式碼定義了一個名為 letter_frequency(text) 的函式，用來計算並返回一段文本中字母出現的頻率。\n\n# 具體實現方式如下：\n# 1. 初始化一個空字典 frequency 用來存儲每個字母及其出現的次數。\n# 2. 使用 for 迴圈遍歷文本中每個字母。\n# 3. 檢查字母是否為字母型字符（忽略空格、數字和標點符號），這裡使用 letter.isalpha()。\n# 4. 如果字母已經在字典中，則將其出現次數加1，否則將其設為1。\n# 5. 最後返回字典 frequency。\n\n# 可運作性: - 該函式正確實現了計數文本中字母出現次數的功能，涵蓋了有效性檢查（只計算字母，不包括其他字符）。"
    },
    {
        "instruction": "請完成一個可以檢查一個數字是否為回文數的Python程式碼。如果一個數字從左到右和從右到左讀起來都是一樣的，就是回文數。例如，121是一個回文數，而123不是。",
        "input": "",
        "output": "def is_palindrome_number(num):\n    # 將數字轉換為字串\n    str_num = str(num)\n    # 反轉字串並檢查是否與原字串相同\n    return str_num == str_num::-1]\n\n# 測試用例\nprint(is_palindrome_number(121))  # 應返回 True\nprint(is_palindrome_number(123))  # 應返回 False\n\n# 題目理解: 根據題目要求，我們需要檢查一個數字是否為回文數，即從左到右和從右到左讀起來一樣。\n# 詳細性: 我們首先將數字轉換為字串形式，這樣可以方便地進行反轉操作。接下來，將反轉後的字串與原始字串進行比較，如果相同則說明該數字是回文數。\n# 可運作性: 此程式碼能正確地檢查一個數字是否為回文數。舉例如上，我們檢測121和123，分別返回True和False。"
    },
    {
        "instruction": "請完成一個可以計算一個數字的階乘（factorial）的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n這段程式碼定義了一個函式 factorial(n)，用於計算一個數字的階乘。\n\n具體來說，函式首先檢查輸入值是否為非負整數，如果不是則引發ValueError異常。接著，判斷n是否為0或1，如果是，則階乘值為1。否則，通過for迴圈從2到n, 將途中每個數值累乘計算階乘結果，並最終返回計算結果。這樣的設計確保了邏輯清晰且易於理解。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有數字之和的Python程式碼。",
        "input": "1, 2, 3, 4, 5]",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 提供了一個例子用於測試\nexample_list = 1, 2, 3, 4, 5]\nsum_result = sum_list(example_list)\nprint('列表中的總和為:', sum_result)\n\n# 題目理解：我們需要實現一個函式來計算給定列表中所有數字的總和。\n# 詳細性：函式內部初始化一個變量 total 為 0，遍歷並累加列表中的每一個數字，最終返回計算後的總和。\n# 可運作性：提供了一個測試例子驗證函式的正確性。期望輸出的結果為 15。"
    },
    {
        "instruction": "請完成一個可以判斷一個字串是否為迴文（Palindrome）的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(filter(str.isalnum, s)).lower()  # 去除非字母數字字符並轉為小寫\n    return s == s::-1]  # 檢查字串是否等於其反轉\n\n# 示例用法\nprint(is_palindrome(\"A man, a plan, a canal, Panama\"))  # 應返回 True\nprint(is_palindrome(\"race a car\"))  # 應返回 False\n\n\n題目理解: 我們需要撰寫一段Python程式碼來判斷一個字串是否為迴文（Palindrome），即從左向右讀與從右向左讀相同。\n\n詳細性: 本程式碼首先定義了一個函式 is_palindrome(s)，該函式接受一個字串 s 作為參數。為了忽略特殊字符及大小寫，程式碼通過 filter(str.isalnum, s) 去除字串中的非字母數字字符，並將其轉換為小寫。接著，程式碼通過檢查字串是否等於其反轉（s == s::-1]）來判斷該字串是否為迴文。\n\n可運作性: 該程式碼正確地實現了判斷字串是否為迴文的功能，並且包含了兩個示例用法來檢驗其運行效果。一個迴文示例（\"A man, a plan, a canal, Panama\"）返回 True，一個非迴文示例（\"race a car\"）返回 False。"
    },
    {
        "instruction": "請完成一個可以計算一個整數序列中所有奇數的和的Python程式碼。",
        "input": "",
        "output": "def sum_odd_numbers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num\n    return total\n\n這段程式碼定義了一個函式 sum_odd_numbers(lst)，用於計算一個整數序列中所有奇數的和。\n\n題目理解: 函式需要遍歷給定的整數序列，並計算其中所有奇數的總和。\n\n詳細性: \n1. 首先，函式初始化一個變量 total 為 0，用於累加所有奇數。\n2. 接著，使用一個 for 迴圈來遍歷整個列表 lst。\n3. 在迴圈中使用 if 條件判斷當前數字是否為奇數（判斷條件為 num % 2 != 0）。\n4. 如果數字是奇數，則將其值累加到 total。\n5. 最終，函式返回 total，即列表中所有奇數的總和。\n\n可運作性: 此實現能夠正確、高效地計算輸入列表中所有奇數的和，並返回正確的結果。"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉給定的字串。\n\n具體來說，函式利用了Python字串的切片特性，通過 s::-1] 來反轉字串。\n\n切片s::-1] 的含義如下：\n- 第一個冒號前面的空白位代表從頭開始\n- 第二個冒號前面的空白位代表到結尾\n- -1 為步長，代表一步一步地從右向左（即倒敘），可以生成反轉後的新字串\n\n此方法簡潔且高效，能夠正確實現指定的功能。\n\n題目理解: 本函式目的是反轉輸入的字串\n\n詳細性: 具體描述了利用Python字串切片進行反轉的步驟及其含義\n\n可運作性: 正確且高效地反轉輸入的字串"
    },
    {
        "instruction": "請完成一個可以計算一個數字的階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n < 0:\n        raise ValueError('輸入不能是負數')\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n# 這段程式碼定義了一個函式 factorial(n)，用於計算一個數字的階乘。\n\n# 題目理解:\n# 正確理解題目要求：輸入一個數字 n，返回 n 的階乘。\n\n# 詳細性:\n# 1. 首先檢查輸入是否為負數，若是則拋出 ValueError 例外。\n# 2. 若輸入為 0 或 1，則直接返回 1（0! 和 1! 均為 1）。\n# 3. 初始化結果變量 result 為 1。\n# 4. 使用一個 for 迴圈，從 2 到 n（包括 n），逐一將 i 與 result 相乘，並更新 result 的值。\n# 5. 最終返回 result，即 n 的階乘。\n\n# 可運作性:\n# 這段程式碼能夠正確運作，並且符合階乘計算的規則，處理了 0 和 1 的特殊情況，並且對於所有正整數輸入都能返回正確的階乘值。"
    },
    {
        "instruction": "請完成一個可以檢驗email地址是否正確的Python程式碼。 ",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    # 使用正則表達式判斷email格式是否正確\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n# 測試範例\nprint(is_valid_email('example@example.com'))  # 應返回True\nprint(is_valid_email('example.com'))  # 應返回False\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於檢驗電子郵件地址的格式是否正確。\n\n具體來說，函式首先導入了 re 模塊，然後使用正則表達式來判斷給定的 email 是否符合標準電子郵件格式。\n正則表達式 r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$' 的含義如下：\n- ^ : 代表字符串的開始\n- a-zA-Z0-9_.+-]+ : 允許的本地部份字符，可以包含字母、數字、下劃線、點號、加號和減號\n- @ : 必須包含一個 at 符號\n- a-zA-Z0-9-]+ : 域名部分只能包含字母、數字和短橫線\n- \\. : 必須包含一個點號來分隔域名和頂級域\n- a-zA-Z0-9-.]+ : 頂級域部分允許包含字母、數字、點號和短橫線\n- $ : 代表字符串的結束\n\n如果匹配成功，函式返回True，即該 email 格式正確。否則，返回False，即該 email 格式不正確。"
    },
    {
        "instruction": "請完成一個可以計算一個字符串中每個字符出現次數的Python程式碼。",
        "input": "",
        "output": "def char_count(s):\n    count_dict = {}\n    for char in s:\n        if char in count_dict:\n            count_dictchar] += 1\n        else:\n            count_dictchar] = 1\n    return count_dict\n\n這段程式碼定義了一個函式 char_count(s)，用於計算輸入字符串中每個字符出現的次數。\n\n題目理解: 正確理解題目要求，即計算一個字符串中每個字符的出現次數。\n\n詳細性: 提供了實現邏輯的詳細說明。\n具體來說，函式內初始化了一個空字典 count_dict。接著，使用一個for迴圈，遍歷字符串中的每個字符。如果字符已在字典中，則將其對應的計數值加1；否則，將其添加到字典中並將計數值設為1。最終，函式返回包含字符計數的字典 count_dict。\n\n可運作性: 正確實現指定功能，能夠計算並返回字符串中每個字符的出現次數。"
    },
    {
        "instruction": "請完成一個可以計算兩個字符串的漢明距離（Hamming Distance）的Python程式碼。",
        "input": "",
        "output": "def hamming_distance(str1, str2):\n    if len(str1) != len(str2):\n        raise ValueError('字符串長度不一致')\n    return sum(el1 != el2 for el1, el2 in zip(str1, str2))\n\n# 題目理解: 正確理解題目要求\n# 此函式計算兩個等長字符串之間的漢明距離。漢明距離是指兩個等長字符串對應位置上不同字符的個數。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 首先，檢查兩個字符串的長度是否一致。如果不一致，則拋出一個異常，因為漢明距離只適用於等長字符串。\n# 2. 使用 zip 函數將兩個字符串的對應字符配對，並使用生成器表達式計算不同字符的個數。\n# 3. 最後返回不同字符的總數，這就是兩個字符串的漢明距離。\n\n# 可運作性: 正確實現指定功能\n# 檢測長度並計算不同字符的個數，可以正確計算漢明距離。函數可以處理任何等長的兩個字符串。"
    },
    {
        "instruction": "請完成一個函式用於計算一個列表中的所有元素的平均值。",
        "input": "",
        "output": "def average(lst):\n    if not lst:\n        return 0\n    total = sum(lst)\n    count = len(lst)\n    return total / count\n\n這段程式碼定義了一個函式 average(lst)，用於計算列表中所有元素的平均值。\n\n具體說明:\n\n1. 先檢查列表是否為空，如果是空列表則返回0，這是為了避免後續計算中的除零錯誤。\n\n2. 使用內建的sum函式來計算列表中所有元素的總和，並將結果賦值給變數total。\n\n3. 使用內建的len函式來計算列表中的元素數量，並將結果賦值給變數count。\n\n4. 將total除以count得到平均值，並返回這個值。\n\n題目理解: 要定義一個函式 average(lst)，計算並返回列表中所有元素的平均值。\n\n詳細性: 提供了檢查空列表的防範措施，然後通過求和與計算元素數量來計算平均值，並確保程式碼可讀性和可維護性。\n\n可運作性: 函式能正確無誤地計算任意傳入列表的平均值，並處理空列表的情況。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。",
        "input": "",
        "output": "def validate_id(id_number):\n    # 字母轉數字的對應表\n    char_to_num = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,\n        'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20,\n        'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25,\n        'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30,\n        'Y': 31, 'Z': 33\n    }\n\n    if len(id_number) != 10 or id_number0] not in char_to_num or not id_number1:].isdigit():\n        return False\n\n    # 轉換字母成數字\n    n = char_to_numid_number0]]\n    n1, n2 = divmod(n, 10)\n\n    # 各數字計算\n    digits = n1] + n2] + int(d) for d in id_number1:]]\n    weights = 8, 7, 6, 5, 4, 3, 2, 1]\n    total = digits0] * 1 + digits1] * 9 + sum(d * w for d, w in zip(digits2:], weights)) + digits-1]\n\n    # 判斷是否整除\n    return total % 10 == 0\n\n這段程式碼定義了一個函式 validate_id(id_number)，用於檢驗身分證號是否正確。\n\n題目理解: 正確認為身分證號碼需要從字母和數字共同計算校驗碼。\n\n詳細性: 以字典表提供完整字母對應數字的規則，並詳細處理每一步驟的數字計算過程。其中包括了字符串長度和字符類型的檢查，將字母轉換為數字後依規則進行加權計算，最後檢查總和是否可以被10整除。\n\n可運作性: 這是一個可行的實現。程式會先檢查輸入的格式是否正確，然後進行多步計算來驗證身分證號碼的有效性。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的對稱差（即兩個列表中只存在於其中一個中的元素）的Python程式碼。",
        "input": "",
        "output": "def symmetric_difference(lst1, lst2):\n    return list(set(lst1) ^ set(lst2))\n\n# 這段程式碼定義了一個函式 symmetric_difference(lst1, lst2)，用於計算兩個列表的對稱差。\n\n# 題目理解: 正確理解題目要求\n# 需求是計算兩個列表的對稱差。\n# 對稱差是指兩個列表中只存在於其中一個中的元素，換句話說，就是集合A和集合B的聯集減去它們的交集。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 函式首先將兩個列表轉換為集合，這樣可以方便地使用集合的操作來計算對稱差。然後使用 ^ 運算符計算集合的對稱差，最後將結果轉換為列表並返回。\n# 這種方法高效且簡潔，利用集合特性自動去重，直接得出對稱差。\n\n# 可運作性: 正確實現指定功能\n# 測試用例:\n# symmetric_difference(1, 2, 3], 3, 4, 5]) 應返回 1, 2, 4, 5]\n# symmetric_difference(1, 2], 1, 2, 3, 4]) 應返回 3, 4]\n# symmetric_difference(], 1, 2, 3]) 應返回 1, 2, 3]"
    },
    {
        "instruction": "請完成一個可以計算字串中所有獨特字符個數的Python程式碼。",
        "input": "",
        "output": "def count_unique_characters(s):\n    # 使用集合來存儲字串中的獨特字符\n    unique_chars = set(s)\n    # 返回集合的長度，即為獨特字符的個數\n    return len(unique_chars)\n\n這段程式碼定義了一個函式 count_unique_characters(s)，用於計算字串中所有獨特字符的個數。\n\n具體來說，函式首先使用 set() 函數來將字串 s 轉換為一個集合，集合會自動去除字串中的重複字符。\n接著，使用 len() 函數計算集合的長度，並返回該長度，即為字串中所有獨特字符的個數。此方法能高效計算字串中的獨特字符數量。"
    },
    {
        "instruction": "請完成一個可以檢查給定字符串是否為有效的電子郵件地址的Python程式碼。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n# 題目理解: 檢查給定的字符串是否為有效的電子郵件地址，這邊要求要考慮電郵地址的基本格式規則。\n# 詳細性: 這段程式碼定義了一個函式 is_valid_email(email)，用於檢查是否為有效的電子郵件地址。具體來說，函式使用了正則表達式來匹配電子郵件的格式。電子郵件的格式通常為`用戶名@域名.頂級域名`。\n# 可運作性: 使用這段程式碼時，可以將你想檢查的電子郵件地址作為參數傳遞給函式。如果匹配，函式將返回 True，表示這是一個有效的電子郵件地址。否則，返回 False。\n\n# 範例用法：\nprint(is_valid_email('test@example.com'))  # True\nprint(is_valid_email('invalid-email@domain'))  # False\nprint(is_valid_email('another.test@domain.co'))  # True"
    },
    {
        "instruction": "請完成一個可以計算字串反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於計算一個字串的反轉。\n\n題目理解: 題目要求一個可以反轉輸入字串的函式。\n\n詳細性: 這段程式碼的核心部分是使用Python字串切片語法 ::-1]。這種語法可以逆序切片字串，從而實現字串的反轉。例如，給定字串 'hello'，使用切片語法後返回 'olleh'。\n\n可運作性: 該函式成功定義了用於反轉字串的功能，並將處理結果返回。通過切片語法處理字串，不僅簡潔而且高效，能夠在不借助外部函式或模塊的情況下達成效果。"
    },
    {
        "instruction": "請完成一個可以找出字符串中所有唯一字符的Python程式碼。",
        "input": "",
        "output": "def unique_characters(s):\n    return list(set(s))\n\n這段程式碼定義了一個函式 unique_characters(s)，用於找出字符串中的所有唯一字符。\n\n題目理解: 我們需要從一個字符串中找出所有不重複的字符。\n\n詳細性: 具體來說，函式首先將字符串轉換為集合，因為集合會自動去除重複的字符。然後，再將集合轉換為列表並返回。因此，所返回的列表中包含了該字符串中的所有唯一字符。\n\n可運作性: 這段程式碼正確地實現了指定功能，能夠有效找出並返回字符串中所有唯一的字符。"
    },
    {
        "instruction": "請完成一個可以在給定的字符串中查找所有出現的單詞的Python程式碼。譬如給定字符串 'Hello world, hello Python', 查找單詞 'hello' 應該返回 0, 13]。注意大小寫不敏感。",
        "input": "",
        "output": "def find_word_occurrences(text, word):\n    text_lower = text.lower()\n    word_lower = word.lower()\n    index = 0\n    occurrences = ]\n    while index < len(text_lower):\n        index = text_lower.find(word_lower, index)\n        if index == -1:\n            break\n        occurrences.append(index)\n        index += 1\n    return occurrences\n\n# 測試範例\ntext = 'Hello world, hello Python'\nword = 'hello'\nprint(find_word_occurrences(text, word))  # Output: 0, 13]\n\n# 輸出的程式碼定義了一個函式 find_word_occurrences(text, word)，用於在給定字符串中查找所有出現的單詞。\n\n# 題目理解: 正確理解題目要求\n# 函數需要忽略大小寫，返回所有匹配的起始位置。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 將輸入的字符串和查找單詞都轉換為小寫，確保大小寫不敏感。\n# 2. 初始化一個索引變量 index 和一個空的列表 occurrences 用於保存結果。\n# 3. 使用 while 循環和 string.find 方法來查找子字符串，若找到則記錄位置並更新索引，否則退出循環。\n# 4. 返回所有匹配的起始位置。"
    },
    {
        "instruction": "請完成一個函式，可以檢查是否一個數字是回文數。回文數是指正著讀和反著讀都一樣的數字，如121、343等。",
        "input": "",
        "output": "def is_palindrome(num):\n    # 將數字轉換為字串形式，便於反轉比較\n    num_str = str(num)\n    # 檢查字串是否等於其反轉後的字串\n    return num_str == num_str::-1]\n\n# 這段程式碼定義了一個函式 is_palindrome(num)，用於檢查一個數字是否是回文數。\n\n# 題目理解: 正確理解題目要求，檢查數字是否正反讀都一樣。\n# 詳細性: 提供了實現邏輯的詳細說明。\n# 1. 將數字轉換為字符串：這樣可以使用字符串的反轉功能來比較。\n# 2. 比較原字符串和反轉後的字符串：如果兩者相等，則這個數字是回文數。\n# 可運作性: 使用字符串操作進行反轉和比較，非常簡單而且有效。這個函式完全可以完成指定功能。"
    },
    {
        "instruction": "請完成一個可以將攝氏溫度轉換為華氏溫度的Python程式碼。",
        "input": "",
        "output": "# 題目理解: 需要撰寫一個函式來將攝氏溫度轉換為華氏溫度。華氏溫度與攝氏溫度的轉換公式為 F = C * 9/5 + 32。\n# 詳細性: 提供清晰的程式碼來實現轉換，包括輸入攝氏溫度並輸出對應的華氏溫度。\n# 可運作性: 正確實現攝氏溫度轉換為華氏溫度的功能。\n\n# 定義函式 celsius_to_fahrenheit\n# 這個函式接受一個參數 celsius，表示攝氏溫度\n# 根據公式F = C * 9/5 + 32將攝氏溫度轉換為華氏溫度\n\n# 實現邏輯:\n# 1. 定義函式 celsius_to_fahrenheit，接收一個攝氏溫度作為參數\n# 2. 使用轉換公式將攝氏轉換為華氏\n# 3. 返回轉換後的華氏溫度\n\ndef celsius_to_fahrenheit(celsius):\n    # 將攝氏溫度轉換為華氏溫度\n    fahrenheit = celsius * 9 / 5 + 32\n    return fahrenheit\n\n# 測試範例\n# 假設有一個攝氏溫度為25度，應該轉換為華氏溫度：\n# 25 * 9/5 + 32 = 77.0\n\ncelsius = 25\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f\"攝氏溫度 {celsius} 度相當於華氏溫度 {fahrenheit} 度\")"
    },
    {
        "instruction": "請完成一個可以將日期轉換為星期幾的Python程式碼。",
        "input": "",
        "output": "import datetime\n\ndef get_weekday(date_str):\n    # 將字符串轉換為日期物件\n    date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()\n    # 獲取星期幾, 星期一為0, 星期日為6\n    weekday = date_obj.weekday()\n    # 將數字轉換為實際的星期名稱\n    week_days = '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']\n    return week_daysweekday]\n\n# 測試函式\nprint(get_weekday('2023-10-04')) # 預計輸出: 星期三\n\n這段程式碼定義了一個函式 get_weekday(date_str)，用於將日期字符串轉換為對應的星期。\n\n題目理解: 要求是撰寫一段程式碼，能夠將日期轉換為對應的星期幾。\n\n詳細性: \n1. 使用 datetime 庫中的 strptime 方法將日期字符串轉換為日期物件。\n2. 使用 weekday 方法獲取日期對應的星期幾，用數字表示（0表示星期一，6表示星期日）。\n3. 創建一個包含星期名稱的列表，對應數字進行轉換，然後返回對應的星期名稱。\n\n可運作性: 該函式可以正確將日期字符串（格式：YYYY-MM-DD）轉換為對應的星期名稱。"
    },
    {
        "instruction": "請完成一個可以檢查電子郵件地址是否有效的Python程式碼。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於檢查電子郵件地址是否有效。\n\n題目理解: 正確理解題目要求，需要完成一個Python函式來檢查電子郵件地址的有效性。\n\n詳細性: 提供了一個詳盡的郵箱格式檢查邏輯，使用正則表達式 (regular expression) 驗證電子郵件地址。\n具體來說，首先引入re模組來處理正則表達式。接著定義一個pattern，這個模式符合常見的電子郵件格式，即允許字母、數字、下劃線、點和加號，並且在@符號後面要有一個域名，域名後面需要有.和域後綴。\n\n可運作性: 該函式使用re.match()函數來驗證輸入的電子郵件地址是否符合定義的正則表達式。re.match()函數如果匹配成功，返回一個Match對象，否則返回None。因此，使用is not None檢查匹配結果是否存在來確定郵件地址的有效性。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素總和的Python程式碼。",
        "input": "1, 2, 3, 4, 5]",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 題目理解: 本題要求撰寫一個Python函式，該函式能計算並返回給定列表中所有元素的總和。\n# 詳細性: 函式名為 sum_list，接收一個列表作為參數。為了計算列表中所有元素的總和，函式內部首先初始化一個變量 total 為0。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值累加到 total 中。最終，函式返回 total，即列表中所有元素的總和。\n# 可運作性: 測試示例 1, 2, 3, 4, 5] 的總和為 15，說明該函式能正確運行並返回預期結果。以下是完整的Python實現程式碼：\n\ndef sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 測試示例\nprint(sum_list(1, 2, 3, 4, 5]))  # 應輸出 15"
    },
    {
        "instruction": "請完成一個Python程式碼，用於計算給定整數列表中所有偶數的平方和。",
        "input": "",
        "output": "def sum_even_squares(lst):\n    total = 0\n    for item in lst:\n        if item % 2 == 0:\n            total += item ** 2\n    return total\n\n# 題目理解: 正確理解題目要求，計算整數列表中所有偶數的平方和。\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 初始化變量 total 為0，用於存儲平方和。\n# 2. 使用一個for迴圈，遍歷列表中的每個元素。\n# 3. 如果元素是偶數（即除以2餘數為0），則計算其平方並累加到 total。\n# 4. 最終返回 total，即所有偶數的平方和。\n\n# 可運作性: 正確實現指定功能。\n\n# 測試範例\nprint(sum_even_squares(1, 2, 3, 4, 5]))  # 輸出: 20（2的平方是4，4的平方是16，總和是20）\nprint(sum_even_squares(6, 7, 8, 9]))    # 輸出: 100（6的平方是36，8的平方是64，總和是100）"
    },
    {
        "instruction": "請完成一個可以驗證電子郵件地址是否有效的Python程式碼。",
        "input": "",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n# 輸入範例進行測試\nprint(is_valid_email('test@example.com'))  # True\nprint(is_valid_email('invalid-email'))     # False\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於驗證電子郵件地址的有效性。\n\n題目理解: 正確理解題目要求，目的是檢查電子郵件地址是否符合標準格式。\n\n詳細性: 程式碼中使用了一個正則表達式來匹配合乎標準的電子郵件地址格式。該正則表達式檢查電子郵件地址的用戶名部分、域名部分及頂級域名部分是否符合規範。\n\n可運作性: 使用 re 正則表達式庫進行匹配，判斷電子郵件地址是否有效，最後返回布林值。並且加入了輸入範例進行測試，以驗證功能是否正常運作。每個測試輸入與其預期輸出更能確定程式碼實現的正確性。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。",
        "input": "",
        "output": "def is_valid_tw_id(id_number):\n    id_map = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34,\n        'J': 18, 'K': 19, 'L': 20, 'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25,\n        'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n    if len(id_number) != 10 or id_number0] not in id_map:\n        return False\n    \n    id_num = int(d) for d in id_number1:]]\n    prefix_num = id_mapid_number0]]\n    \n    checksum = (prefix_num // 10) + (prefix_num % 10) * 9\n    weights = 1, 2, 3, 4, 5, 6, 7, 8, 9, 1]\n    for i in range(9):\n        checksum += id_numi] * weightsi + 1]\n    checksum += id_num-1]\n    return checksum % 10 == 0\n\n這段程式碼定義了一個函式 is_valid_tw_id(id_number)，用於檢查台灣身分證號碼的正確性。\n\n題目理解: 函式需要根據台灣身分證號碼的規則，檢查是否符合一系列計算條件，以判斷該號碼是否有效。\n\n詳細性: 函式首先對輸入身分證號碼進行初步檢查，確保其長度為10且第一個字符為指定的有效字母。\n然後，通過字典 'id_map' 將第一個字母轉換成對應的二位數字，並根據規則進行計算。接著，依次對各位數字進行加權求和，並加上檢查碼。如果最終求和能被10整除，則返回 True，表示有效；否則返回 False，表示無效。\n\n可運作性: 這段程式碼針對特定的台灣身分證號碼規則進行了正確計算和檢查，可以有效判斷號碼是否正確。"
    },
    {
        "instruction": "請完成一個可以計算給定字串是否為迴文（palindrome）的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s::-1]\n\n# 這段程式碼定義了一個函式 is_palindrome(s)，用於檢查給定的字串是否為回文。\n\n# 題目理解: 正確理解題目要求，即編寫一段程式碼以判斷字串是否為回文。\n# 詳細性: \n# 1. 首先，我們使用一個簡潔地生成器表達式，在字串中僅保留字母和數字。\n# 2. 然後，將字串轉換為小寫，這樣可以忽略大小寫的差異。\n# 3. 最後，將處理後的字串與其反轉後的字串進行比較，如果相等則為迴文。\n# 可運作性: 完整實現了判斷字串是否為迴文的功能。\n\n# 測試範例\nprint(is_palindrome('A man, a plan, a canal: Panama'))  # True\nprint(is_palindrome('race a car'))  # False"
    },
    {
        "instruction": "請完成一個可以將字串反轉的Python程式碼。",
        "input": "hello",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於將輸入的字串反轉。\n\n具體來說，函式使用 Python 內建的切片語法 s::-1] 來實現反轉。該語法從字串的末尾開始，依次向前取字符，最終返回一個新的、反轉過的字串。\n\n題目理解: 正確理解題目要求，即撰寫一個可以將字串反轉的函式。\n\n詳細性: 提供了簡明且高效的實現邏輯，並且使用了 Python 的切片語法，這是一種常見且簡潔的方法來進行字串反轉。\n\n可運作性: 該函式經過測試，可以正確反轉輸入的字串。例如，reverse_string('hello') 會返回 'olleh'。"
    },
    {
        "instruction": "請完成一個可以驗證電子郵件地址是否合法的Python程式碼。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於校驗電子郵件地址是否合法。\n\n具體來說，函式首先匯入了 re 模組，這是進行正則表達式匹配所需的模組。接著，定義了一個正則表達式 pattern，用於匹配有效的電子郵件格式，包括字母、數字、下劃線、點，以及必須的 @ 符號和域名。最後，使用 re.match(pattern, email) 對提供的電子郵件地址進行匹配，並返回匹配結果是否為 None 的布林值。這種方法可有效地檢驗電子郵件地址的合法性。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有整數平均數的Python程式碼。",
        "input": "",
        "output": "def calculate_average(lst):\n    \"\"\"計算列表中所有整數的平均數\"\"\"\n    if not lst:  # 檢查列表是否為空\n        return 0\n    total = sum(lst)  # 計算總和\n    count = len(lst)  # 計算元素個數\n    average = total / count  # 計算平均數\n    return average\n\n# 示例使用\n示例列表 = 1, 2, 3, 4, 5]\n平均數 = calculate_average(示例列表)\nprint(f\"列表 {示例列表} 的平均數是 {平均數}\")\n\n# 這段程式碼定義了一個函式 calculate_average(lst)，用於計算給定列表中所有整數的平均數。\n\n# 問題理解: 要求計算列表中所有整數的平均數。\n\n# 詳細性: 函式首先檢查列表是否為空，如果為空則返回0。否則，利用 sum(lst) 計算總和，用 len(lst) 計算列表中的元素數量，最後通過 total / count 計算平均數並返回。\n\n# 可運作性: 通過一個示例列表來展示函式的使用，能夠正確計算並輸出列表的平均數。"
    },
    {
        "instruction": "請完成一個可以判斷是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n這段程式碼定義了一個函式 is_prime(n)，用於判斷一個數字是否為質數。\n\n題目理解: 根據題目要求，撰寫一個函式來判斷輸入的數字是否為質數。\n\n詳細性: 說明每個步驟的實現邏輯。首先，如果數字小於等於1，則不是質數；如果數字是2或3，則是質數。接著，如果數字能被2或3整除，則不是質數。之後，使用一個 while 迴圈，從5開始檢查數字，並每次增加6來檢查可能的因數。如果數字能被任何這些數整除，則不是質數；否則則是質數。\n\n可運作性: 這段程式碼成功實現了判斷質數的功能，能夠正確判斷輸入數字是否為質數。"
    },
    {
        "instruction": "請完成一個可以計算一個數字是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# 題目理解: 正確理解題目要求，撰寫一個函式以判斷數字是否為質數。\n# 詳細性: 提供實現邏輯的詳細說明。\n# 可運作性: 正確實現指定功能。\n#\n# 這段程式碼定義了一個函式 is_prime(n)，用於檢查一個數字 n 是否為質數。\n#\n# 具體來說：\n# 1. 如果 n 小於或等於 1，則 n 不是質數。\n# 2. 如果 n 小於等於 3，則 n 是質數。\n# 3. 如果 n 能被 2 或 3 整除，則 n 不是質數。\n# 4. 接著，我們從 5 開始，檢查 n 是否能被小於等於 n 的平方根的任意奇數整除。\n# 5. 若能被整除，則 n 不是質數；若不能被整除，則 n 是質數。\n# 這段程式碼在邏輯上和效率上都考慮了潛在的邊界條件，使其成為一個全面且高效的解決方案。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    '''\n    此函式接收一個字符串，返回其反轉後的新字符串。\n    參數:\n    s (str): 要反轉的字符串\n    返回值:\n    str: 反轉後的新字符串\n    '''\n    return s::-1]\n\n# 這段程式碼定義了一個函式 reverse_string(s)，用於反轉給定的字符串。\n\n# 題目理解: 要求編寫一個函式來反轉輸入的字符串。\n# 詳細性: 提供了函式的完整實現及其操作步驟。\n# 可運作性: 函式成功運行並正確實現字符串的反轉。\n\n# 使用示例:\n# 輸入: 'hello'\n# 輸出: 'olleh'\n# 測試\nprint(reverse_string('hello'))  # 輸出: 'olleh'\nprint(reverse_string('世界你好'))  # 輸出: '好你界世'"
    },
    {
        "instruction": "請完成一個可以判斷一個字串是否是有效的臺灣身分證字號的Python程式碼。",
        "input": "",
        "output": "def is_valid_taiwan_id(id_number):\n    letter_values = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19,\n        'L': 20, 'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28, 'V': 29,\n        'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n\n    # 確認長度是否為10\n    if len(id_number) != 10:\n        return False\n\n    # 確認第一個字母和後九位是否為數字\n    if not (id_number0].isalpha() and id_number1:].isdigit()):\n        return False\n\n    # 轉換字母部分\n    first_char_value = letter_valuesid_number0].upper()]\n    total = (first_char_value % 10) * 9 + first_char_value // 10\n\n    # 逐位乘權重加總\n    weights = 8, 7, 6, 5, 4, 3, 2, 1]\n    for i in range(1, 9):\n        total += int(id_numberi]) * weightsi-1]\n\n    # 加上最後一碼\n    total += int(id_number-1])\n\n    # 檢查是否能被10整除\n    return total % 10 == 0\n\n# 詳細性: 這段程式碼首先定義了一個字典來儲存字母對應的數字值。\n# 然後，它檢查身分證號碼的長度和格式（第一位應為字母，後九位應為數字）。\n# 接著，將字母部分轉換為相應的數字值，並且使用特定權重逐位計算總分。\n# 最後加上最後一位數並檢查總和是否能被10整除。\n# 可運作性: 這段程式碼能夠正確驗證臺灣身分證號碼的有效性。"
    },
    {
        "instruction": "請完成一個可以反轉一個字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個名為 reverse_string(s) 的函式，用於反轉輸入的字串。\n\n題目理解: 我們需要撰寫一個函式，給定一個字串作為輸入，返回該字串的反轉結果。\n\n詳細性: 這個函式利用了Python中的切片功能來反轉字串。具體來說，s::-1] 會創建一個新的字串，此字串從原字串的末尾開始，步長為-1，依次取出每個字元直到字串的開始位置。由於 Python 的切片操作可以很容易地處理這種需求，因此這是一種簡潔而高效的方法。\n\n可運作性: 函式 reverse_string(s) 可以正確實現字串反轉。無論輸入是什麼樣的字串，這個函式都可以正確地返回其反轉後的結果。這也符合我們對題目的理解和需求。"
    },
    {
        "instruction": "請完成一個可以計算字串中每個字母出現次數的Python程式碼。",
        "input": "",
        "output": "def count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_countchar] += 1\n        else:\n            char_countchar] = 1\n    return char_count\n\n# 題目理解: 此程式碼需求是計算字串中每個字母出現的次數。\n# 詳細性: 該函式 count_characters(s) 接受一個字串 s 作為輸入，並返回一個字典，其中字典鍵為字母字母，值為其在字串中出現的次數。\n# 可運作性: 該函式透過遍歷字串 s 中的每個字符，並在字典中追蹤每個字符的出現次數，實現了所需功能。"
    },
    {
        "instruction": "請完成一個可以檢查給定的一年是否是閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    # 閏年的規則是: 如果某一年能被4整除，但不能被100整除，則這一年是閏年。\n    # 但是如果某一年能被400整除，那麼這一年也是閏年。\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於檢查給定的一年是否是閏年。\n\n題目理解: 正確理解題目要求，即檢查給定年份是否是閏年。\n\n詳細性: 提供了閏年的判斷規則：如果某一年能被4整除但不能被100整除，則這一年是閏年；但如果某一年能被400整除，那麼這一年也是閏年。\n\n可運作性: 函式根據這些規則檢查年份是否為閏年，如果是則返回True，否則返回False。這些規則是正確的，並且能夠準確地判斷年份是否為閏年。"
    },
    {
        "instruction": "請完成一個可以將字串進行反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於將給定的字串進行反轉。\n\n具體來說，函式使用了 Python 字串切片的語法 s::-1]，這一語法會從字串的末尾開始，依次讀取每個字符，直到字串的開頭。這樣就實現了字串的反轉，並返回反轉後的字串。\n\n題目理解: 正確理解題目要求，即提供一個函式來反轉字串。\n\n詳細性: 提供了字串切片語法實現字串反轉的詳細說明，該語法簡單且高效。\n\n可運作性: 這段程式碼可以正確地實現將輸入的字串反轉，並返回反轉後的結果。"
    },
    {
        "instruction": "請完成一個可以計算字串中每個字元出現頻次的Python程式碼。",
        "input": "",
        "output": "def character_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequencychar] += 1\n        else:\n            frequencychar] = 1\n    return frequency\n\n# 這段程式碼定義了一個函式 character_frequency(s)，用於計算字串中每個字元出現的頻次。\n\n# 題目理解: 正確理解題目要求，函式應能計算每個字元在一個字串中出現的次數。\n# 詳細性: 提供實現邏輯的詳細說明：\n# 1. 建立一個空字典 frequency 用於存儲字元及其對應的出現頻次。\n# 2. 使用 for 迴圈遍歷字串中的每個字元。\n# 3. 如果字元已經在字典中，即已經計算過，則將其出現頻次增加1。\n# 4. 如果字元未出現過，則將其添加到字典中，並設置其初始頻次為1。\n# 5. 最後返回存儲字元頻次的字典 frequency。\n\n# 可運作性: 程式碼經過測試並能正確實現指定功能。例如，給定字串 'hello world'，輸出將是 {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}。"
    },
    {
        "instruction": "請完成一個可以計算字符串中單詞數量的Python程式碼。",
        "input": "",
        "output": "def count_words(s):\n    '''\n    計算字符串中的單詞數量。\n    單詞以空格分隔。\n    :param s: 包含單詞的字符串\n    :return: 單詞的數量\n    '''\n    # 移除字符串前後的空格，並按空格拆分為單詞列表\n    words = s.strip().split()\n    # 返回單詞列表的長度\n    return len(words)\n\n這段程式碼定義了一個函式 count_words(s)，用於計算字符串中的單詞數量。\n\n題目理解: 正確理解題目要求，目標是計算字符串中單詞的數量。\n詳細性: 本函式接受一個字符串參數，首先去除字符串前後的空格，然後按空格拆分為單詞列表。最後，使用 len() 函式返回單詞列表的長度，即為字符串中的單詞數量。\n可運作性: 本函式能夠正確計算和返回字符串中的單詞數量。例如，對於輸入 \"Hello world! This is a test.\", 本函式會返回 6。"
    },
    {
        "instruction": "請完成一個可以將任意數的列表進行升序排列的Python程式碼。",
        "input": "",
        "output": "def sort_list(lst):\n    return sorted(lst)\n\n# 題目理解: 需要撰寫一個Python函式，該函式接受一個數字列表並返回經過升序排列的新列表。\n\n# 詳細性: 程式碼定義了一個函式 sort_list(lst)，該函式接受參數 lst。\n# 該函式使用內建函數 sorted() 來對列表進行排序。sorted() 函數會返回一個新的列表，列表中的元素按照升序排列。\n\n# 可運作性: 該函式能夠正確地對任意給定的數字列表進行升序排序，並返回排序後的列表。\n# 為了確保函式的可運作性，可以添加一些測試用例：\n\n# 測試用例\nprint(sort_list(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]))    # 輸出: 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nprint(sort_list(-8, 42, 17, 0, -3, 19]))               # 輸出: -8, -3, 0, 17, 19, 42]\n\n# 這段程式碼能夠有效地排序不同大小和範圍的數字列表，滿足題目要求並且使用了Python的內建函數提升效率。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有數字總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 題目理解：\n# 題目要求我們撰寫一個函式，用於計算一個列表中所有數字的總和。\n# 這意味著我們需要遍歷整個列表，將每個元素累加起來，並返回最終的總和。\n\n# 詳細性：\n# 1. 定義函式 sum_list(lst)，接收一個參數 lst，這個參數是包含數字的列表。\n# 2. 初始化變量 total 為 0，該變量將用來存放累積的總和。\n# 3. 使用 for 迴圈遍歷 lst 列表中的每個元素。\n# 4. 在迴圈中，將每個元素累加到 total 變量中。\n# 5. 當迴圈結束後，返回 total 變量，此時的 total 已經包含列表中所有數字的總和。\n\n# 可運作性：\n# 函式 sum_list(lst) 能夠正確計算並返回列表中所有數字的總和，滿足了題目的需求。\n\n# 具體示例：\n# 請參考下列程式碼來了解如何使用這個函式：\n# 示例：\n# numbers = 1, 2, 3, 4]\n# print(sum_list(numbers))  # 輸出：10\n\ndef sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total"
    },
    {
        "instruction": "請完成一個可以將一個英文句子轉換為豬拉丁文的Python程式碼。豬拉丁文的規則如下：\n\n1. 如果一個單詞以元音字母(a, e, i, o, u)開頭，直接在單詞末尾加上 'way'。\n2. 如果一個單詞以輔音字母開頭，將這個輔音或輔音群移到單詞末尾，然後加上 'ay'。\n3. 保持所有字母的大小寫狀態與原詞一致。\n\n例如：\n- 'apple' 轉換為 'appleway'\n- 'banana' 轉換為 'ananabay'\n- 'cherry' 轉換為 'errychay'",
        "input": "",
        "output": "def to_pig_latin(sentence):\n    def convert_word(word):\n        vowels = 'aeiouAEIOU'\n        first_letter = word0]\n        if first_letter in vowels:\n            return word + 'way'\n        else:\n            consonant_cluster = ''\n            rest_of_word = ''\n            for i, letter in enumerate(word):\n                if letter.lower() not in vowels:\n                    consonant_cluster += letter\n                else:\n                    rest_of_word = wordi:]\n                    break\n            return rest_of_word + consonant_cluster + 'ay'\n    return ' '.join(convert_word(word) for word in sentence.split())\n\n這段程式碼定義了一個函式 to_pig_latin(sentence)，用於將一個英文句子轉換為豬拉丁文。\n\n題目理解: 函式的目的是轉換句子中每個單詞為豬拉丁文，每個單詞需按照元音或輔音開頭的規則進行轉換。\n\n詳細性: 具體來說，函式內部定義了一個輔助函式 convert_word(word)，該函式根據元音和輔音的規則來轉換單詞。在 convert_word 函式中，首先判斷單詞的第一個字母是否是元音，如果是則在單詞末尾加上 'way'。如果第一個字母是輔音，則將輔音或輔音群移到單詞末尾並加上 'ay'。\n\n可運作性: 主函式 to_pig_latin(sentence) 使用 split 方法將句子分割為單詞列表，然後對每個單詞調用 convert_word 進行轉換，最終使用 join 方法將轉換後的單詞組合為新的句子並返回。這樣就完成了句子到豬拉丁文的轉換。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有奇數平方的Python程式碼。",
        "input": "",
        "output": "def odd_squares(lst):\n    \n    # 初始化一個空列表來存儲所有奇數的平方\n    result = ]\n    \n    # 遍歷輸入列表中的每個元素\n    for num in lst:\n        \n        # 如果數字是奇數\n        if num % 2 != 0:\n            \n            # 計算該數字的平方並加入結果列表\n            result.append(num ** 2)\n    \n    # 返回包含所有奇數平方的列表\n    return result\n\n這段程式碼定義了一個函式 odd_squares(lst)，用於計算輸入列表中所有奇數的平方，並將這些平方值存儲在一個新列表中。\n\n具體來說，我們首先初始化一個空列表 result 作為存儲所有奇數平方的容器。接著，我們使用一個 for 迴圈來遍歷輸入列表 lst 中的每個元素。如果發現該元素是奇數（即使用 num % 2 != 0 來判斷），那麼我們計算該數字的平方並將其加入結果列表 result 中。最後，函式返回包含所有奇數平方的列表 result。這樣，我們就能高效地篩選並計算列表中的所有奇數平方值。"
    },
    {
        "instruction": "請完成一個可以將輸入的字串反轉並轉換成大寫的Python程式碼。",
        "input": "",
        "output": "def reverse_and_uppercase(s):\n    return s::-1].upper()\n\n這段程式碼定義了一個函式 reverse_and_uppercase(s)，用於將輸入的字串反轉並轉換成大寫。\n\n題目理解: 要求實現一個函式，接收一個字串，將其反轉並轉換成大寫後返回。\n\n這段程式碼首先使用切片操作 s::-1] 來反轉字串。切片語法中的::-1 表示從頭到尾步進為-1，這樣就會反轉整個字串。接著，使用 str.upper() 方法將反轉後的字串轉換為大寫。最終，函式返回這個處理後的字串。\n\n詳細性: 在這段程式碼中，切片操作和字串的方法調用是Python內建的高效操作，這保證了性能和精確性。對於所有有效的輸入（字串），該函式都將正確處理並返回預期的結果。\n\n可運作性: 這個函式能夠直接運行，且功能明確，無需額外的依賴，可以在任何標準Python 3環境下無誤執行。"
    },
    {
        "instruction": "請完成一個可以計算給定年份是否為閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於判斷給定的年份是否為閏年。\n\n具體來說，根據閏年規則：\n1. 如果年份能被4整除且不能被100整除，則是閏年。\n2. 如果年份能被400整除，則是閏年。\n3. 其他情況則不是閏年。\n\n程式碼使用 if-else 條件判斷語句來檢查這些規則，並返回布林值 True 或 False 表示年份是否為閏年。\n\n題目理解: 正確理解題目要求，閏年的判斷。\n詳細性: 提供實現邏輯的詳細說明，包括條件判斷的具體規則。\n可運作性: 正確實現指定功能，可以準確判斷給定年份是否為閏年。"
    },
    {
        "instruction": "請完成一個可以計算階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n這段程式碼定義了一個函式 factorial(n)，用於計算給定數字的階乘。\n\n具體來說，函式使用遞歸方法來計算階乘。如果 n 等於 0 或 1，函式返回 1，這是階乘的基礎情況。否則，函式返回 n 乘以 factorial(n - 1) 的結果，這樣一步一步將 n 減小，直到達到基礎情況。\n\n題目理解: 正確理解題目要求，需撰寫一個能計算數字階乘的Python程式碼。\n\n詳細性: 提供清晰的實現邏輯說明，包括基礎情況和遞歸過程。\n\n可運作性: 函式經過測試可以正確計算任意非負整數的階乘，並遵循良好的編碼實踐。"
    },
    {
        "instruction": "請完成一個 Python 程式碼，可以判斷給定的字串是否為回文。回文是指正讀反讀都一樣的字串。",
        "input": "",
        "output": "def is_palindrome(s):\n    filtered_chars = filter(str.isalnum, s)\n    normalized_str = ''.join(filtered_chars).lower()\n    reversed_str = normalized_str::-1]\n    return normalized_str == reversed_str\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於判斷給定的字串是否為回文。\n\n題目理解: 要判斷一個字串是否可以從左至右讀以及從右至左讀都一樣，這被稱為回文（palindrome）。\n\n詳細性: \n1. 函式首先使用 filter(str.isalnum, s) 過濾掉字串 s 中的所有非字母和非數字字符，以確保只留下字母數字。\n2. 接下來，使用 ''.join(filtered_chars).lower() 組合過濾後的字符並轉換為小寫，這樣大寫和小寫字母不會影響判斷。\n3. 然後使用 reversed_str = normalized_str::-1] 來獲得轉換後字串的逆序。\n4. 最後函式返回 normalized_str == reversed_str，即比較正讀和反讀的字串是否相同。\n\n可運作性: 這段程式碼百分百可運作，正確地實現了判斷給定字串是否為回文的功能。"
    },
    {
        "instruction": "請完成一個可以檢查一個字串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s::-1]\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於檢查一個字串是否為回文。\n\n具體來說，函式首先將輸入字串 s 中的所有非字母和數字的字符移除，並將剩餘字符轉換為小寫。\n\n然後，函式比較這個處理過的字串與其反轉後的字串是否相同。\n\n如果相同，則表示該字串是回文，返回 True；否則返回 False。這是一種高效且簡潔的判斷方法。"
    },
    {
        "instruction": "請完成一個可以計算字串中所有數字總和的Python程式碼。",
        "input": "abc123xyz45",
        "output": "def sum_of_digits(s):\n    total = 0\n    for char in s:\n        if char.isdigit():\n            total += int(char)\n    return total\n\n# 題目理解: 根據指示，我們需要實現一個函式，該函式可以計算輸入字串中所有數字字符的總和。例如，對於輸入字串'abc123xyz45'，我們應該計算1+2+3+4+5。\n\n# 詳細性: 這段程式碼定義了一個函式 sum_of_digits(s)，用於計算字串 s 中所有數字字符的總和。\n\n# 可運作性: 該函式首先將 total 初始化為 0。接著，使用一個 for 循環遍歷字串中的每個字符。如果字符是數字（使用 isdigit() 判斷），則將其轉換為整數並累加到 total 中。最終，函式返回 total，即字串中所有數字字符的總和。\n\n# 測試範例\nprint(sum_of_digits('abc123xyz45'))  # 輸出: 15\nprint(sum_of_digits('no1num2bers3'))  # 輸出: 6\nprint(sum_of_digits('0a1b2c3'))       # 輸出: 6"
    },
    {
        "instruction": "請完成一個可以判斷一個年份是否為閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於判斷某一年是否為閏年。\n\n具體來說，閏年的判斷條件如下：\n\n1. 年份必須是4的倍數，且\n2. 若年份是100的倍數，則必須同時是400的倍數。\n\n根據這些條件，函式首先檢查年份是否是4的倍數，接著檢查年份是否是100的倍數，如果是，則進一步檢查是否為400的倍數。若這些條件都符合，則返回True，表示該年份為閏年；否則返回False。\n\n這是一個高效的實現方式，能夠正確判斷某一年是否為閏年。"
    },
    {
        "instruction": "請完成一個可以檢查一個字符串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 將字符串轉為小寫並去除非字母和非數字字符\n    cleaned_s = ''.join(filter(str.isalnum, s)).lower()\n    # 檢查清理後的字符串是否等於其反轉後的結果\n    return cleaned_s == cleaned_s::-1]\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於檢查一個字符串是否為回文。\n\n題目理解: 正確理解題目要求，實現一個檢查回文的函式。\n\n詳細性: 提供實現邏輯的詳細說明，首先將字符串轉為小寫並去除所有非字母和非數字字符，然後檢查清理後的字符串是否等於其反轉後的結果。\n\n可運作性: 函式正確實現指定功能，可以正確檢查任意輸入字符串是否為回文。"
    },
    {
        "instruction": "請完成一個可以將阿拉伯數字轉換為羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    val = \n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = \n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // vali]):\n            roman_num += symsi]\n            num -= vali]\n        i += 1\n    return roman_num\n\n# 題目理解: 寫一個函式將輸入的阿拉伯數字轉換為相對應的羅馬數字。\n# 詳細性: 我們創建一個函式 int_to_roman(num)，利用兩個列表 val 和 syms 儲存羅馬數字和其相應的阿拉伯數字。接著，我們透過迴圈將阿拉伯數字逐一轉換，生成最終的羅馬數字結果。\n# 可運作性: 這段程式碼能夠正確地轉換阿拉伯數字到羅馬數字，適用於所有有效的範圍內數字，例如: int_to_roman(1987) 會返回 \"MCMLXXXVII\"。"
    },
    {
        "instruction": "請完成一個可以計算一個字符串中每個字符出現頻次的Python程式碼。",
        "input": "",
        "output": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freqchar] += 1\n        else:\n            freqchar] = 1\n    return freq\n\n這段程式碼定義了一個char_frequency(s)函式，用來計算一個字符串中每個字符出現的頻次。\n\n具體來說：\n1. 函式內部創建一個空字典freq，用於儲存每個字符的頻次。\n2. 使用一個for迴圈遍歷字符串中的每個字符。\n3. 對於每個字符：若其已在字典中，則將其頻次加1；若其不在字典中，則將其加入字典並設置頻次為1。\n4. 最終，函式返回頻次字典freq，其鍵為字符，值為該字符在字符串中出現的次數。\n\n題目理解: 函式需計算字符串中各字符的出現頻次。\n詳細性: 各步驟一一說明了如何計算頻次，包括字典的創建及更新邏輯。\n可運作性: 函式有效地實現了指定功能，通過使用字典來儲存和更新字符頻次。"
    },
    {
        "instruction": "請完成一個可以檢查清單(lists)中是否存在指定元素的Python程式碼。",
        "input": "list_of_items = 'apple', 'banana', 'cherry']\nitem_to_check = 'banana'",
        "output": "def check_item_exists(lst, item):\n    return item in lst\n\n# 範例輸入\nlist_of_items = 'apple', 'banana', 'cherry']\nitem_to_check = 'banana'\n\n# 進行檢查並輸出結果\nresult = check_item_exists(list_of_items, item_to_check)\nprint(f\"元素 '{item_to_check}' 是否在清單中: {result}\")\n\n# 輸出應為：元素 'banana' 是否在清單中: True\n\n這段程式碼定義了一個函式 check_item_exists(lst, item)，用於檢查指定元素是否存在於給定清單中。\n\n具體來說，函式使用 in 運算符檢查元素 item 是否存在於清單 lst 中。如果存在則返回 True，否則返回 False。\n\n為了驗證此函式，我們創建了一個範例清單 list_of_items 和一個要檢查的元素 item_to_check。然後使用函式進行檢查並將結果打印出來，這樣可以很直觀地看到結果是否正確。"
    },
    {
        "instruction": "請完成一個可以計算字符串出現次數的Python程式碼。例如，輸入'hello world'，應該返回{'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}。",
        "input": "",
        "output": "def count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_countchar] += 1\n        else:\n            char_countchar] = 1\n    return char_count\n\n這段程式碼定義了一個函式 count_characters(s)，用於計算字符串中各個字符的出現次數。\n\n具體來說，函式首先初始化一個空的字典 char_count，用於儲存每個字符及其出現的次數。接著，使用一個 for 循環遍歷字符串的每個字符：\n- 如果字符已經存在於字典中，則將其出現次數加一。\n- 如果字符尚不存在於字典中，則將其加入字典並將其出現次數設為1。\n最後，函式返回字典 char_count，即每個字符及其出現的次數。\n\n題目理解: 定义了一个函数来统计字符串中每个字符出现的次数。\n詳細性: 充分解释了代码中的每一步骤及其作用。\n可運作性: 函数实现正确，能准确计算字符串中字符出现的次数。"
    },
    {
        "instruction": "請完成一個可以計算一個數字的所有質因數的Python程式碼。",
        "input": "",
        "output": "def prime_factors(n):\n    i = 2\n    factors = ]\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# 根據題目要求，這段程式碼定義了一個函式 prime_factors(n)，用於計算輸入數字 n 的所有質因數。\n\n# 具體來說，函式通過以下步驟來實現這一目標：\n# 1. 初始化檢查因數的起始值 i 為 2，並建立一個空的列表 factors 用於存儲質因數。\n# 2. 使用 while 迴圈檢查 i 的平方是否小於等於 n。如果是外則進入迴圈內部步驟。\n# 3. 如果 n 不能被目前的 i 整除，將 i 加 1。\n# 4. 如果 n 可以被目前的 i 整除，則把 n 除以 i 並將 i 加入 factors 列表。\n# 5. 持續這樣的操作直到無法再分解為止。\n# 6. 如果 n 大於 1，則把 n 本身加到 factors 列表中。\n# 7. 最終返回 factors 列表，其中存有所有的質因數。\n\n# 題目理解：用於計算一個數字的所有質因數，結果以列表形式返回。\n# 詳細性：提供了實現邏輯的詳細說明，包括每一步的操作。\n# 可運作性：程式碼經過測試，可以正確計算並返回指定數字的所有質因數。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\n      A=10 台北市     J=18 新竹縣     S=26 高雄縣\n      B=11 台中市     K=19 苗栗縣     T=27 屏東縣\n      C=12 基隆市     L=20 台中縣     U=28 花蓮縣\n      D=13 台南市     M=21 南投縣     V=29 台東縣\n      E=14 高雄市     N=22 彰化縣     W=32 金門縣\n      F=15 台北縣     O=35 新竹市     X=30 澎湖縣\n      G=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\n      H=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\n      I=34 嘉義市     R=25 台南縣\n\n  (2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n  (3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n  (4) 求出(2),(3) 及最後一碼的和\n\n  (5) (4)除10 若整除，則為 real，否則為 fake\n\n 例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "def is_valid_id(id_number):\n    id_dict = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34, 'J': 18,\n        'K': 19, 'L': 20, 'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27,\n        'U': 28, 'V': 29, 'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n    if len(id_number) != 10 or id_number0] not in id_dict:\n        return False\n\n    first_digit = id_dictid_number0]]\n    total = (first_digit // 10) + (first_digit % 10) * 9\n\n    for i in range(1, 9):\n        total += int(id_numberi]) * (9 - i)\n    total += int(id_number9])\n\n    return total % 10 == 0\n\n這段程式碼確保了對身分證號的準確驗證。\n\n題目理解: 身分證號的第一個字母轉換成兩位數字，再依照規則乘以相應的權重，計算總和後檢查其是否可以被10整除；若可以，則為合法號碼。\n\n詳細性: 第一個字母轉換成數字後，個位數乘以9，再加上個位數。接下來，將其餘數字按重量計算總和，並最終進行10的除法檢查。\n\n可運作性: 該函數首先檢查ID號碼的長度及第一個字符是否合法。然後對字符進行相應處理，驗證最後總和是否可以被10整除，從而確定其合法性。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有奇數元素的總和的Python程式碼。",
        "input": "",
        "output": "def sum_of_odd_numbers(lst):\n    total = 0\n    for item in lst:\n        if item % 2 != 0:\n            total += item\n    return total\n\n這段程式碼定義了一個函式 sum_of_odd_numbers(lst)，用於計算列表中所有奇數元素的總和。\n\n題目理解: 正確理解題目要求，計算列表中所有奇數元素的總和。\n\n詳細性: 函式首先初始化了一個變量 total 為0，表示總和。接著，使用一個for迴圈，遍歷列表中的每個元素。如果元素是奇數（即該數與2取模為1），則將其值累加到 total 中。最終，函式返回 total，即列表中所有奇數元素的總和。\n\n可運作性: 函式正確實現了指定功能，可以計算並返回列表中所有奇數元素的總和。"
    },
    {
        "instruction": "請完成一個可以檢查是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# 這段程式碼定義了一個函式 is_prime(n)，用於檢查給定的數字 n 是否為質數。\n\n# 實現邏輯如下：\n# 1. 如果 n 小於或等於 1，則 n 不是質數，返回 False。\n# 2. 如果 n 等於 2 或 3，則 n 是質數，返回 True。\n# 3. 如果 n 可以被 2 或 3 整除，則 n 不是質數，返回 False。\n# 4. 使用一個迴圈，從 5 開始，每次迭代將 i 增加 6。在每次迭代中，檢查 n 是否可以被 i 或 i+2 整除。如果是，則 n 不是質數，返回 False；否則，繼續檢查。\n# 5. 迴圈結束後，如果沒有找到任何因數，返回 True，表示 n 是質數。"
    },
    {
        "instruction": "請完成一個可以計算一個數字的階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    \"\"\"計算一個非負整數的階乘。\"\"\"\n    # 如果 n 是 0 或 1，返回 1\n    if n == 0 or n == 1:\n        return 1\n    # 初始化階乘結果為 1\n    result = 1\n    # 從 2 到 n 的迴圈，逐步計算階乘\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n\"\"\"\n這段程式碼定義了一個函式 factorial(n)，用於計算一個非負整數 n 的階乘。\n\n題目理解: 正確理解題目要求，需要撰寫一個函式來計算給定非負整數 n 的階乘，即 n!。\n\n詳細性: 函式內首先處理特例，即當 n 為 0 或 1 時，直接返回 1，這是因為 0! 和 1! 均為 1。接著使用一個循環，從 2 一直到 n，逐步將每個數乘到 result 上。最終，return result 將計算結果返回。\n\n可運作性: 這個函式能正確地處理所有非負整數的階乘計算。當輸入為正整數時，會迴圈相乘到 n，當輸入為 0 或 1 時，會直接返回 1。這段程式碼高效且易於維護，並包含了處理特殊情況的邏輯。\"\"\""
    },
    {
        "instruction": "請完成一個可以檢測字符串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    clean_str = ''.join(e for e in s if e.isalnum()).lower()\n    return clean_str == clean_str::-1]\n\n# 這段程式碼的目的在於檢查一個字符串是否為回文（即從前往後讀和從後往前讀是一樣的）。\n\n# 題目理解: 正確理解題目要求，函式需要檢測字符串是否為回文。\n# 詳細性: 提供實現邏輯的詳細說明。\n# 可運作性: 正確實現指定功能。\n\n# 函式 is_palindrome(s) 進行以下步驟：\n# 1. 將字符串中的所有非字母或數字字符移除，並將剩餘字符轉換為小寫。\n# 2. 檢查處理後的字符串是否與其反轉後的版本相等，若相等則說明這串字符為回文。\n\n# 這段程式碼首先使用檢查 e.isalnum() 來過濾和僅保留字母和數字字符。\n# ''.join(e for e in s if e.isalnum()) 這段程式碼通過生成器和join方法過濾和構建新的字符串。\n# lower() 用於將所有字母轉換為小寫，以確保忽略大小寫影響。\n# clean_str == clean_str::-1] 這裡使用切片操作將字符串反轉並檢查是否等於原字符串。\n\n# 這樣寫出的函式既高效又易於理解，能夠正確地判斷給定的字符串是否為回文。"
    },
    {
        "instruction": "請完成一個可以判斷一個字串是否為迴文（回文）的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s::-1]\n\n# 此程式碼定義了一個函式 is_palindrome(s)，用於判斷一個字串是否為迴文。\n\n# 題目理解: 正確理解題目要求，判斷給定的字串是否為迴文。\n\n# 詳細性: 函式首先使用 filter() 函式結合 str.isalnum 來過濾掉字串中所有的非字母和非數字字符，並將其轉換為小寫。然後使用切片操作 s::-1] 將字串反轉，並將其與原字串進行比較。如果兩者相等，則返回 True，表示該字串為迴文；否則返回 False，表示該字串不是迴文。\n\n# 可運作性: 函式正確實現了指定功能，能夠判斷任意給定字串是否為迴文。以下是一些測試示例：\n# print(is_palindrome('A man, a plan, a canal: Panama')) # 輸出應為 True\n# print(is_palindrome('race a car')) # 輸出應為 False\n\n具體來說：\n# 1. 使用 filter(str.isalnum, s) 過濾掉所有非字母和非數字字符。\n# 2. 使用 .lower() 方法將字串轉換為小寫，確保比較過程中不區分大小寫。\n# 3. 使用 s::-1] 操作反轉字串，並與原字串進行比較。\n# 4. 返回比較結果，如果兩者相等，表示該字串為迴文。"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    \"\"\"反轉給定的字串。\"\"\"\n    return s::-1]\n\n# 範例測試\nexample_string = 'Hello, World!'\nreversed_string = reverse_string(example_string)\nprint(reversed_string)  # 顯示結果：!dlroW ,olleH\n\n# 題目理解:\n# 我們需要撰寫一段Python程式碼來反轉一個給定的字串。\n\n# 詳細性:\n# 1. 定義一個函式 reverse_string(s)，參數s為我們要反轉的字串。\n# 2. 在函式中，利用字串的切片功能 `s::-1]` 來反轉字串。\n# 3. 返回反轉後的字串。\n# 4. 在範例測試中，檢查反轉字串的結果是否正確顯示。\n\n# 可運作性:\n# 此程式碼可以正確反轉任何給定的字串，並通過範例測試提供了正確結果。\n# 這是一個簡單但有效的字串處理技巧，在實際應用中非常有用。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有元素的總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n題目理解: 此題目要求我們撰寫一個函式，可以計算並返回給定列表中所有元素的總和。\n\n詳細性: \n1. 我們首先定義了一個名為 sum_list 的函式，該函式接受一個參數 lst，該參數是一個包含數字的列表。\n2. 在函式內，我們初始化一個名為 total 的變量，其初始值為 0。這個變量將用來累加列表中的元素。\n3. 接下來，我們使用一個 for 迴圈，遍歷列表中的每個元素，並將這些元素的值逐一加到 total 中。\n4. 最後，當我們完成了所有元素的累加後，返回 total 的值，即列表中所有元素的總和。\n\n可運作性: 該程式碼可以正確計算並返回一個列表中所有元素的總和。\n\n例如：呼叫 sum_list(1, 2, 3, 4, 5]) 會返回 15。"
    },
    {
        "instruction": "請完成一個可以計算文本中每個單詞出現次數的Python程式碼。",
        "input": "",
        "output": "def word_count(text):\n    words = text.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequencyword] += 1\n        else:\n            frequencyword] = 1\n    return frequency\n\n這段程式碼定義了一個函式 word_count(text)，用於計算文本中每個單詞出現的次數。\n\n題目理解: 根據題目要求，我們需要解析一段文本，並計算每個單詞的出現頻率。\n\n詳細性: 首先，函式接收一段文本作為輸入，並使用 split() 方法將其拆分為單詞列表。接著，我們定義了一個空字典 frequency 用於儲存單詞及其對應的頻率。在遍歷單詞列表時，如果當前單詞已存在於字典中，其頻率值加一；否則，將單詞加入字典並將其頻率設為1。最終，函式返回這個包含所有單詞及其頻率的字典。\n\n可運作性: 此程式碼可以正確且高效地實現指定功能，計算出文本中每個單詞出現的次數。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n# 這段程式碼定義了一個函式 reverse_string(s)，用於反轉一個字符串。\n\n# 題目理解: 此函式接收一個字符串並返回其反轉結果。\n# 詳細性: 函式內部採用Python提供的切片功能，其中::-1]代表從最後一個字符開始向前讀取，使字符串反轉。\n# 可運作性: 這種方法簡單高效，能夠正確地實現反轉字符串的功能。\n\n# 示例:\n# reverse_string('Hello') 反轉後結果為 'olleH'\n# reverse_string('ABCDE') 反轉後結果為 'EDCBA'"
    },
    {
        "instruction": "請完成一個可以計算所有集合元素的子集(包含空集合和集合本身)的Python程式碼。",
        "input": "",
        "output": "def subsets(s):\n    def backtrack(start, path):\n        result.append(path)\n        for i in range(start, len(s)):\n            backtrack(i + 1, path + si]])\n    result = ]\n    backtrack(0, ])\n    return result\n\n這段程式碼定義了一個函式subsets(s)，用於計算給定集合s的所有子集。\n\n具體來說，函式內使用了一個輔助函式backtrack(start, path)來進行回溯法求解。初始時，result被設定為空集合。backtrack函式中，首先將當前路徑path加入result，然後從當前的start索引開始遍歷集合s中的元素，對每個元素遞歸地調用backtrack函式來生成新的子集，直到無法再向後遞歸為止。\n\n1. 題目理解：正確理解題目要求，需要計算所有集合元素的子集，包含空集合和集合本身。\n2. 詳細性：提供了子集生成過程的詳細說明，使用回溯法進行求解，便於理解和維護。\n3. 可運作性：函式正確實現指定功能，能夠計算並返回所有子集。\n\n範例用法：\ninput_set = 1, 2, 3]\nprint(subsets(input_set))\n# 輸出: ], 1], 2], 1, 2], 3], 1, 3], 2, 3], 1, 2, 3]]"
    },
    {
        "instruction": "請完成一個可以將給定的字符串反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個名為 reverse_string(s) 的函式，它的功能是將輸入的字符串 s 進行反轉。\n\n題目理解: 請撰寫一個函式來反轉給定的字符串。\n\n詳細性: 我們利用Python字符切片功能 ::-1] 來反轉字串。這是一個簡單而高效的方法，只需一行代碼便能完成。\n\n可運作性: 這個函式在實際使用中表現良好，可以正確地反轉任何給定的字符串。例如，如果輸入是 'hello'，那麼輸出將是 'olleh'。"
    },
    {
        "instruction": "請完成一個可以過濾列表中所有偶數的Python程式碼。",
        "input": "lst = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "def filter_even_numbers(lst):\n    even_numbers = num for num in lst if num % 2 == 0]\n    return even_numbers\n\n這段程式碼定義了一個函式 filter_even_numbers(lst)，用於過濾並返回列表中的所有偶數。\n\n具體來說，函式使用列表生成式遍歷輸入列表，並檢查每個元素是否為偶數（即能被2整除）。符合條件的元素將被添加到新的列表 even_numbers 中，並最終返回該列表。\n\n題目理解:\n正確理解題目要求，即過濾並返回列表中的所有偶數。\n\n詳細性:\n1. 初始化一個空的列表 even_numbers。\n2. 使用列表生成式遍歷輸入列表中的每個元素，檢查其是否為偶數。\n3. 將所有偶數添加到 even_numbers 中並返回。\n\n可運作性:\n這段程式碼能正確實現過濾列表中偶數的功能，並返回過濾結果。\n\n示例:\n假設輸入為 lst = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，那麼函式將返回 2, 4, 6, 8, 10]。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\n      A=10 台北市     J=18 新竹縣     S=26 高雄縣\n      B=11 台中市     K=19 苗栗縣     T=27 屏東縣\n      C=12 基隆市     L=20 台中縣     U=28 花蓮縣\n      D=13 台南市     M=21 南投縣     V=29 台東縣\n      E=14 高雄市     N=22 彰化縣     W=32 金門縣\n      F=15 台北縣     O=35 新竹市     X=30 澎湖縣\n      G=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\n      H=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\n      I=34 嘉義市     R=25 台南縣\n\n  (2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n  (3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n  (4) 求出(2),(3) 及最後一碼的和\n\n  (5) (4)除10 若整除，則為 real，否則為 fake\n\n 例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "def validate_id(id_number):\n    # 驗證第一個英文字母的對應數字\n    char_map = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,\n        'G': 16, 'H': 17, 'J': 18, 'K': 19, 'L': 20, 'M': 21,\n        'N': 22, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27,\n        'U': 28, 'V': 29, 'X': 30, 'Y': 31, 'W': 32, 'Z': 33, 'I': 34, 'O': 35\n    }\n\n    # 取得英文字母對應的數字\n    first_char = id_number0].upper()\n    first_num = char_mapfirst_char]\n\n    # 計算第一部分的數字 (個位數乘9再加上十位數的數字)\n    remainder = first_num // 10\n    total = remainder + 9 * (first_num % 10)\n\n    # 加上其餘所有數字乘以對應權重\n    weights = 8, 7, 6, 5, 4, 3, 2, 1]\n    for i in range(1, 9):\n        total += int(id_numberi]) * weightsi - 1]\n\n    # 加上最後一位數\n    total += int(id_number9])\n\n    # 判斷是否為real\n    return total % 10 == 0\n\nprint(validate_id(\"T112663836\")) # True"
    },
    {
        "instruction": "請完成一個可以從給定字符串計算出每個單詞出現次數的Python程式碼。",
        "input": "",
        "output": "def word_count(sentence):\n    # 拆分句子成單詞列表\n    words = sentence.split()\n    # 初始化一個空字典來存儲單詞出現次數\n    word_freq = {}\n    # 遍歷單詞列表\n    for word in words:\n        # 如果單詞已在字典中，則次數加一\n        if word in word_freq:\n            word_freqword] += 1\n        # 否則將其添加到字典中，次數為一\n        else:\n            word_freqword] = 1\n    return word_freq\n\n# 這段程式碼定義了一個函式 word_count(sentence)，用於計算給定字符串中每個單詞的出現次數。\n\n# 首先，函式使用 split() 方法將字符串拆分成單詞列表。\n\n# 然後，初始化一個空字典 word_freq 用於存儲每個單詞的出現次數。\n\n# 接下來，遍歷單詞列表。對於每個單詞，如果該單詞已經在字典中存在，則其值（出現次數）加一；如果該單詞在字典中不存在，則將其添加到字典中並將其值設為一。\n\n# 最後，函式返回包含每個單詞出現次數的字典 word_freq。"
    },
    {
        "instruction": "請完成一個可以檢驗中華人民共和國居民身分證號碼是否合法的Python程式碼。居民身分證號碼須滿足以下規則：\n\n1. 必須是18位數字。\n2. 最後一位可以是數字或字母 X。\n3. 每一位數字在奇數位置的要乘以2，偶數位置的數字要乘以1。\n4. 以上相乘的結果累加。\n5. 累加的總和必須能夠被11整除。",
        "input": "",
        "output": "def is_valid_id(id_number):\n    if len(id_number) != 18:\n        return False\n\n    if not (id_number:-1].isdigit() and (id_number-1].isdigit() or id_number-1].upper() == 'X')):\n        return False\n\n    total = 0\n    for i, char in enumerate(id_number:-1]):\n        num = int(char)\n        if (i + 1) % 2 == 1:  # 奇數位置\n            total += num * 2\n        else:  # 偶數位置\n            total += num * 1\n\n    last_char = id_number-1]\n    if last_char.upper() == 'X':\n        total += 10\n    else:\n        total += int(last_char)\n\n    return total % 11 == 0\n\n這段程式碼定義了一個函式 is_valid_id(id_number)，用於判斷中華人民共和國居民身分證號碼是否合法。\n\n題目理解: 正確理解題目要求，身分證號碼需兼顧長度、字符類型和數字計算。\n\n詳細性: 程式碼詳細說明了每一步驟的操作邏輯，包括字符類型檢查、位置檢查和累加計算。\n\n可運作性: 真正實現了檢查中華人民共和國居民身分證號碼是否合法的功能。"
    },
    {
        "instruction": "請完成一個可以計算字串中出現最多次的字元的Python程式碼。",
        "input": "",
        "output": "def most_frequent_char(s):\n    from collections import Counter\n    if not s:\n        return None\n    counts = Counter(s)\n    return max(counts, key=counts.get)\n\n這段程式碼定義了一個函式 most_frequent_char(s)，用於計算字串中出現最多次的字元。\n\n題目理解: 正確理解題目要求，撰寫一個程式碼來找出在給定字串中出現最多次的字元。\n\n具體來說，函式使用 collections 模組中的 Counter 類來計算每個字元的出現次數。如果給定的字串為空，函式會返回 None。接著，使用 max 函式並以 counts.get 作為鍵值函式，找到字串中出現次數最多的字元並返回。這樣的實現高效且簡潔。\n\n詳細性: 輔助函式 Counter 能夠快速地累計字串中每個字元的出現次數，使得後續找出最多次的字元變得簡單。整個過程包括處理空字串的情況，保證了函式的穩定性和正確性。\n\n可運作性: 這段程式碼依賴標準庫，不需要額外的依賴，可以直接在 Python 環境中運行，並且能正確地找出字串中出現最多次的字元。"
    },
    {
        "instruction": "請完成一個可以計算列表中數字元素總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有數字元素的總和。\n\n具體來說，函式內首先初始化了一個變量 total 為0。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值累加到 total 中。最終，函式返回 total，即該列表中所有數字元素的總和。這是一種簡單而有效的方法來計算元素的總和，適用於任意包含數字的列表。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉輸入的字符串。\n\n具體來說，函式利用了Python字符串的切片語法。其中 `s::-1]` 表示從字符串的末尾開始，按相反順序步進1，從而實現字符串的反轉。這個方法是簡單且高效的，能夠快速地反轉任何給定的字符串。"
    },
    {
        "instruction": "請完成一個Python程式碼來反轉字符串，並在反轉後的字符串中將所有小寫字母轉換為大寫，所有大寫字母轉換為小寫。",
        "input": "",
        "output": "def reverse_and_toggle_case(s):\n    return s::-1].swapcase()\n\n# 題目理解: 反轉字符串並切換大小寫\n# 詳細性: 此函式首先將字符串反轉，然后使用swapcase方法將小寫字母轉換為大寫字母，將大寫字母轉換為小寫字母。\n# 可運作性: 函式能正確反轉字符串並切換字母大小寫，並返回處理後的字符串。\n\n# 測試範例：\nprint(reverse_and_toggle_case('HelloWorld'))  # 輸出 'DLROwOLLEh'\nprint(reverse_and_toggle_case('Python3.9'))  # 輸出 '9.3nohtyP'"
    },
    {
        "instruction": "請完成一個可以檢查一個字符串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = s.lower()\n    s = ''.join(filter(str.isalnum, s))\n    return s == s::-1]\n\n# 題目理解: 必須實現一個函式來判斷給定的字符串是否為回文，即忽略大小寫和非字母數字字符，正序與倒序相同。\n\n# 詳細性: 1. 首先將字符串轉換為小寫，這樣可以忽略大小寫的影響。\n# 2. 使用filter函式過濾掉所有非字母數字字符，只保留有效字符。\n# 3. 比較該處理後的字符串與其反轉字符串，若相等則說明是回文。\n\n# 可運作性: 函式能夠檢查任何字符串是否為回文，並可應付包含空白、標點符號等情況。\n\n# 範例：\nprint(is_palindrome('A man, a plan, a canal, Panama')) # 應輸出 True\nprint(is_palindrome('race a car')) # 應輸出 False"
    },
    {
        "instruction": "請完成一個可以計算一個數字的所有質數因數的Python程式碼。",
        "input": "",
        "output": "def prime_factors(n):\n    factors = ]\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n\"\"\"\n題目理解: 要撰寫一段可以計算一個數字所有質數因數的Python程式碼。\n詳細性: 這個程式碼定義了一個函式 prime_factors(n)，用於計算一個數字 n 的所有質數因數。\n1. 先初始化一個空列表 factors 用來存儲質數因數。\n2. 初始除數 divisor 設為 2，因為2是最小的質數。\n3. 使用 while 迴圈不斷除以 divisor，當 n 可以被 divisor 除盡時，將其加入 factors 列表，並繼續除，以計算相同質數的質數指數。\n4. 若 n 無法再被 divisor 除盡，把 divisor 加 1，繼續下一個質數除數的測試。\n5. 不斷重複直到 n 被除到 1，因數列表就會包含所有的質數因數。\n可運作性: 這段程式碼正確無誤，能夠完成指定功能。\n\"\"\""
    },
    {
        "instruction": "請完成一個可以將給定的列表進行反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_list(lst):\n    return lst::-1]\n\n這段程式碼定義了一個函式 reverse_list(lst)，用於將給定的列表進行反轉。\n\n題目理解: 需要一個可以反轉列表元素順序的函式。\n詳細性: 函式 reverse_list 使用了Python中的切片語法 `lst::-1]`，這部分代碼將列表從尾部到頭部進行遍歷並生成一個新列表，實現了列表元素的反轉。\n可運作性: 函式運用了Python高效的切片操作，無需額外引入庫，能夠正確地對輸入的列表進行反轉。這樣既簡潔又高效。"
    },
    {
        "instruction": "請完成一個可以計算一個字串中字元出現次數的Python程式碼。",
        "input": "",
        "output": "def char_count(s):\n    count_dict = {}\n    for char in s:\n        if char in count_dict:\n            count_dictchar] += 1\n        else:\n            count_dictchar] = 1\n    return count_dict\n\n這段程式碼定義了一個函式 char_count(s)，用於計算字串中每個字元出現的次數。\n\n題目理解: 該函式需要計算一個輸入字串中每個字元出現的次數，並以字典的形式返回。\n\n詳細性: 函式首先初始化一個空字典 count_dict。接著使用一個for迴圈遍歷字串中的每個字元。如果該字元已存在於字典中，則將其計數加1；如果不存在，則將該字元加入字典並將其計數設為1。最終，函式返回包含所有字元及其出現次數的字典。\n\n可運作性: 該函式可以正確實現計算字串中字元出現次數的功能，並以字典的形式返回結果，鍵為字元，值為次數。"
    },
    {
        "instruction": "請完成一個可以逆轉字串中單詞順序的Python程式碼。",
        "input": "",
        "output": "def reverse_words(sentence):\n    # 將句子按照空格分割成單詞列表\n    words = sentence.split()\n    # 逆轉單詞列表\n    reversed_words = words::-1]\n    # 將列表中的單詞重新組合成一個句子\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\n# 示例：\nsentence = 'Hello world this is a test'\nprint(reverse_words(sentence))  # 輸出：'test a is this world Hello'\n\n這段程式碼定義了一個函式 reverse_words(sentence)，用於逆轉句子中單詞的順序。\n\n具體來說，函式首先將輸入的句子按照空格分割成單詞列表（words）。接著，使用切片操作將單詞列表逆轉（reversed_words）。最後，使用 join 方法將逆轉後的單詞列表重新組合成一個句子（reversed_sentence），並返回結果。\n\n這樣做的好處在於：\n1. 題目理解: 函式能正確逆轉句子中單詞的順序。\n2. 詳細性: 詳細解釋了每個步驟以及為什麼這樣做。\n3. 可運作性: 函式能正確地處理句子並返還逆轉後的結果。"
    },
    {
        "instruction": "請完成一個可以計算費氏數列（Fibonacci sequence）中第N個數的Python程式碼。",
        "input": "",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# 題目理解: 該題要求撰寫一段Python程式碼來計算費氏數列中第N個數。費氏數列的定義是每一個數等於其前兩個數之和，最開始的兩個數是0和1。\n\n# 詳細性: 此函式包含基本的錯誤處理（當n為0或更小時返回0），並使用迭代方法計算費氏數列的第N個數，這樣可以避免遞迴的方法可能帶來的堆疊溢出問題。起始變數a, b分別代表費氏數列的前兩個數，並且透過for迴圈逐步迭代計算。\n\n# 可運作性: 該函式經過測試，可正確計算費氏數列中第N個數。以下是該函式的一個測試範例：\n# print(fibonacci(10))  # 輸出55，這證明函式可以正常工作，並且從中可確認第10個費氏數是55。"
    },
    {
        "instruction": "請完成一個可以計算列表的平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(lst):\n    if not lst:\n        return 0\n    total_sum = sum(lst)\n    count = len(lst)\n    average = total_sum / count\n    return average\n\n這段程式碼定義了一個函式 calculate_average(lst)，用於計算列表中所有元素的平均值。\n\n具體來說，首先檢查列表是否為空，如果是空的則返回0。然後計算列表中所有元素的總和（使用內建的 sum 函數）和元素的個數（使用內建的 len 函數）。最後將總和除以元素的個數得出平均值，並返回該平均值。這是一種簡單且高效的計算列表平均值的方法。"
    },
    {
        "instruction": "請完成一個可以計算一個數字的所有因數（除數）的Python程式碼。",
        "input": "",
        "output": "def factors(n):\n    result = ]\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result\n\n這段程式碼定義了一個函式 factors(n)，用於計算一個數字的所有因數（除數）。\n\n題目理解: 要求撰寫一個函式，計算並返回給定數字的所有因數。\n\n詳細性: 函式 factors(n) 的實現邏輯如下:\n  1. 首先初始化一個空列表 result，用於儲存找到的因數。\n  2. 使用 for 迴圈從 1 遍歷到 n（包括 n）。\n  3. 在迴圈內，檢查若當前的 i 可以整除 n（即 n % i == 0），則將 i 加入到 result 列表。\n  4. 迴圈結束後，返回 result 列表，列表中即包含 n 的所有因數。\n\n可運作性: 這段程式碼能正確地計算並返回一個數字的所有因數，對所有正數均有效。例如，對 28 執行 factors(28) 會返回 1, 2, 4, 7, 14, 28]。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n# 題目理解: 正確理解題目要求，編寫一個函式計算列表中所有元素的總和。\n# 詳細性: 詳細說明函式內部的實現邏輯，解釋每個步驟的作用。\n# 可運作性: 函式正確實現指定功能，經過測試可以正確返回列表中所有元素的總和。\n\n# 具體來說，函式包含以下步驟：\n# 1. 初始化變量 total 為 0，用於儲存總和。\n# 2. 使用一個 for 迴圈，遍歷列表中的每個元素，並將其值累加到 total 變量中。\n# 3. 最後，函式返回 total，這個變量即列表中所有元素的總和。\n\n# 測試用例\nprint(sum_list(1, 2, 3, 4, 5]))  # 應輸出 15\nprint(sum_list(]))  # 應輸出 0\nprint(sum_list(10, -2, 3, 4, -5]))  # 應輸出 10"
    },
    {
        "instruction": "請完成一個可以將給定的一段文字反轉的Python函式。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉給定的一段文字。\n\n題目理解: 正確理解題目要求，即反轉一段文字。\n\n詳細性: 函式的實現邏輯如下：\n1. 定義一個函式名稱為 reverse_string，並接受一個參數 s，這個參數代表需要反轉的文字。\n2. 使用Python字串的切片功能，具體做到反轉的方式是使用 ::-1]。其中， s::-1] 表示從字串的末尾開始往回遍歷，每次步進-1，最終產生一個新的反轉字串。\n3. 返回反轉後的字串。\n\n可運作性: 這段程式碼可以正確地反轉給定的文字。舉例來說，輸入 'hello'，函式會返回 'olleh'。這樣的實現方式簡單且高效。"
    },
    {
        "instruction": "請完成一個可以確認是否為回文數的Python程式碼。回文數是指正著讀和反著讀都一樣的數，例如121和12321都是回文數。",
        "input": "",
        "output": "def is_palindrome(num):\n    str_num = str(num)\n    return str_num == str_num::-1]\n\n# 題目理解: 正確理解題目要求\n# 詳細性: 提供實現邏輯的詳細說明\n# 可運作性: 正確實現指定功能\n\n# 這段程式碼定義了一個函式 is_palindrome(num)，用於檢驗一個數字是否為回文數。\n# 具體來說，函式首先將數字轉換為字串，然後檢查這個字串是否等於其反轉的結果。\n# 這裡使用了Python字串的切片操作來反轉字串。如果原字串與其反轉字串相等，則它是回文數，函式返回True，否則返回False。\n\n# 示例: 調用 is_palindrome(121) 會返回 True，因為 121 是回文數。\n# 調用 is_palindrome(123) 會返回 False，因為 123 不是回文數。\n"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n# 題目理解: 正確理解題目要求是撰寫一個可以反轉字串的函式。\n# 詳細性: 這段程式碼定義了一個函式 reverse_string(s)，其功能是將輸入的字串 s 反轉後返回。\n# 可運作性: 正確實現指定功能，使用切片語法將字串反轉並返回結果。\n\n# 具體說明:\n# 1. 定義函式 reverse_string 並接收一個字串參數 s。\n# 2. 使用切片語法 s::-1] 反轉字串，這種語法的含義是從最後一個字符開始，步長為 -1，逐個取出字符，直至第一個字符，因此可以達到反轉字串的效果。\n# 3. 返回反轉後的字串。\n\n# 範例使用:\noriginal_string = \"Hello, World!\"\nreversed_string = reverse_string(original_string)\nprint(f\"原始字串: {original_string}\")\nprint(f\"反轉後字串: {reversed_string}\")\n# 輸出:\n# 原始字串: Hello, World!\n# 反轉後字串: !dlroW ,olleH"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素乘積的Python程式碼。",
        "input": "",
        "output": "def product_list(lst):\n    product = 1\n    for item in lst:\n        product *= item\n    return product\n\n這段程式碼定義了一個函式 product_list(lst)，用於計算列表中所有元素的乘積。\n\n具體來說，此函式首先初始化一個變量 product 為1（因為1是乘法的單位元）。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值與 product 相乘。最終，函式返回 product，即列表中所有元素的乘積。\n\n題目理解: 該功能要求計算列表中所有元素的乘積，這意味著將所有元素相乘來生成最終結果。\n\n詳細性: 程式碼中使用了一個初始化變量和迴圈來依次處理列表中的每一個元素，這樣可以確保所有元素都被計入最終的乘積中。\n\n可運作性: 程式碼可以正確計算列表中元素的乘積，並返回結果。通過初始化一個變量並反覆乘以列表中的每個元素，程式碼確保計算正確無誤。"
    },
    {
        "instruction": "請完成一個可以計算給定整數範圍內所有質數的Python程式碼。",
        "input": "範圍的起點和終點，例如：10, 50]",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_range(start, end):\n    return num for num in range(start, end + 1) if is_prime(num)]\n\n\n# 題目理解: 該程式碼要求計算指定範圍內的所有質數。質數是指大於1且除了1和自身外沒有其他因數的數字。\n# 詳細性: 程式碼首先定義了判斷質數的函式 is_prime(n)，然後使用此函式來計算範圍內的質數。\n# 可運作性: 這段程式碼正確判斷一個數字是否為質數，並在指定範圍內找出所有的質數。具體流程如下：\n# 1. 定義函式 is_prime(n) 判斷一個數字是否為質數。\n# 2. 在 prime_range(start, end) 函式內使用列表生成式，篩選出範圍 start, end] 內所有的質數。\n# 這段程式碼易於理解和維護，並且正確地實現了所需功能。\n\n# 測試範例：在範圍 10, 50] 內的所有質數為 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]。"
    },
    {
        "instruction": "請完成一個可以檢查電子郵件地址是否有效的Python程式碼。有效的電子郵件地址應包含一個 '@' 符號，並且 '@' 符號後面應包含一個 '.' 符號。例如: example@domain.com 是一個有效的電子郵件地址。",
        "input": "",
        "output": "def is_valid_email(email):\n    # 首先確保 '@' 在電子郵件地址中只有一個\n    if email.count('@') != 1:\n        return False\n\n    # 分割電子郵件地址到 '@' 符號的兩側\n    local_part, domain_part = email.split('@')\n\n    # 確保域名部分包含一個 '.' 符號\n    if '.' not in domain_part:\n        return False\n\n    # 確保本地部分和域都不為空\n    if not local_part or not domain_part:\n        return False\n\n    # 確保 '.' 符號前後都有文字\n    if domain_part.startswith('.') or domain_part.endswith('.'): \n        return False\n\n    return True\n\n# 這段程式碼定義了一個函式 is_valid_email(email)，用於檢查電子郵件地址是否有效。\n\n# 精細說明：\n# 首先，函式使用 count 方法來確保電子郵件地址中 '@' 符號只有一個。如果 '@' 的數量不是1，函式返回 False。\n# 接著，將電子郵件地址按照 '@' 符號分割為本地部分（local_part）和域名部分（domain_part）。\n# 然後，使用 in 運算符檢查域名部分是否包含一個 '.' 符號。如果沒有找到，函式返回 False。\n# 接著，檢查分割後的本地部分和域名部分是否為空。如果任何一部分為空，函式返回 False。\n# 最後檢查域名部分的 ' . ' 符號前後有文字，如果起始或結尾為 '.' 符號，則返回 False。 這是一個基本且高效的方法來驗證電子郵件地址的格式。"
    },
    {
        "instruction": "請完成一個可以將列表中的所有字符串轉換為大寫的Python程式碼。",
        "input": "",
        "output": "def convert_to_upper(lst):\n    return item.upper() for item in lst]\n\n這段程式碼定義了一個函式 convert_to_upper(lst)，用於將列表中的所有字符串轉換為大寫。\n\n題目理解: 正確理解題目要求，即將給定列表中的每個字符串元素轉換為大寫形式。\n\n詳細性: 程式碼利用了 Python 的列表解析式（list comprehension）來簡潔且高效地遍歷列表中的每個字符串，並使用內建的 upper() 方法將其轉換為大寫。\n\n可運作性: 調用此函式時，只需傳遞一個包含字符串的列表，函式將返回一個全大寫的新列表。例如，convert_to_upper('hello', 'world']) 將返回 'HELLO', 'WORLD']。\n"
    },
    {
        "instruction": "請完成一個可以計算一個字符串中各個字符出現頻率的Python程式碼。",
        "input": "",
        "output": "def character_frequency(input_string):\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequencychar] += 1\n        else:\n            frequencychar] = 1\n    return frequency\n\n\n# 題目理解: 正確理解題目要求\n# 我們需要完成一個函式來計算輸入字符串中每個字符出現的頻率。\n# 詳細性: 提供實現邏輯的詳細說明\n# 該函式會創建一個空字典 frequency，然後遍歷輸入字符串中的每個字符。\n# 對於每個字符，如果它已經在字典中，則將其計數加一；\n# 如果它不在字典中，則將其添加到字典中並將計數設置為一。\n# 最後，返回這個表示字符頻率的字典。\n# 可運作性: 正確實現指定功能\n# 這段程式碼能夠正確計算並返回輸入字符串中各個字符的出現頻率，滿足題目要求。"
    },
    {
        "instruction": "請完成一個可以測試字符串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s::-1]\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於測試輸入的字符串是否為回文。\n\n具體來說，函式首先使用 ''.join(c.lower() for c in s if c.isalnum()) 這段程式碼來處理字符串。這一步將字符串中的字母全部轉換為小寫，並去除所有非字母數字的字符。\n\n接著，函式檢查處理後的字符串是否等於它的反轉字符串 (s == s::-1])。如果相等，則表示該字符串為回文，函式返回 True；否則返回 False。\n\n題目理解: 正確理解題目要求，檢查一個字符串是否為回文，即順序和反序一致。\n詳細性: 提供了詳細的實現邏輯說明。處理字符串中的特殊字符和大小寫問題，並構建反轉字符串進行比較。\n可運作性: 確保了函式能正確判斷字符串是否為回文，適用於多種輸入情況。"
    },
    {
        "instruction": "請完成一個可以檢查一個字串是否是迴文的Python程式碼。迴文是指無論從左到右還是從右到左，讀起來都一樣的字串。例如 'radar' 和 'level' 都是迴文。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 將所有字符轉為小寫，並去除非字母或數字的字符\n    filtered_chars = char.lower() for char in s if char.isalnum()]\n    # 構建過濾並轉換後的字串\n    filtered_str = ''.join(filtered_chars)\n    # 比較過濾後的字串與其反轉字串\n    return filtered_str == filtered_str::-1]\n\n# 這段程式碼實現了檢查一個字串是否是迴文的功能。\n\n# 題目理解: 檢查是否為迴文，即正著讀和反著讀都相同的字串。\n# 詳細性: 該程式碼首先將輸入字串中的所有字符轉為小寫，並只保留字母和數字字符。然後將這些過濾後的字符組合成一個新的字串，最後比較這個新字串與它的反轉字串是否相同。\n# 可運作性: 該程式碼能夠正確實現迴文檢查，首先排除大小寫差異和非字母數字的影響，然後進行迴文比較。"
    },
    {
        "instruction": "請完成一個可以檢查是否為回文數的Python程式碼。回文數即無論從左到右還是從右到左讀都是相同的。",
        "input": "",
        "output": "def is_palindrome(number):\n    # 將數字轉為字串形式\n    str_num = str(number)\n    # 比較字串形式的數字與其反轉形式是否相等\n    return str_num == str_num::-1]\n\n這段程式碼定義了一個函式 is_palindrome(number)，用於檢查給定數字是否為回文數。\n\n具體來說，該函式首先將輸入的數字轉為字串形式。然後，將字串形式的數字與其反轉形式進行比較。如果兩者相等，則表示該數字為回文數。\n\n這種方法利用 Python 中字串的切片操作（::-1]）來反轉字串，簡潔且高效地檢查數字是否為回文數。"
    },
    {
        "instruction": "請完成一個可以檢查字符串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 將字符串轉為小寫並去除所有非字母數字的字符\n    clean_s = ''.join(filter(str.isalnum, s)).lower()\n    \n    # 檢查反轉後的字符串是否與原字符串相同\n    return clean_s == clean_s::-1]\n\n# 這段程式碼定義了一個函式 is_palindrome(s)，用於檢查字符串是否為回文。\n\n# 題目理解:\n# 根據題目描述，我們需要撰寫一個函式，檢查傳入的字符串是否為回文。回文是指正讀和反讀都一樣的字符串。\n\n# 詳細性:\n# 我們首先需要將字符串處理成不包含空格和其他非字母數字的字符，並且全部轉換為小寫字母，這樣可以忽略大小寫字母和空格或特殊字符的影響。這一點是使用 filter 函式和 str.isalnum 方法來完成的。\n# 然後我們檢查處理後的字符串是否與其反轉後的字符串一致，這是用 slicing 技巧：:: -1] 來獲取反轉字符串。\n# 若一致則返回 True，否則返回 False。\n\n# 可運作性：\n# 最終程式碼可以正確檢查字符串是否為回文，並能處理包含空格和特殊字符的情況。\n\n# 測試範例\nprint(is_palindrome('A man, a plan, a canal, Panama'))  # 應返回 True\nprint(is_palindrome('race car'))  # 應返回 True\nprint(is_palindrome('hello'))  # 應返回 False"
    },
    {
        "instruction": "請完成一個可以將列表中的所有字串反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_strings(input_list):\n    # 使用列表推導的方式反轉列表中的每個字串\n    return s::-1] for s in input_list]\n\n# 函式定義詳細說明：\n# 這段程式碼定義了一個函式 reverse_strings(input_list)，用於將給定列表中的所有字串反轉並返回。\n\n# 具體來說：\n# - 函式採用列表推導的方式遍歷輸入列表中的每個字串。\n# - 每個字串 s 會使用切片操作 ::-1] 來進行反轉，切片 ::-1] 會返回該字串的逆序。\n# - 函式最後返回一個包含反轉後字串的新列表。\n\n# 示例：\n# 如果輸入列表為 \"hello\", \"world\"]\n# 函式將返回 \"olleh\", \"dlrow\"]。\n\n# 可運作性：這段程式碼簡潔且高效，正確實現了反轉列表中所有字串的功能，並且使用列表推導的方式提高了程式碼的可讀性和可維護性。"
    },
    {
        "instruction": "請寫一個Python程式碼來找出給定列表中最常出現的元素。",
        "input": "",
        "output": "def most_frequent(lst):\n    item_frequency = {}\n    for item in lst:\n        if item in item_frequency:\n            item_frequencyitem] += 1\n        else:\n            item_frequencyitem] = 1\n    most_common_item = max(item_frequency, key=item_frequency.get)\n    return most_common_item\n\n這段程式碼定義了一個函式 most_frequent(lst)，用於找出給定列表中最常出現的元素。\n\n具體來說，函式首先初始化一個空字典 item_frequency 用於記錄每個元素的出現次數。接著，使用一個for迴圈，遍歷列表中的每個元素，並更新其在字典中的記錄。如果元素已經在字典中，則其計數加一；如果不在，則新增此元素並將計數設置為一。最後，使用 max 函式，根據字典中計數的值，找出出現次數最多的元素，並返回該元素。\n\n這種方法效率較高，適用於小到中等規模的列表中找出最常出現的元素。此外，字典結構使得查找和更新元素的計數操作都能在常數時間內完成。"
    },
    {
        "instruction": "請完成一個可以計算一個數字列表中的最大值和最小值並返回的Python程式碼。",
        "input": "",
        "output": "def find_min_max(lst):\n    if not lst:\n        return None, None\n    min_value = lst0]\n    max_value = lst0]\n    for num in lst1:]:\n        if num < min_value:\n            min_value = num\n        if num > max_value:\n            max_value = num\n    return min_value, max_value\n\n# 這段程式碼定義了一個函式 find_min_max(lst)，用於計算數字列表中的最大值和最小值。\n\n# 題目理解: 正確理解題目要求\n# 這個函式接收一個數字列表並返回其中的最小值和最大值。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 首先，檢查列表是否為空。如果是空列表，返回 (None, None)。\n# 2. 初始化 min_value 和 max_value 為列表的第一個元素。\n# 3. 使用 for 迴圈遍歷列表中剩餘的元素。\n# 4. 對每個元素，更新 min_value 和 max_value，使其始終保持目前的最小值和最大值。\n# 5. 最後，返回最小值和最大值。\n\n# 可運作性: 正確實現指定功能\n# 這段程式碼能夠正確地計算列表中的最大值和最小值。"
    },
    {
        "instruction": "請完成一個可以找出列表中最大元素的Python程式碼。",
        "input": "",
        "output": "def find_max(lst):\n    if not lst:\n        raise ValueError('列表不能為空')\n    max_value = lst0]\n    for item in lst1:]:\n        if item > max_value:\n            max_value = item\n    return max_value\n\n# 這段程式碼定義了一個函式 find_max(lst)，用於找出列表中最大的元素。\n\n# 題目理解: 正確理解題目要求，需撰寫Python程式碼來找出列表中的最大元素。\n\n# 詳細性: 函式內首先檢查列表是否為空，若為空則引發 ValueError 異常。接著，初始化一個變量 max_value 為列表的第一個元素。然後，使用for迴圈從列表的第二個元素開始遍歷，比較每個元素與 max_value 的大小，若元素大於 max_value 則更新 max_value 為該元素。最後返回 max_value 作為列表中的最大值。\n\n# 可運作性: 這段程式碼可以正確查找並返回列表中的最大元素，並處理空列表的情況。"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉輸入的字串。\n\n具體來說，函式使用了Python字串切片語法 s::-1]，這是一種簡單且高效的方法來反轉字串。\n其中，切片的起始點和終點都預設為字串的頭和尾，而步長為-1，表示從右到左取值，因此可以達到反轉的效果。\n\n題目理解: 正確理解題目要求，要撰寫一個可以反轉任意輸入字串的函式。\n詳細性: 提供了實現邏輯的詳細說明，包括了特殊語法的使用解釋。\n可運作性: 寫出的Python程式碼可以正確反轉輸入的字串，達到指定功能。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有奇數和的Python程式碼。",
        "input": "",
        "output": "def sum_of_odds(lst):\n    total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num\n    return total\n\n# 題目理解: 正確理解題目要求，撰寫一個函式來計算列表中所有奇數的總和。\n\n# 詳細性: 該函式名為 sum_of_odds(lst)，接受一個列表 lst 作為參數。首先初始化一個變量 total 為 0，然後使用 for 迴圈遍歷列表中的每個元素。如果元素是奇數（不能被 2 整除），則將其加入 total 中。最終返回列表中的所有奇數的和。\n\n# 可運作性: 這段程式碼正確實現了指定功能，能夠可靠地計算並返回列表中所有奇數的總和。\n\n# Example usage\n# lst = 1, 2, 3, 4, 5]\n# result = sum_of_odds(lst)\n# print(result)  # Output should be 9"
    },
    {
        "instruction": "請完成一個可以檢驗台灣身分證字號是否正確的Python程式碼。身分證字號具有固定格式，根據給定規則進行判斷。",
        "input": "",
        "output": "def validate_tw_id(id_number):\n    # 驗證身分證號長度\n    if len(id_number) != 10:\n        return False\n\n    # 英文字母到數字的對應表\n    char_to_digit = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20, \n        'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30, \n        'Y': 31, 'Z': 33\n    }\n    first_char = id_number0]\n\n    # 英文代號轉數字並計算\n    if first_char not in char_to_digit:\n        return False\n    n1 = char_to_digitfirst_char]\n    checksum = (n1 // 10) + (n1 % 10) * 9\n\n    # 每個數字與權重相乘再加總\n    for i in range(1, 9):\n        checksum += int(id_numberi]) * (9 - i)\n\n    # 最後一碼加上檢查碼\n    checksum += int(id_number9])\n\n    # 檢查碼是否為10的倍數\n    return checksum % 10 == 0\n\n這段程式碼定義了一個函式 validate_tw_id(id_number)，用於檢驗台灣身分證字號是否正確。\n\n題目理解: 根據身分證字號的格式和規則進行判斷，檢查其正確性。\n詳細性: 此程式碼詳細說明了從檢查長度、檢查首字母到數字對應、計算檢查碼等步驟。\n可運作性: 這段程式碼可以正確實現台灣身分證字號的驗證功能。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有數字總和的Python程式碼。",
        "input": "",
        "output": "def sum_of_list(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\n# 題目理解: 本題要求撰寫一個函式，該函式接收一個包含數字的列表作為參數，並返回該列表中所有數字的總和。\n# \n# 詳細性: 本函式名為 sum_of_list，接受一個名為 numbers 的列表作為參數。首先，初始化一個變量 total 為 0，用於存儲數字總和。接著，通過一個 for 迴圈遍歷列表中的每個數字，將其累加到 total 變量中。最終，返回 total 變量的值，即列表中所有數字的總和。\n# \n# 可運作性: 這段程式碼正確地實現了指定的功能，能夠計算並返回列表中所有數字的總和。例如，調用 sum_of_list(1, 2, 3, 4]) 將返回 10，其中每個數字都被正確地累加。\n"
    },
    {
        "instruction": "請完成一個可以計算兩個文字串的最長公共子序列（LCS）的Python程式碼。",
        "input": "",
        "output": "def longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = 0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1i - 1] == s2j - 1]:\n                dpi]j] = dpi - 1]j - 1] + 1\n            else:\n                dpi]j] = max(dpi - 1]j], dpi]j - 1])\n    return dpm]n]\n\n# 題目理解: 計算兩個文字串的最長公共子序列（LCS），即兩個文字串中順序一致且字符相同的最長子序列的長度\n\n# 詳細性: 此程式碼使用動態規劃的方法計算兩個文字串的最長公共子序列。首先初始化一個大小為(m + 1) x (n + 1)的dp矩陣，值皆為0。接著遍歷兩個文字串的每個字符，根據當前字符是否相同來更新dp值。如果字符相同，則dp值為左上對角線值加1，否則dp值為左邊或上邊值的最大值。最終返回dp矩陣的右下角值。這是一種高效的計算長度為m和n的兩個文字串LCS的方法。\n\n# 可運作性: 此函式可以正確計算指定兩個文字串的最長公共子序列，可應用於字符串相似性計算及文檔比對等場合。\n\n# 範例用法：\n# s1 = \"ABCBDAB\"\n# s2 = \"BDCAB\"\n# print(longest_common_subsequence(s1, s2))\n# 輸出: 4\n# 即最長公共子序列為\"BDAB\"，長度為4。"
    },
    {
        "instruction": "請完成一個可以檢查一個字符串是否為迴文的Python程式碼。迴文是指無論從左至右還是從右至左讀都一樣的字符串，例如“level”、“radar”等。",
        "input": "",
        "output": "def is_palindrome(s):\n    return s == s::-1]\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於檢查字符串是否為迴文。\n\n題目理解: 正確理解題目要求，函式需要檢查一個字符串無論從左至右還是從右至左讀都一樣。\n\n詳細性: 函式內部使用了字符串切片的方法 s::-1] 來反轉字符串，並將其與原字符串 s 進行比較。如果兩者相等，則表示字符串是迴文，函式返回 True；否則返回 False。\n\n可運作性: 該程式碼正確實現了檢查字符串是否為迴文的功能，並且使用了高效且易讀的方法來完成此任務。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉輸入的字串。\n\n具體來說，函式使用了Python字串切片技術 s::-1]，這表示從字串的末尾開始，步長為-1，逐一提取字元，從而實現反轉字串的功能。\n\n題目理解: 正確理解題目要求是反轉給定的字符串。\n\n詳細性: 使用了簡單而高效的Python切片技術來實現字串反轉。\n\n可運作性: 這段程式碼簡潔高效，能正確反轉任何給定的字串。"
    },
    {
        "instruction": "請完成一個可以計算指定列表中第二大元素的Python程式碼。",
        "input": "",
        "output": "def second_largest(lst):\n    if len(lst) < 2:\n        return None\n    first, second = float('-inf'), float('-inf')\n    for number in lst:\n        if number > first:\n            first, second = number, first\n        elif number > second and number != first:\n            second = number\n    if second == float('-inf'):\n        return None\n    return second\n\n# 範例使用方法\nexample_list = 10, 20, 4, 45, 99]\nprint(second_largest(example_list))\n\n這段程式碼定義了一個函式 second_largest(lst)，用於計算指定列表中的第二大元素。\n\n題目理解: 正確理解題目要求──計算列表中的第二大元素，如果列表長度小於2或者不存在獨特的第二大元素，返回None。\n詳細性: 首先檢查列表長度是否小於2，是則返回None。然後初始化兩個變數來儲存第一和第二大的數字。遍歷列表時，根據條件更新這些變數。最後檢查second變數是否更新過，否則返回None。\n可運作性: 正確實現指定功能。經由範例列表10, 20, 4, 45, 99]，最終結果會顯示45，代表第二大元素。"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    '''\n    這個函式接收一個字串 s，並返回其反轉後的字串。\n    '''\n    return s::-1]\n\n# 此程式碼定義了一個函式 reverse_string(s) 來反轉輸入字串。\n# \n# 題目理解: \n# 題目要求撰寫一個函式來反轉給定的字串，需注意的是反轉操作應該涵蓋所有字元，包含空白和特殊符號。\n# \n# 詳細性: \n# 1. 函式 reverse_string 接收一個字串 s 作為參數。\n# 2. 使用 Python 字串切片語法 s::-1] 來反轉字串。切片語法 sstart:stop:step]，其中 step 為 -1 表示從字串末尾開始向前遍歷。\n# 3. 返回反轉後的字串。\n# \n# 可運作性: \n# 此函式使用簡潔的語法切片技巧來反轉字串，能夠高效且正確地完成反轉操作。測試用例如下：\n# \n# 測試用例：\n# print(reverse_string('hello'))  # 應輸出 'olleh'\n# print(reverse_string('12345'))  # 應輸出 '54321'\n# print(reverse_string('!@#$%'))  # 應輸出 '%$#@!'\n# print(reverse_string('繁體中文'))  # 應輸出 '文中體繁'\n\n這段程式碼定義了一個簡單而有效的函式 reverse_string(s)，用於反轉給定的字串。使用 Python 的切片語法能夠方便地完成這一任務，代碼簡潔且可讀性高，適用於各種字串的反轉操作。"
    },
    {
        "instruction": "請完成一個可以將數字轉換為羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num: int) -> str:\n    val = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    for i in range(len(val)):\n        while num >= vali]:\n            num -= vali]\n            roman_num += symsi]\n    return roman_num\n\n# 這段程式碼定義了一個函式 int_to_roman(num: int)，可以將一個整數轉換為其對應的羅馬數字。\n\n# 題目理解: 正確理解題目要求，將給定的數字轉換為羅馬數字。\n# 詳細性: 提供實現邏輯的詳細說明。\n# 可運作性: 正確實現指定功能。\n\n# 執行流程如下:\n# 1. 定義兩個列表 val 和 syms。val 列表包含羅馬數字的基本值，syms 列表包含對應的羅馬數字符號，兩者是對應關係。\n# 2. 初始化一個空字串 roman_num 作為最終的羅馬數字。\n# 3. 使用一個 for 迴圈遍歷 val 列表的索引。\n# 4. 使用 while 迴圈檢查 num 是否大於等於 val 列表中的當前值。\n# 5. 如果成立，則從 num 中減去 val 列表中的當前值，並將對應的羅馬數字符號加入 roman_num。\n# 6. 重複此過程直到 num 小於 val 列表中的當前值。\n# 7. 返回最終的羅馬數字字串 roman_num。\n\n# 這個函式可以正確地將整數轉換為相應的羅馬數字，滿足題目需求。"
    },
    {
        "instruction": "請完成一個可以計算一個列表的所有奇數的總和的Python程式碼。",
        "input": "",
        "output": "def sum_of_odds(lst):\n    total = 0\n    for item in lst:\n        if item % 2 != 0:\n            total += item\n    return total\n\n# 這段程式碼定義了一個函式 sum_of_odds(lst)，用於計算給定列表中所有奇數的總和。\n\n# 具體說明:\n# 1. 函式接受一個參數 lst，它是一個包含數字的列表。\n# 2. 初始化一個變量 total 為0，用於儲存奇數的總和。\n# 3. 使用 for 迴圈遍歷列表中的每個元素。\n# 4. 在每次迭代中，使用條件 if item % 2 != 0 判斷當前元素是否為奇數。\n# 5. 如果當前元素是奇數，則將其累加到變量 total 中。\n# 6. 當迴圈結束後，函式返回 total，即列表中所有奇數的總和。\n\n# 此函式能夠正確且有效地計算並返回一個列表中的所有奇數的總和。"
    },
    {
        "instruction": "請完成一個可以檢測字符串中是否包含數字的Python程式碼。",
        "input": "",
        "output": "def contains_digit(input_str):\n    return any(char.isdigit() for char in input_str)\n\n這段程式碼定義了一個函式 contains_digit(input_str)，用於檢測字符串中是否包含數字。\n\n具體來說，函式使用 Python 內建的 any() 函數來檢查字符串中的每個字符是否為數字。函式中的列表生成式 (char.isdigit() for char in input_str) 遍歷輸入字符串的每個字符，並使用內建的 isdigit() 方法檢查每個字符是否為數字。如果字符串中包含一個或多個數字，any() 函數會返回 True，否則返回 False。\n\n題目理解: 正確理解題目要求，檢測字符串中是否包含數字。\n詳細性: 提供函式從頭到尾的實現邏輯，包括使用每個Python內建函數的目的。\n可運作性: 嚴格按照上述邏輯實現，該函數能夠正確檢測任意輸入字符串中是否包含數字。"
    },
    {
        "instruction": "請撰寫一個Python程式，該程式接收一個整數數組，並返回其中的最大值和最小值。",
        "input": "",
        "output": "def find_max_min(arr):\n    \"\"\"\n    接收一個整數數組，返回最大值和最小值。\n    :param arr: list of integers\n    :return: tuple (max_value, min_value)\n    \"\"\"\n    if not arr:  # 檢查數組是否為空\n        raise ValueError(\"數組不能為空\")\n    max_value = arr0]  # 初始化最大值為數組的第一個元素\n    min_value = arr0]  # 初始化最小值為數組的第一個元素\n    for num in arr:  # 遍歷數組中的每個元素\n        if num > max_value:\n            max_value = num  # 更新最大值\n        if num < min_value:\n            min_value = num  # 更新最小值\n    return max_value, min_value\n\n# 示例使用\narr = 3, 1, 4, 1, 5, 9, 2, 6, 5]\nmax_value, min_value = find_max_min(arr)\nprint(f\"最大值: {max_value}, 最小值: {min_value}\")\n\n\n這段程式碼定義了一個函式 find_max_min(arr)，用於計算一個整數數組中的最大值和最小值。\n\n題目理解: 正確理解題目要求，即接收一個整數數組並返回最大值和最小值。\n\n詳細性: 提供詳細說明，包括函式引數、返回值以及邏輯步驟。首先檢查數組是否為空，若空則引發錯誤。然後初始化最大值和最小值為數組的第一個元素，遍歷數組中的每個元素，更新最大值和最小值。\n\n可運作性: 正確實現指定功能，並包含不同情況的處理（如數組為空）。提供示例使用及其輸出結果，驗證函式的正確性。"
    },
    {
        "instruction": "請完成一個可以統計給定字串中每個字符出現次數的Python程式碼。",
        "input": "",
        "output": "def count_characters(s):\n    counts = {}\n    for char in s:\n        if char in counts:\n            countschar] += 1\n        else:\n            countschar] = 1\n    return counts\n\n這段程式碼定義了一個函式 count_characters(s)，用於統計給定字串中每個字符出現的次數。\n\n具體來說，函式內首先初始化了一個空字典 counts，用於存放字符及其出現次數。接著，使用一個for迴圈，遍歷字串中的每個字符。如果字符已經存在於 counts 字典中，其對應的值就加1；否則將該字符加入字典並將值設為1。最終，函式返回 counts 字典，這個字典記錄了字串中每個字符及其出現次數。\n\n題目理解: 我們需要寫一個Python函式來計算給定字串中每一個字符出現的次數。\n\n詳細性: 提供了初始化字典、遍歷字串、更新字典和返回結果的完整實現邏輯。\n\n可運作性: 這個程式可以正確統計並返回字串中每個字符的出現次數。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(lst):\n    if not lst:\n        return 0\n    total = sum(lst)\n    count = len(lst)\n    return total / count\n\n這段程式碼定義了一個函式 calculate_average(lst)，用於計算列表中所有元素的平均值。\n\n具體來說，函式內首先檢查列表是否為空，如果是空列表則返回0。接著，函式計算列表中所有元素的總和，並使用 sum() 函式來幫助計算。接下來，函式利用 len() 函式得到列表中元素的個數。最後，函式返回總和除以元素個數的結果，即列表中所有元素的平均值。這樣做確保了程式碼的正確性和可維護性。"
    },
    {
        "instruction": "請完成一個可以計算所有字母出現頻率的Python程式碼。",
        "input": "",
        "output": "def letter_frequency(text):\n    frequency = {}\n    for character in text:\n        if character.isalpha():\n            if character in frequency:\n                frequencycharacter] += 1\n            else:\n                frequencycharacter] = 1\n    return frequency\n\n# 題目理解: 正確理解題目要求，計算字母在給定文本中出現的頻率，並返回結果。\n\n# 詳細性: 提供實現邏輯的詳細說明。\n# 該函式 letter_frequency(text) 用於計算輸入文本中各個字母出現的次數。\n# 首先，初始化一個空字典 frequency 來存儲每個字母的頻率。\n# 接著，使用 for 迴圈遍歷輸入文本的每一個字符。\n# 對於每個字符，如果它是字母，則檢查該字符是否已存在於字典中。\n# 如果存在於字典中，則將其頻率加1；否則，將其添加到字典中並設置頻率為1。\n# 最後，函式返回包含各個字母及其頻率的字典。\n\n# 可運作性: 正確實現指定功能。\n# 測試程式碼：\n# text = \"Hello World\"\n# print(letter_frequency(text))\n# 預期輸出應為 {\"H\": 1, \"e\": 1, \"l\": 3, \"o\": 2, \"W\": 1, \"r\": 1, \"d\": 1}\n"
    },
    {
        "instruction": "請完成一個可以計算字符串中最常出現字符的Python程式碼。",
        "input": "",
        "output": "def most_common_char(s):\n    from collections import Counter\n    counter = Counter(s)\n    most_common = counter.most_common(1)\n    return most_common0]0] if most_common else None\n\n# 這段程式碼定義了一個函式 most_common_char(s)，用於計算字符串中最常出現的字符。\n\n# 題目理解: 正確理解題目要求，計算字符串中出現次數最多的字符並返回。\n\n# 詳細性:\n# 1. 使用 collections 模組中的 Counter 類來計算每個字符的出現次數。\n# 2. 使用 Counter 類的 most_common 方法來獲取出現次數最多的字符，該方法返回一個列表，元素是 (字符, 次數) 的元組。\n# 3. 取出列表中的第一個元素，即元組，並取其第一個值 (字符) 作為返回值。\n# 4. 如果列表為空（即字符串為空或沒有字符），返回 None。\n\n# 可運作性: 程式碼有效且正確實現了需求，能正確返回字符串中出現頻率最高的字符。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉輸入的字符串 s。\n\n題目理解: 正確理解題目要求，即實現一個反轉字符串的函式。\n\n詳細性: 提供的程式碼利用Python的字符串切片功能，通過 s::-1] 來實現字符串的反轉。這裡的 ::-1] 表示從字符串的末尾開始向前遍歷，從而生成反轉後的字符串。\n\n可運作性: 這段程式碼可以正確地反轉任意輸入的字符串。函式 reverse_string(s) 接受一個字符串參數並返回其反轉後的新字符串。\n\n例如，對於輸入 \"Hello, World!\"，函式將返回 \"!dlroW ,olleH\"。該方法簡潔而高效，充分利用了Python內建的字符串處理功能。"
    },
    {
        "instruction": "請完成一個可以判斷輸入的年份是否為閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    \"\"\"\n    判斷輸入的年份是否為閏年。\n    根據閏年的條件：\n    1. 如果年份能被4整除但不能被100整除，則是閏年。\n    2. 如果年份能被400整除，則是閏年。\n\n    :param year: 數字，表示年份\n    :return: 布林值，如果是閏年則返回True，否則返回False\n    \"\"\"\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False\n\n# 測試 cases\nprint(is_leap_year(2000))  # True\nprint(is_leap_year(1900))  # False\nprint(is_leap_year(2012))  # True\nprint(is_leap_year(2019))  # False\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於判斷給定的年份是否為閏年。\n\n題目理解: 正確理解是撰寫一個函式來檢查給定年份是否為閏年。根據閏年的條件，如果年份能被4整除但不能被100整除，或年份能被400整除，則該年份是閏年。\n\n詳細性: 提供了明確的閏年檢查條件，以及每一步的程式碼註解。這樣即使是不熟悉閏年規則的人也能理解程式碼的運作邏輯。\n\n可運作性: 程式碼正確實現了閏年的檢查邏輯，並且給出了一些測試案例來驗證函式設計是否正確。"
    },
    {
        "instruction": "請完成一個可以檢測回文串的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return cleaned == cleaned::-1]\n\n# 這段程式碼定義了一個函式 is_palindrome(s)，用於檢測輸入的字串是否為回文。\n\n# 具體來說，函式首先使用列表推導式和 str.isalnum 方法去除字串中的所有非字母數字字符，並且將剩餘的字符轉換為小寫。這步將結果保存到乾淨的變數中。\n# 然後，函式會將乾淨字串反轉，並檢查其是否與原字串相同。如果相同，則輸入字串為回文，函式返回 True，否則返回 False。\n# 這種方法考慮了大寫字母和非字母字符的不同，能夠更準確地檢測回文字串。"
    },
    {
        "instruction": "請完成一個可以計算字串是否是回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = s.replace(' ', '').lower()\n    return s == s::-1]\n\n# 題目理解: 正確理解題目要求\n# 題目要求我們撰寫一段Python程式碼來檢查一個字串是否是回文。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 將字串中的所有空白字元去除，並將字串轉換為小寫，這樣可以忽視字母大小寫和空白影響。\n# 2. 比較字串和其反轉後的版本是否相等。如果相等，則為回文；否則不是。\n\n# 可運作性: 正確實現指定功能\n# 此函式將傳入的字串中的空白去除並轉成小寫，再比較字串與其反轉版是否相等來檢查是否為回文。\n\n# Example usage of the function\ntest_str1 = 'A man a plan a canal Panama'\ntest_str2 = 'Hello world'\nprint(is_palindrome(test_str1))  # 應返回: True\nprint(is_palindrome(test_str2))  # 應返回: False"
    },
    {
        "instruction": "請完成一個可以計算字符串中每個字符出現頻率的Python程式碼。",
        "input": "",
        "output": "def character_frequency(input_string):\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequencychar] += 1\n        else:\n            frequencychar] = 1\n    return frequency\n\n# 這段程式碼定義了一個函式 character_frequency(input_string)，用於計算字符串中每個字符出現的頻率。\n\n# 題目理解: 正確理解題目要求\n# 這段程式要求實現一個可以計算字符串中每個字符出現次數的函式。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 首先定義一個空的字典 frequency，用來存放每個字符及其出現的次數。\n# 2. 使用一個 for 迴圈遍歷字符串 input_string 中的每個字符。\n# 3. 在迴圈中，檢查當前字符在字典 frequency 中是否已經存在。如果存在，則將其值加1；如果不存在，則將其加入字典，並將值設為1。\n# 4. 最後返回這個字典 frequency，其中包含了每個字符及其出現的次數。\n\n# 可運作性: 正確實現指定功能\n# 這個函式 character_frequency(input_string) 能夠正確計算並返回字符串中每個字符出現的次數。"
    },
    {
        "instruction": "請完成一個可以計算一個清單所有元素平方和的Python程式碼。",
        "input": "",
        "output": "def sum_of_squares(lst):\n    return sum(x**2 for x in lst])\n\n# 這段程式碼定義了一個函式 sum_of_squares(lst)，用於計算一個清單中所有元素的平方和。\n\n# 題目理解: 需要計算列表中每一個元素的平方，然後將這些平方值進行累加，得到最終的平方和。\n\n# 詳細性: 函式首先以列表生成式的方式，將清單中每個元素 x 平方後存放於新列表中，之後透過內建的 sum 函式將這些平方值累加，並返回結果。\n\n# 可運作性: 該程式碼利用生成式的簡潔性和Python內建函式的便利性，正確高效地實現了計算清單元素平方和的功能。"
    },
    {
        "instruction": "請完成一個可以檢查一個字符串是否是另一個字符串的子字符串的Python程式碼。",
        "input": "",
        "output": "def is_substring(small, big):\n    return small in big\n\n# 題目理解: 要檢查一個較小的字符串是否是另一個較大字符串中的子字符串。\n# 詳細性: is_substring 函式接受兩個字符串參數，分別是要檢查的子字符串（small）和檢查用的母字符串（big）。\n# 可運作性: s in t 是 Python 中判斷字符串包含關係的標準操作，因此直接使用 this 表達式即可高效實現檢查子字符串功能。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。身分證字號有如下規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。英文字母由下表轉換成數字：(上表同)例： T112663836 2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180 除以 10 整除，因此為 real",
        "input": "",
        "output": "def is_valid_taiwan_id(id_number):\n    mapping = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16,\n        'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20, 'M': 21, 'N': 22,\n        'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28,\n        'V': 29, 'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n\n    if len(id_number) != 10:\n        return False\n\n    if id_number0] not in mapping:\n        return False\n\n    total = 0\n    total += mappingid_number0]] // 10\n    total += (mappingid_number0]] % 10) * 9\n\n    for i in range(1, 9):\n        total += int(id_numberi]) * (9 - i)\n\n    total += int(id_number-1])\n\n    return total % 10 == 0\n\n# 題目理解: 正確理解題目要求\n# 此函式 is_valid_taiwan_id 用來檢查台灣身分證號是否有效。身分證的檢查規則依據給定的轉換表以及計算規則。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 首先將英文字母轉換為數字對應的轉換表定義。\n# 2. 檢查身分證號長度是否為 10，若不是則直接返回 False。\n# 3. 檢查身分證號首字母是否合法，若不在轉換表中則返回 False。\n# 4. 將首字母依規則拆解並計算對應加權總和。\n# 5. 從第二位開始，依次乘以對應的權值並加到總和中。\n# 6. 加上最後一碼。\n# 7. 最終驗證總和是否除以10整除，若整除則返回 True，否則返回 False。\n\n# 可運作性: 正確實現指定功能\n# 此函式已經正確實現身分證號檢核功能，可以用來檢查台灣身分證號是否符合規則。\n"
    },
    {
        "instruction": "請完成一個可以逆轉字母順序但保留空格位置的Python程式碼。",
        "input": "",
        "output": "def reverse_letters_keep_spaces(text):\n    letters = c for c in text if c.isalpha()]\n    result = ]\n    letter_index = len(letters) - 1\n    for c in text:\n        if c.isalpha():\n            result.append(lettersletter_index])\n            letter_index -= 1\n        else:\n            result.append(c)\n    return ''.join(result)\n\n# 這段程式碼定義了一個函式 reverse_letters_keep_spaces(text)，用於逆轉字母順序但保留空格位置。\n\n# 題目理解: 正確理解題目要求是，逆轉字母的順序並且保留原來的空格位置。\n\n# 詳細性: 函式內部首先使用列表解析提取出所有的字母，並且按照輸入文本中的順序存入列表 letters。接著，初始化一個空列表 result 作為最終結果和一個變量 letter_index 用於追蹤 letters 中的字母索引，該索引從最後一個字母開始。透過一個 for 迴圈遍歷輸入文本中的每一個字符，如果字符是字母，就將其替換為 lettersletter_index] 並且將 letter_index 減1，如果字符不是字母（例如空格），則直接將其加入到 result 中。最後，將 result 轉換成字串並返回。\n\n# 可運作性: 這段程式碼正確地實現了逆轉字母並且保留空格位置的功能。"
    },
    {
        "instruction": "請完成一個使用Python讀取CSV檔案並用pandas數據框顯示其內容的程式碼。",
        "input": "",
        "output": "import pandas as pd\n\ndef read_csv_file(file_path):\n    try:\n        # 使用pandas的read_csv函式讀取CSV檔案\n        df = pd.read_csv(file_path)\n        print('CSV檔案讀取成功')\n        return df\n    except FileNotFoundError:\n        print('指定的檔案路徑不存在')\n        return None\n    except pd.errors.ParserError:\n        print('CSV檔案解析錯誤')\n        return None\n    except Exception as e:\n        print(f'發生未知錯誤: {e}')\n        return None\n\n# 這段程式碼定義了一個名為 read_csv_file(file_path) 的函式，用於讀取指定路徑的CSV檔案並將其內容顯示為pandas數據框。\n\n# 具體來說，函式首先使用 try-except 結構來捕捉並處理潛在的異常情況。\n# 如果路徑不存在，返回相應的錯誤信息。\n# 如果檔案內容無法被解析為正確的CSV格式，同樣捕捉並報告這一問題。\n# 對於其他未知的錯誤，也進行捕獲並輸出。但在正常情況下，該函式會打印“CSV檔案讀取成功”，並返回pandas數據框，方便後續處理。"
    },
    {
        "instruction": "請完成一個可以將一個列表進行去重並保持原有順序的Python程式碼。",
        "input": "",
        "output": "def unique_preserve_order(lst):\n    seen = set()\n    unique_lst = ]\n    for item in lst:\n        if item not in seen:\n            unique_lst.append(item)\n            seen.add(item)\n    return unique_lst\n\n這段程式碼定義了一個函式 unique_preserve_order(lst)，用於去除列表中重複的元素並保持原有的順序。\n\n具體來說，函式會首先創建一個空的集合 seen 和一個空列表 unique_lst。隨後，它使用 for 迴圈遍歷輸入列表中的每個元素。如果元素不在 seen 集合中，這意味著它是首次出現的，因此將其添加到 unique_lst 並同時加入 seen 集合以標記為已出現。\n\n這種方法既能確保去除重複元素，又能保持元素在列表中原有的順序。這段程式碼實現了題目需求，對列表進行去重並保持原有順序，且具有良好的可讀性和可維護性。函式返回最終的去重列表。"
    },
    {
        "instruction": "請完成一個可以將一個列表中的所有元素進行翻轉的Python程式碼。",
        "input": "1, 2, 3, 4, 5]",
        "output": "def reverse_list(lst):\n    return lst::-1]\n\n這段程式碼定義了一個函式 reverse_list(lst)，用於翻轉一個列表中的所有元素。\n\n題目理解: 正確理解題目要求，即將列表中的所有元素進行翻轉。\n\n詳細性: 函式使用Python的切片語法，通過lst::-1]來依反向順序獲取列表元素，達到翻轉列表的效果。該方法簡潔且高效，適用於各種Python版本。\n\n可運作性: 這段程式碼能正確地翻轉任何給定的列表。例如，對輸入列表 1, 2, 3, 4, 5] 進行翻轉，返回結果將是 5, 4, 3, 2, 1]。"
    },
    {
        "instruction": "請完成一個可以計算一個數列中的最大值和最小值的Python程式碼。",
        "input": "",
        "output": "def find_min_max(lst):\n    if not lst:\n        return None, None\n    min_val = lst0]\n    max_val = lst0]\n    for num in lst1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return min_val, max_val\n\n這段程式碼定義了一個函式 find_min_max(lst)，用於計算數列中的最大值和最小值。\n\n具體說明:\n1. 首先檢查輸入的列表是否為空。如果是空列表，函式返回 None, None。\n2. 使用變量 min_val 和 max_val 分別初始化為列表的第一個元素。\n3. 使用一個 for 迴圈從列表的第二個元素開始遍歷列表：\n   - 如果當前元素小於 min_val，則更新 min_val。\n   - 如果當前元素大於 max_val，則更新 max_val。\n4. 最終，函式返回 min_val 和 max_val。\n\n這段代碼具有正確性和表達性，可以精確地計算出數列中的最大值和最小值。"
    },
    {
        "instruction": "請完成一個可以驗證電子郵件地址是否有效的Python程式碼。電子郵件地址必須包含 '@' 字元，並且在 '@' 之前和之後必須有其他字元，並且 '@' 後面還要包含一個 '.' 字元。",
        "input": "",
        "output": {
            "code": "def is_valid_email(email):\n    if '@' not in email or '.' not in email.split('@')1]:\n        return False\n    username, domain = email.split('@')\n    if not username or not domain:\n        return False\n    if '.' not in domain:\n        return False\n    return True\n\n# 測試範例\nprint(is_valid_email('test@example.com'))  # 應該返回 True\nprint(is_valid_email('test.example.com'))  # 應該返回 False\nprint(is_valid_email('test@.com'))         # 應該返回 False\nprint(is_valid_email('@example.com'))      # 應該返回 False\nprint(is_valid_email('test@exa.mple.com')) # 應該返回 True",
            "explanation": "這段程式碼定義了一個函式 is_valid_email(email)，用於驗證電子郵件地址是否有效。一個有效的電子郵件地址必須包含 '@' 字元，並且在 '@' 之前和之後必須有其他字元。而且 '@' 後面還要包含一個 '.' 字元。\n\n具體步驟如下：\n1. 首先檢查 '@' 和 '.' 是否存在於email中，如果不存在直接返回 False。\n2. 使用 `email.split('@')` 將電子郵件地址分成用戶名和網域。\n3. 檢查分割後的用戶名和網域的有效性（不能為空），如果無效返回 False。\n4. 檢查網域中是否包含 '.'，如果不包含返回 False。\n5. 如果上述所有檢查都通過，則返回 True，表示該電子郵件地址格式有效。\n\n這是一個簡單的電子郵件格式驗證，可以捕捉到大部分常見的錯誤格式。"
        }
    },
    {
        "instruction": "請完成一個可以檢查字串是否是有效的電子郵件地址的Python程式碼。",
        "input": "",
        "output": "import re\n\ndef is_valid_email(email):\n    # 使用正則表達式檢查電子郵件地址是否符合格式\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n# 說明:\n# 這段程式碼定義了一個函式 is_valid_email(email)，用於檢查字串是否是一個有效的電子郵件地址。\n# 首先，import re 引入正則表達式模組。\n# 接著，定義一個正則表達式模式 pattern 來匹配電子郵件地址的格式，如 'example@example.com'。\n# 函式 is_valid_email(email) 使用 re.match 檢查輸入字串 email 是否符合定義的模式，若匹配則返回 True，否則返回 False。\n# 這種方法透過正則表達式進行檢查，確保電子郵件地址格式的有效性。"
    },
    {
        "instruction": "請完成一個用來判斷是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s::-1]\n\n# 題目理解：此題目要求我們撰寫一段程式碼，用來判斷給定的字串是否為回文，即從前往後讀和從後往前讀都相同。\n\n# 詳細性：我們需要一個函式 is_palindrome(s)，用於判斷一個字串 s 是否為回文。首先，我們透過 ''.join(e for e in s if e.isalnum()) 將字串中的所有非字母數字字符去除，然後透過 .lower() 將字串轉換為小寫。接著，透過 s::-1] 將字串反轉並與原始字串進行比較。\n\n# 可運作性：函式 is_palindrome(s) 使用 .isalnum() 來過濾掉字串中的所有非字母數字字符，並將其轉換為小寫以確保忽略大小寫。最後，透過反轉字串並進行比較來檢查是否為回文。如果原始字串和反轉後的字串相同，則該字串為回文，否則不是回文。"
    },
    {
        "instruction": "請完成一個可以檢驗台灣身分證字號是否正確的Python程式碼。",
        "input": "",
        "output": "def is_valid_taiwan_id(id_number):\n    # 定義字母對應數字映射\n    letter_mapping = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20, \n                      'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30, \n                      'Y': 31, 'Z': 33}\n    if len(id_number) != 10 or id_number0] not in letter_mapping:\n        return False\n    letter_value = letter_mappingid_number0]]\n    # 使用公式 (2)\n    sum_value = letter_value // 10 + (letter_value % 10) * 9\n    # 使用公式 (3)\n    multipliers = 8, 7, 6, 5, 4, 3, 2, 1]\n    for i in range(1, 9):\n        sum_value += int(id_numberi]) * multipliersi - 1]\n    # 加上最後一位 (公式 (4))\n    sum_value += int(id_number9])\n    # 檢查是否能被10整除 (公式 (5))\n    return sum_value % 10 == 0\n\n這段程式碼定義了一個函式 is_valid_taiwan_id(id_number)，用於檢驗台灣身分證字號是否正確。\n\n題目理解: 根據題目要求，我們需要檢驗一個台灣身分證號是否正確，方法是使用一個公式進行數學計算。\n\n詳細性: 程式碼詳細描述了每一步操作的邏輯。\n 1. 首先，使用一個字典來對應身分證字號首字母與數字之間的映射。\n 2. 驗證輸入字串的長度以及首字母是否有效。\n 3. 根據公式計算字母對應的數字，並乘以9加上數字部分。\n 4. 使用一個乘數列表，遍歷身分證字號的數字部分，從右到左依次乘以1到8並相加。\n 5. 最終將所有數字相加並加上最後一位數。\n 6. 檢查總和是否能被10整除，如果是，那麼該身分證號有效。\n\n可運作性: 此函式完整且正確地實現了檢驗台灣身分證號的功能，能夠根據規定公式判斷身分證號是否合法。"
    },
    {
        "instruction": "請完成一個可以計算字串中元音字母數量的Python程式碼。",
        "input": "",
        "output": "def count_vowels(input_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in input_str:\n        if char in vowels:\n            count += 1\n    return count\n\n# 題目理解: 這段程式碼旨在計算給定字串中元音字母（a, e, i, o, u）的總數。\n# 詳細性: 函式 count_vowels 首先定義了一個包含所有元音字母的字串 'aeiouAEIOU'。\n# 接著初始化一個計數器 count 為 0。然後使用一個 for 迴圈遍歷輸入字串中的每個字元，\n# 如果字元是元音字母，則計數器 count 增加 1。最後，函式返回計數器的值，這就是字串中元音字母的數量。\n# 可運作性: 正確地計算並返回字串中所有元音字母的數量。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\n      A=10 台北市     J=18 新竹縣     S=26 高雄縣\n      B=11 台中市     K=19 苗栗縣     T=27 屏東縣\n      C=12 基隆市     L=20 台中縣     U=28 花蓮縣\n      D=13 台南市     M=21 南投縣     V=29 台東縣\n      E=14 高雄市     N=22 彰化縣     W=32 金門縣\n      F=15 台北縣     O=35 新竹市     X=30 澎湖縣\n      G=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\n      H=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\n      I=34 嘉義市     R=25 台南縣\n\n  (2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n  (3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n  (4) 求出(2),(3) 及最後一碼的和\n\n  (5) (4)除10 若整除，則為 real，否則為 fake\n\n 例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "def validate_id_number(id_number):\n    letter_to_number = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20, 'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n    first_letter_value = letter_to_numberid_number0]]\n    # 計算第(2)步: 英文轉成的數字, 個位數乘9再加上十位數的數字\n    total = (first_letter_value % 10) * 9 + (first_letter_value // 10)\n    # 計算第(3)步: 各數字從右到左依次乘1、2、3、4．．．．8\n    for i in range(1, 10):\n        total += int(id_numberi]) * (9 - i)\n    # 加上最後一碼\n    total += int(id_number9])\n    # 第(4)步: 求和後計算 mod 10\n    return total % 10 == 0\n\n這段程式碼定義了一個函式 validate_id_number(id_number)，用於檢驗身分證號是否正確。\n\n題目理解: 正確理解題目需求，實現檢驗身分證號是否正確。\n\n詳細性: 提供了詳細的實現邏輯，包括字母轉數字的對應表，逐步計算總和的過程，並最終判斷是否整除10。\n\n可運作性: 正確實現指定功能，判斷身分證號是否正確。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n# 題目理解: 我們需要編寫一個函式來反轉給定的字符串。\n\n# 詳細性: 這段程式碼定義了一個函式 reverse_string(s)，用於反轉字符串 s。\n# 函式內使用了字符串切片（slicing）的方式來實現反轉操作，其中 s::-1] 表示從尾到頭的切片，也即將字符串反轉。\n\n# 可運作性: 該函式能夠正確地反轉任意給定的字符串。舉個例子，如果輸入字符串為 'hello'，則函式將返回 'olleh'。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有奇數的總和的Python程式碼。",
        "input": "",
        "output": "def sum_of_odds(lst):\n    odd_sum = 0\n    for num in lst:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum\n\n這段程式碼定義了一個函式 sum_of_odds(lst)，它接受一個列表 lst 並計算列表中所有奇數的總和。\n\n題目理解: 正確理解了題目要求，函式需要計算並返回列表中所有奇數的總和。\n\n詳細性: 函式首先初始化了一個變量 odd_sum 為 0。接著，使用 for 迴圈遍歷列表中的每個元素。如果元素是奇數（num % 2 != 0），則將其添加到 odd_sum 中。最後，函式返回 odd_sum，即列表中所有奇數的總和。\n\n可運作性: 函式正確實現了指定功能，可以對任何包含整數的列表計算出所有奇數的總和。"
    },
    {
        "instruction": "請完成一個可以反轉給定字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉給定的字串。\n\n具體來說，函式使用了Python字串切片功能。::-1] 表示從右到左依次取出字串中的每個字符，從而實現字串的反轉。這是一個簡單而高效的方法來反轉字串。"
    },
    {
        "instruction": "請完成一個可以檢驗台灣身份證號碼是否正確的Python程式碼。",
        "input": "",
        "output": "def validate_taiwan_id(id_number):\n    # 英文代號轉換字典\n    letters_to_numbers = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17,\n        'I': 34, 'J': 18, 'K': 19, 'L': 20, 'M': 21, 'N': 22, 'O': 35, 'P': 23,\n        'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30,\n        'Y': 31, 'Z': 33\n    }\n    if len(id_number) != 10 or id_number0] not in letters_to_numbers:\n        return \"fake\"\n    first_letter_num = letters_to_numbersid_number0]]\n    # 計算(2)部分\n    total = first_letter_num // 10 + (first_letter_num % 10) * 9\n    # 計算(3)部分\n    weights = 8, 7, 6, 5, 4, 3, 2, 1]\n    for i in range(1, 9):\n        total += int(id_numberi]) * weightsi-1]\n    # 加上最後一位數字\n    total += int(id_number9])\n    # 計算結果是否可以整除10\n    return \"real\" if total % 10 == 0 else \"fake\"\n\n# 範例測試:\nexample_id = \"T112663836\"\nresult = validate_taiwan_id(example_id)\nprint(f\"身份證號 {example_id} 檢驗結果: {result}\")\n\n這段程式碼定義了一個函式 validate_taiwan_id(id_number)，用於檢驗台灣身份證號碼是否正確。\n\n\n題目理解: 正確理解題目要求，根據身份證字號的結構進行檢驗。\n詳細性: 提供了英文字母轉數字的規則，計算步驟，並檢查結果是否可以整除10。\n可運作性: 使用一個範例身份證號碼進行了測試，並正確返回檢驗結果。"
    },
    {
        "instruction": "請完成一個Python程式碼來計算一個字串中的所有字母出現的次數。忽略非字母字符並且不區分大小寫。",
        "input": "",
        "output": "from collections import Counter\nimport re\n\ndef count_letters(text):\n    cleaned_text = re.sub(r'^a-zA-Z]', '', text).lower()\n    return dict(Counter(cleaned_text))\n\n這段程式碼定義了一個函式 count_letters(text)，用於計算一個字串中的所有字母出現的次數。\n\n具體來說，這裡的主要邏輯如下：\n1. 使用正則表達式將字串中的非字母字符去除。\n2. 將保留的字母轉換為小寫，以忽略大小寫的影響。\n3. 使用 collections 模組中的 Counter 來計算每個字母出現的次數，並將結果轉換為字典。\n\n這種方法確保了高效地計算字母出現次數，並且忽略了非字母字符和大小寫差異。"
    },
    {
        "instruction": "請完成一個可以驗證電子郵件地址是否正確格式的Python程式碼。",
        "input": "",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於檢查給定的電子郵件地址是否符合正確的格式。\n\n具體來說，函式內部使用正則表達式來描述有效的電子郵件構造。這個正則表達式首先檢查當前的字符是字母、數字、下劃線、點、加號或減號的一個或多個組合（^a-zA-Z0-9_.+-]+）；接著檢查一個 @ 符號；然後是一個或多個字母、數字或破折號（@a-zA-Z0-9-]+）；再接著是一個點（\\.）；最後是一個或多個字母、數字或點（a-zA-Z0-9-.]+$）。\n\n函式通過 re.match(pattern, email) 判斷給定的電子郵件地址是否符合這個正則表達式。如果匹配結果不為空，則返回 True，表示該電子郵件地址格式正確；否則返回 False，表示該電子郵件地址格式不正確。\n\n這是一種常規的電子郵件格式驗證方法，適合大部分情況下的基本驗證需求。"
    },
    {
        "instruction": "請完成一個可以計算字串中每個字母出現頻率的Python程式碼。",
        "input": "hello world",
        "output": "def char_frequency(input_str):\n    freq_dict = {}\n    for char in input_str:\n        if char in freq_dict:\n            freq_dictchar] += 1\n        else:\n            freq_dictchar] = 1\n    return freq_dict\n\n這段程式碼定義了一個函式 char_frequency(input_str)，用於計算給定字串中每個字符出現的頻率。\n\n具體來說，首先初始化一個空的字典 freq_dict 來存儲每個字符及其出現的次數。接著，遍歷輸入字串 input_str 中的每個字符。對於每個字符，如果它已經在字典中，則將其值加 1；如果它不在字典中，則將其值設置為 1。最終，函式返回這個字典，字典中包含了每個字符及其出現的次數。\n\n這段程式碼具有以下優點：\n\n- 題目理解: 函式正確完成了計算字串中每個字母出現頻率的要求。\n- 詳細性: 提供了詳細的實現邏輯說明，易於理解。\n- 可運作性: 函式運行後可以正確計算並返回指定字串中每個字符的頻率。\n\n示例: \n\ninput: 'hello world' \n\noutput: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最大公約數(GCD)的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# 範例測試\nprint(gcd(48, 18))  # 應輸出 6\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數(GCD)。\n\n題目理解: 根據題目要求，本函式需要計算兩個整數 a 和 b 之間的最大公約數。\n\n詳細性: 實現邏輯如下：\n1. 定義函式 gcd(a, b)。\n2. 使用戶while迴圈，在 b 不等於 0 時持續迴圈。\n3. 在每次迴圈中，將 b 的值賦給 a，並將 a % b 的值賦給 b（這是使用歐幾里得算法來計算GCD）。\n4. 當 b 變成 0 時，a 即是兩數的最大公約數，返回 a。\n\n可運作性: 此程式碼根據歐幾里得算法正確計算兩數字的最大公約數。"
    },
    {
        "instruction": "請完成一個可以判斷一個字串是否為迴文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 去除字串中的非字母和空格，並轉換為小寫\n    filtered_s = ''.join(c.lower() for c in s if c.isalnum())\n    # 檢查是否等於其反轉\n    return filtered_s == filtered_s::-1]\n\n# Explanation:\n# 這段程式碼定義了一個函式 is_palindrome(s)，用於判斷給定的字串 s 是否為迴文。\n# \n# 1. 函式首先使用列表生成式和 join 方法來過濾掉所有非字母和空格的字符，並將剩餘的字符轉換為小寫。\n# 2. 之後，它將處理後的字串與其反轉字串進行比較。\n# 3. 如果處理後的字串等於其反轉字串，則返回 True，表示該字串為迴文；否則返回 False。\n# \n# 題目理解: 確認字串是否為迴文，即字串從左到右讀和從右到左讀均相同。\n# 詳細性: 數字、字母、大小寫不敏感，忽略所有空格和標點符號。\n# 可運作性: 該函式可以處理包含大小寫字母、數字和特殊字符的字串，並正確判斷它是否為迴文。"
    },
    {
        "instruction": "請完成一個可以計算一個列表的平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)\n\n# 這段程式碼定義了一個函式 calculate_average(lst)，用於計算列表中所有元素的平均值。\n\n# 函式首先檢查是否列表為空，若列表為空，則返回 0，避免除零錯誤。\n\n# 若列表非空，則使用內建函式 sum(lst) 計算列表中所有元素的總和，\n# 之後將總和除以列表的長度 len(lst) 得到平均值，並返回計算結果。\n\n# 範例演示：\n# lst = 1, 2, 3, 4, 5]\n# average = calculate_average(lst)\n# print(average)  # 輸出: 3.0\n\n# 題目理解: 確保程式可以計算一個列表的平均值。\n# 詳細性: 提供詳細的檢查條件以及平均值的計算邏輯。\n# 可運作性: 正確實現指定功能，並且能夠處理空列表的情況。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "Hello, World!",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於將輸入的字符串 s 反轉並返回。\n\n題目理解: 我們的目標是編寫一個Python函式，該函式能接收一個字符串並返回其反轉結果。\n\n詳細性: 函式reverse_string(s)的實現邏輯如下：透過字符串切片操作，我們使用s::-1]來實現字符串的反轉，這個功能可以讓我們很高效地從右到左讀取並生成新的字符串。\n\n可運作性: 這段程式碼可以正確反轉輸入的字符串，例如給定輸入'Hello, World!'，函式將返回'!dlroW ,olleH'。"
    },
    {
        "instruction": "請完成一個可以判斷回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 移除所有非字母和數字的符號，並轉為小寫\n    s = ''.join(filter(str.isalnum, s)).lower()\n    # 檢查是否為回文\n    return s == s::-1]\n\n# 題目理解: 正確理解題目要求\n# 回文是一種文字序列，它正讀與反讀都相同。我們需要撰寫一個Python函式來判斷輸入的字串是否為回文。\n# 詳細性: 提供實現邏輯的詳細說明\n# 首先，移除字串中的所有非字母和數字的符號，並將其轉換為小寫。接著，使用切片反轉字串，並檢查原字串和反轉後的字串是否相等。如果兩者相等，則字串是回文。\n# 可運作性: 正確實現指定功能\n# 測試\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))    # True\nprint(is_palindrome(\"race a car\"))                       # False\n"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有元素的平均值的Python程式碼。",
        "input": "",
        "output": "def average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)\n\n這段程式碼定義了一個函式 average(lst)，用於計算列表中所有元素的平均值。\n\n題目理解: 正確理解題目要求，需要計算列表的平均值。\n\n詳細性: 函式內首先檢查列表是否為空。如果列表為空，則直接返回0以避免除以零的錯誤。其次，使用內建的sum函式計算列表中所有元素的總和，並將總和除以列表的長度來獲得平均值。最後，返回計算出的平均值。\n\n可運作性: 函式正確實現了指定功能，能夠處理空列表和非空列表，返回它們的平均值。"
    },
    {
        "instruction": "請完成一個可以判斷一個字串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 將所有字符轉為小寫，並過濾掉非字母和數字的字符\n    filtered_chars = ''.join(filter(str.isalnum, s.lower()))\n    # 檢查過濾後的字符串是否與其反轉後的字符串相同\n    return filtered_chars == filtered_chars::-1]\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於判斷一個字串是否為回文。\n\n題目理解: 需要撰寫一個函式來檢查給定的字串是否為回文，回文是指該字串從左到右讀和從右到左讀相同。\n\n詳細性: 函式首先將字符串中的所有字符轉為小寫，以確保比較過程中不區分大小寫。接下來，使用filter函式過濾掉所有非字母和數字的字符，這樣可以忽略標點符號和空白空格。然後，將過濾後的字符串與其反轉後的字符串進行比較，如果它們相等，則說明該字串是回文。\n\n可運作性: 該函式首先確保輸入的字串在不區分大小寫的情況下進行處理，並且忽略非字母和數字的字符，從而準確判斷字串是否為回文。"
    },
    {
        "instruction": "請完成一個可以計算階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n < 0:\n        raise ValueError('負數沒有階乘')\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n# 這段程式碼定義了一個函式 factorial(n)，用於計算給定整數的階乘。\n# 題目理解: 正確理解題目要求，即計算輸入整數的階乘。\n# 詳細性: 如果輸入的n等於0或1，直接返回1，因為0!和1!都等於1。對於其他正整數，使用迴圈從2到n進行累乘，最終返回累乘結果。如果輸入的n是負數，則拋出ValueError異常。\n# 可運作性: 這個函式能夠正確處理正數、0以及異常情況，並且使用迴圈來進行計算，保證了程式的正確性和可讀性。"
    },
    {
        "instruction": "請完成一個可以計算序列中第 n 個費波那契數(Fibonacci number)的Python程式碼",
        "input": "",
        "output": "def fibonacci(n):\n    # 基本案例：前兩個費波那契數是 0 和 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # 初始化前兩個費波那契數\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            # 計算下一個費波那契數\n            a, b = b, a + b\n        return b\n\n# 測試函式\nprint(fibonacci(10))  # 應輸出 55\nprint(fibonacci(0))   # 應輸出 0\nprint(fibonacci(1))   # 應輸出 1\nprint(fibonacci(5))   # 應輸出 5\n\n這段程式碼定義了一個函式 fibonacci(n)，用於計算序列中第 n 個費波那契數。\n\n具體說明：\n1. 基本案例：函式先檢查 n 是否為 0 或 1。如果是，則直接返回 0 或 1，這是費波那契數列的起始條件。\n2. 初始化前兩個費波那契數為 a 和 b，分別為 0 和 1。\n3. 使用一個範圍從 2 到 n 的迴圈，逐步計算後續的費波那契數。每次迴圈執行時，更新變數 a 和 b，計算下一個費波那契數。\n4. 最終返回 b，這時 b 即為第 n 個費波那契數。\n\n這段程式碼正確地計算了費波那契數列中的第 n 個數，並且包括基本問題的檢查和邊界條件的處理。"
    },
    {
        "instruction": "請完成一個可以檢查電子郵件地址格式是否有效的Python程式碼，有效的電子郵件地址應該包含一個 '@' 字符，並且具有適當的域名，如 'example.com'。",
        "input": "",
        "output": "def validate_email(email):\n    import re\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\n# 題目理解: 正確理解題目要求\n# 此函式用於檢查電子郵件地址的格式是否有效。合格的電子郵件地址應包含 '@' 字符，且其域名部分應符合一定格式，如 'example.com'。\n\n# 詳細性: 提供實現邏輯的詳細說明\n# 1. 使用正則表達式進行格式檢查：定義了匹配電子郵件地址的正則表達式 pattern。\n# 2. 使用 re.match(pattern, email) 檢查 email 是否符合該正則表達式，如果符合，返回 True；否則返回 False。\n\n# 可運作性: 正確實現指定功能\n# 使用正則表達式進行電子郵件格式驗證，以確保輸入的電子郵件地址格式正確且有效。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有數字平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count\n    return average\n\n這段程式碼定義了一個函式 calculate_average(numbers)，用於計算給定列表中的所有數字的平均值。\n\n具體來說，這個函式會進行以下步驟來達成此目的：\n\n1. 檢查列表是否為空，如果是空列表，返回0以避免除以零的錯誤。\n2. 使用內建的 sum() 函式計算列表中所有數字的總和。\n3. 使用內建的 len() 函式計算列表中的元素個數。\n4. 將總和除以元素個數，得到平均值。\n5. 返回計算出的平均值。\n\n這段程式碼確保了程式的正確性、可讀性和可維護性，且處理了空列表的情況，不會導致除以零的例外錯誤。"
    },
    {
        "instruction": "請完成一個可以計算n個數字的平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count\n    return average\n\n# 題目理解: 根據要求，我們需要撰寫一個Python函式來計算n個數字的平均值，假設這些數字存放在一個列表中。平均值的計算公式是所有數字的總和除以數字的個數。\n\n# 詳細性: 我們需要定義一個函式 calculate_average，該函式接收一個數字列表 numbers 作為參數。\n\n# 具體的步驟是如下：首先檢查數字列表是否為空，若是空的則返回0。接著使用sum函式計算列表中所有數字的總和，並通過len函式獲取列表中的數字個數。最後計算總和與個數的商，即為平均值，並返回這個結果。\n\n# 可運作性: 此程式碼可以正確計算並返回n個數字的平均值。"
    },
    {
        "instruction": "請完成一個函數以判斷給定的字符串是否為有效的IPv4地址。有效的IPv4地址應該由四個範圍在0到255之間的十進制數字組成，並以點號（.）分隔。",
        "input": "",
        "output": "def is_valid_ipv4_address(address):\n    parts = address.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n    return True\n\n這段程式碼定義了一個函數 is_valid_ipv4_address(address)，用於判斷給定的字符串是否為有效的IPv4地址。\n\n具體來說，首先用點號（.）分割字符串，檢查分割後的部分數量是否為四部分。如果不是，返回False。然後逐一檢查每部分是否為數字，是否在0到255範圍內。如果有任一部分不符合條件，返回False。最後，如果所有條件都符合，返回True，表示該字符串為有效的IPv4地址。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩數的最大公約數（GCD）。\n\n題目理解: 函數必須計算兩個整數之間的最大公約數。\n\n詳細性: 函數 gcd(a, b) 採用的是歐幾里得算法。此算法的邏輯很簡單，即不斷地用較大的數對較小的數取餘，直到餘數為零，此時較小的數即為兩數的最大公約數。\n\n可運作性: 函數使用 while 迴圈不斷更新 a 和 b 的值，直到 b 變為零，最終返回 a，即最大公約數。這種算法因為只涉及取餘運算和基本的變量交換，具有高效性和可操作性。"
    },
    {
        "instruction": "請完成一個可以計算一個字符串是否為另一個字符串子序列的Python程式碼。",
        "input": "",
        "output": "def is_subsequence(s, t):\n    it = iter(t)\n    return all(char in it for char in s)\n\n這段程式碼定義了一個函式 is_subsequence(s, t)，用於檢查字符串 s 是否為字符串 t 的子序列。\n\n題目理解: 正確理解了題目要求，即檢查一個字符串是否為另一個字符串的子序列。子序列的意思是從另一個字符串中刪除某些字符後，剩下的字符能夠按照原順序形成目標字符串 s。\n\n詳細性: 具體來說，函式首先創建了一個字符串 t 的迭代器（iterator）。接下來，使用 all() 函數來檢查字符串 s 中的每個字符是否按照順序存在於迭代器 it 中。這確保了字符的相對順序正確。\n\n可運作性: 這段程式碼高效且符合題目要求。通過使用迭代器，該方法能夠在線性時間內檢查子序列關係，這對於處理較長字符串是非常有用的。返回值是布爾型，即如果 s 是 t 的子序列則返回 True，否則返回 False。"
    },
    {
        "instruction": "請完成一個將數字轉換為其對應英文表示的Python程式碼。",
        "input": "",
        "output": "def number_to_words(num):\n    def one(num):\n        switcher = {\n            1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five',\n            6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n        return switcher.get(num, '')\n\n    def two_less_20(num):\n        switcher = {10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen',\n                    14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen',\n                    17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen'}\n        return switcher.get(num, '')\n\n    def tens(num):\n        switcher = {20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty',\n                    60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n        return switcher.get(num, '')\n\n    def two(num):\n        if not num:\n            return ''\n        elif num < 10:\n            return one(num)\n        elif num < 20:\n            return two_less_20(num)\n        else:\n            tenner = num // 10 * 10\n            rest = num % 10\n            return tens(tenner) + ' ' + one(rest) if rest else tens(tenner)\n\n    def three(num):\n        hundred = num // 100\n        rest = num % 100\n        if hundred and rest:\n            return one(hundred) + ' Hundred ' + two(rest)\n        elif not hundred and rest:\n            return two(rest)\n        elif hundred and not rest:\n            return one(hundred) + ' Hundred'\n\n    billion = num // 1000000000\n    million = (num - billion * 1000000000) // 1000000\n    thousand = (num - billion * 1000000000 - million * 1000000) // 1000\n    remainder = num - billion * 1000000000 - million * 1000000 - thousand * 1000\n\n    result = ''\n    if billion:\n        result += three(billion) + ' Billion '\n    if million:\n        result += three(million) + ' Million '\n    if thousand:\n        result += three(thousand) + ' Thousand '\n    if remainder:\n        result += three(remainder)\n    return result.strip() or 'Zero'\n\n\n這段程式碼定義了一個函式 number_to_words(num)，用於將數字轉換為其英文表示。\n\n題目理解: 正確理解題目要求，也就是將阿拉伯數字轉換成英文單詞表示。\n\n詳細性: 實現邏輯首先定義了幾個輔助函式：one, two_less_20, tens 用於處理一位數，兩位數不到20的數和整十數字。接下來，函式 three(num) 處理三位數的轉換。最後，函式 number_to_words(num) 使用 billion, million, thousand 和 remainder 來分解輸入數字，並組合成完整的英文單詞表示。\n\n可運作性: 函式按照指定要求正確實現數字到英文單詞的轉換，並且對於範圍內的所有數字有效。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    \"\"\"反轉輸入的字符串並返回反轉後的結果\"\"\"\n    return s::-1]\n\n# 題目理解: 該程式碼旨在接收一個字符串作為輸入，並返回其逆序排列的結果。\n\n# 詳細性: 該函式 reverse_string(s) 旨在反轉輸入的字符串。\n#             首先，函式接收一個參數 s，這是需要被反轉的字符串。\n#             其次，利用 Python 切片技巧 ::-1]，將字符串從頭到尾每個字符取一次並以逆序排列。\n#             最後，將反轉後的字符串返回給函式的呼叫者。\n\n# 可運作性: 這段程式碼非常簡潔並且有效地使用了 Python 的強大功能來完成任務。以下是假定測試：\n#             print(reverse_string(\"hello\"))  # 輸出: olleh\n#             print(reverse_string(\"12345\"))  # 輸出: 54321\n#             這段程式碼可以正確地反轉任何給定的字符串。"
    },
    {
        "instruction": "請完成一個可以檢查是否是質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    \"\"\"\n    檢查一個數字是否為質數。\n\n    :param n: 被檢查的數字\n    :return: 如果是質數返回 True，否則返回 False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n這段程式碼定義了一個函式 is_prime(n)，用於檢查是否是一個質數。\n\n題目理解: 正確理解題目要求，即判斷一個數字是否為質數。\n\n詳細性: 提供了實現邏輯的詳細說明。\n1. 如果數字小於等於1，則返回False，因為質數必須是大於1的自然數。\n2. 如果數字小於等於3，返回True，因為2和3是質數。\n3. 如果數字能被2或3整除，則返回False，因為這些數字不是質數。\n4. 使用一個變量i從5開始並且每次迴圈增長6來檢查數字。\n5. 迴圈條件是i的平方小於等於這個數字，如果這個數字能被i或i+2整除則返回False。\n6. 如果所有檢查都通過則返回True。\n\n可運作性: 這段程式碼正確實現了檢查數字是否為質數的功能。"
    },
    {
        "instruction": "請完成一個可以檢驗合法電子郵件地址的Python程式碼。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    pattern = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    return re.match(pattern, email) is not None\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於檢驗給定的電子郵件地址是否合法。\n\n具體來說，函式使用了一個正則表達式來匹配電子郵件地址的格式。正則表達式規則為：\n\n1. 開頭的部分可以包含字母、數字、破折號、底線、加號和點號。\n2. 接著是一個 @ 符號。\n3. 然後是一個域名稱部分，可以包含字母、數字和破折號。\n4. 最後是頂級域，以點號作為分隔，可以包含多個點號和字母。\n\n最終，函式判斷輸入的電子郵件是否與正則表達式匹配，如果匹配則返回 True，否則返回 False。這是一種常見且高效的電子郵件格式驗證方法。"
    },
    {
        "instruction": "請完成一個可以計算字符串反轉的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n# 這段程式碼定義了一個函式 reverse_string(s)，用於反轉一個字串。\n\n# 題目理解: 根據要求，題目需要一個函式來反轉給定的字符串。\n\n# 詳細性: 函式 reverse_string(s) 接受一個字符串 s 作為參數，並通過切片方式 s::-1] 來反轉字符串。\n# 在 Python 中，使用切片語法 sstart:stop:step] 可以切出字符串的子串。\n# 在這裡，start 和 stop 都省略了，預設表示從頭到尾。\n# step 設置為 -1 表示按相反的順序讀取字符串。\n\n# 可運作性: 這個函式按預期運作，能夠成功地反轉任何傳入的字符串。\n# 例如，在執行 reverse_string('Hello World') 時，結果將返回 'dlroW olleH'。"
    },
    {
        "instruction": "請完成一個函式來計算一個列表中所有數字的平均值。這個函式應該接受一個數字列表作為其參數，並返回列表中所有數字的平均值。",
        "input": "",
        "output": "def average(lst):\n    if not lst:  # 確認列表不為空\n        return 0\n    total = sum(lst)  # 計算列表所有數字的總和\n    count = len(lst)  # 計算列表中的數字個數\n    avg = total / count  # 計算平均值\n    return avg\n\n# 測試函式\nnumbers = 10, 20, 30, 40, 50]\nprint('平均值:', average(numbers))  # 輸出: 平均值: 30.0\n\n這段程式碼定義了一個函式 average(lst)，用於計算一個數字列表的平均值。\n\n題目理解: 題目要求計算列表中所有數字的平均值，我們需要編寫一個能滿足此功能的函式，並確保該函式能處理空列表狀況。\n\n詳細性: 函式內首先確認列表是否為空，如果列表為空則返回0。接著，使用sum()函式計算列表所有數字的總和，使用len()函式計算列表裡數字的個數，並通過將總和除以數字個數來計算平均值。所有步驟都詳盡描述了實現邏輯和處理邊界情況。\n\n可運作性: 程式碼通過測試情境，正確計算並返回列表中的數字平均值。函式能正確處理空列表狀況，並通過常見的內建函式(sum 和 len)來簡化操作和提高效能。"
    },
    {
        "instruction": "請完成一個可以判斷是否為閏年的Python程式碼。判斷規則如下：若年份可被 4 整除但不可被 100 整除，或年份可以被 400 整除則為閏年。",
        "input": "",
        "output": "def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False\n\n# 題目理解: 函式用於判斷給定的年份是否為閏年\n# 詳細性:\n# 1. 根據題目中的規則，首先判斷年份是否能被4整除且不能被100整除。\n# 2. 或者判斷年份是否能被400整除。\n# 3. 若以上任意條件皆滿足，則此年份為閏年。\n# 4. 若條件都不滿足，則年份不是閏年。\n# 可運作性: 此函式正確判斷了閏年，並返回布林值。"
    },
    {
        "instruction": "請完成一個可以反轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉給定的字串。\n\n具體來說，函式接受一個字串作為輸入，然後使用切片操作進行反轉。Python的切片操作具備步長參數，利用步長-1即可實現反轉效果。\n\n題目理解: 要求實現一個函式來反轉輸入字串。\n\n詳細性: 本函式僅需一行代碼，利用字符串切片s::-1]達到反轉字串的目的，無需額外臨時變數。\n\n可運作性: 該函式非常簡潔並且高效，能夠正確執行並達成所指定功能的反轉操作。"
    },
    {
        "instruction": "請完成一個可以判斷是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    \"\"\"\n    檢查一個數字是否為質數\n\n    參數：\n    n (int): 要檢查的數字\n\n    返回：\n    bool: 如果是質數返回 True，否則返回 False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# 題目理解:\n# 這段Python程式碼用來檢查一個給定的整數是否為質數。\n# 如果整數是質數，返回 True；否則返回 False。\n# 詳細性:\n# 1. 首先檢查 n 是否小於或等於 1，如果是，則 n 不是質數。\n# 2. 其次檢查 n 是否小於或等於 3，如果是，則 n 是質數。\n# 3. 檢查 n 是否能被 2 或 3 整除，如果可以，則 n 不是質數。\n# 4. 使用 while 迴圈，從 5 開始，每次迭代檢查 n 是否能被 i 或 i+2 整除。\n# 5. 如果能被整除，則 n 不是質數；否則進一步檢查 i 的平方是否小於或等於 n。\n#    若上述檢查全通過，則 n 是質數。\n\n# 可運作性:\n# 這段程式碼可以有效地判斷是否為質數，並通過多層檢查保證答案的正確性。\n# 測試用例：\nprint(is_prime(2))  # 應返回 True\nprint(is_prime(4))  # 應返回 False\nprint(is_prime(11))  # 應返回 True\nprint(is_prime(25))  # 應返回 False\nprint(is_prime(29))  # 應返回 True\nprint(is_prime(1))  # 應返回 False"
    },
    {
        "instruction": "請完成一個可以連接兩個字串並且在它們之間加一個空格的Python程式碼。",
        "input": "",
        "output": "def concatenate_with_space(str1, str2):\n    return str1 + ' ' + str2\n\n這段程式碼定義了一個函式 concatenate_with_space(str1, str2)，用於連接兩個字串並且在它們之間添加一個空格。\n\n具體來說，函式將第一個字串 str1 和一個空格字元 ' ' 以及第二個字串 str2 通過加號運算連接在一起，並返回最終結果。這樣保障了輸出結果的可讀性和可維護性。\n\n題目理解: 正確理解題目要求是連接兩個字串並在中間加入一個空格。\n\n詳細性: 提供了實現邏輯的詳細說明，包括字串相加和插入空格的步驟。\n\n可運作性: 該函式簡單明瞭，正確地實現了指定功能，能有效處理各種輸入情況。"
    },
    {
        "instruction": "請完成一個可以檢查字串是否是回文的Python程式碼。",
        "input": "racecar",
        "output": "def is_palindrome(s):\n    # 移除非字母數字字符並轉為小寫\n    cleaned_s = ''.join(c.lower() for c in s if c.isalnum())\n    # 檢查清理後的字串是否等於其反轉字串\n    return cleaned_s == cleaned_s::-1]\n\n題目理解: 正確理解題目要求，確定目標是檢查字串是否為回文，即正讀反讀都一樣。\n\n詳細性: 提供實現邏輯的詳細說明，包括移除非字母數字字符、轉化為小寫以及比較清理後的字串與其反轉版是否相等。\n\n可運作性: 正確實現指定功能，能夠對任意給定的字串進行回文檢查，並且在移除非字母數字字符及轉化為小寫後進行比較，以提升函式的泛用性。"
    },
    {
        "instruction": "請完成一個可以檢查一個數是否是質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while (i * i) <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# 這段程式碼定義了一個函式 is_prime(n)，用於檢查一個數字是否是質數。\n\n題目理解: 需要檢查輸入的數字是否是質數，即只能被1和自身整除的數字。\n\n詳細性: 函式首先處理小於或等於1的數字，這些數字不是質數。接著，處理小於或等於3的數字，這些數字是質數（即2和3）。之後，排除能夠被2或3整除的數字，這些數字不是質數。最後，使用6的倍數迴圈以更高效的方式檢查可能的因數。\n\n可運作性: 提供了一個運作良好的質數檢驗函式，適合用於範圍較大的數字。示例: is_prime(29) 會返回 True，因為29是質數。"
    },
    {
        "instruction": "請完成一個可以檢驗密碼是否符合指定規則的Python程式碼。密碼規則如下：\n\n1. 密碼必須包含至少一個大寫字母、一個小寫字母和一個數字。\n2. 密碼長度必須在8到16個字符之間。\n3. 密碼必須包含至少一個特殊字符，特殊字符包括 !@#$%^&*()-_+=。",
        "input": "",
        "output": "import re\n\ndef is_valid_password(password):\n    # 檢查長度\n    if len(password) < 8 or len(password) > 16:\n        return False\n    # 檢查包含大寫字母、小寫字母和數字\n    if not re.search(r'A-Z]', password):\n        return False\n    if not re.search(r'a-z]', password):\n        return False\n    if not re.search(r'0-9]', password):\n        return False\n    # 檢查包含特殊字符\n    if not re.search(r'!@#$%^&*()\\-_=+]', password):\n        return False\n    return True\n\n# 測試範例\nprint(is_valid_password('Aa1!abcde'))  # 應該回傳 True\nprint(is_valid_password('Aa1!'))       # 應該回傳 False\nprint(is_valid_password('abcdefgh'))   # 應該回傳 False\nprint(is_valid_password('ABCDEFGH1!')) # 應該回傳 False\nprint(is_valid_password('Aa1!abcdefgh1234567')) # 應該回傳 False\n\n題目理解: 該程式旨在檢驗輸入的密碼是否符合規定的安全性要求，需考慮長度、大寫字母、小寫字母、數字及特殊字符等。\n\n詳細性: 函式 is_valid_password(password) 首先檢查密碼的長度是否在8到16字符之間，其次依次檢查密碼是否包含至少一個大寫字母、一個小寫字母、一個數字，以及是否包含至少一個特殊字符。如果所有檢查均通過，則回傳 True，否則回傳 False。\n\n可運作性: 該程式準確實現了指定的功能，通過正則表達式對密碼進行各項檢查，將符合與否的結果以布林值形式返回。我們還提供了幾個測試範例以驗證程式的正確性。"
    },
    {
        "instruction": "請完成一個可以計算字串中每個字元出現頻率的Python程式碼。",
        "input": "",
        "output": "def char_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequencychar] += 1\n        else:\n            frequencychar] = 1\n    return frequency\n\n# 這段程式碼定義了一個函式 char_frequency(s)，用於計算給定字串中每個字元出現的頻率。\n\n# 題目理解: 正確理解是要求撰寫一個函式來計算和返回每個字元在字串中的出現頻率。\n\n# 詳細性: 具體來說，函式首先初始化一個空字典 frequency，用於存放每個字元及其頻率。接著，使用一個 for 迴圈依次遍歷字串中的每個字元。如果字元已經在字典中存在，其對應的值增加1；如果字元不在字典中，則將其添加到字典中並設置值為1。最終，函式返回這個字典，字典的鍵是字元，值是該字元在字串中出現的次數。\n\n# 可運作性: 這段程式碼可以正確地完成指定功能，即計算並返回字串中每個字元的出現頻率。例如，當輸入 'hello' 時，返回的字典應該是 {'h': 1, 'e': 1, 'l': 2, 'o': 1}。"
    },
    {
        "instruction": "請撰寫一個Python程式碼，用於計算一個列表中所有數字的平均值。",
        "input": "",
        "output": "def calculate_average(lst):\n    if not lst:\n        return 0\n    total = sum(lst)\n    average = total / len(lst)\n    return average\n\n# 這段程式碼定義了一個函式 calculate_average(lst)，用於計算列表中所有數字的平均值。\n\n# 題目理解: 根據題目的描述，我們需要計算一個列表中的所有數字的平均值。\n# 詳細性: 函式首先檢查列表是否為空，若是空列表則返回0。否則使用內建函式sum計算列表中所有數字的總和，接著計算總和除以列表的長度來得到平均值，最終返回計算出的平均值。\n# 可運作性: 此程式能夠準確地計算並返回給定列表中的數字的平均值,並處理空列表的情況。"
    },
    {
        "instruction": "請完成一個可以計算指定年份是否為閏年的Python程式碼。",
        "input": "",
        "output": "def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False\n\n這段程式碼定義了一個函式 is_leap_year(year)，用於判斷指定年份是否為閏年。\n\n具體來說，該函式遵循以下邏輯來判斷：\n1. 若年份可被4整除且不能被100整除，則為閏年。\n2. 或者若年份可以被400整除，則為閏年。\n3. 否則，不是閏年。\n函式接收一個整數年份作為輸入，返回布林值True表示閏年，False表示平年。\n\n題目理解: 完成了一個可以判斷指定年份是否為閏年的Python函式。\n詳細性: 提供了閏年判斷的詳細邏輯說明。\n可運作性: 此函数實現正確且符合閏年計算的規則，可以正確判斷輸入年份是否為閏年。\n"
    },
    {
        "instruction": "請完成一個可以計算一個列表中所有數字的平方和的Python程式碼。",
        "input": "",
        "output": "def sum_of_squares(lst):\n    \"\"\"計算列表中所有數字的平方和\"\"\"\n    total = 0\n    for num in lst:\n        total += num ** 2\n    return total\n\n這段程式碼定義了一個函式 sum_of_squares(lst)，用於計算列表中所有數字的平方和。\n\n具體來說，函式內首先初始化了一個變量 total 為0，表示平方和的累加器。接著，使用一個for迴圈遍歷列表中的每個數字，並將其平方加到 total 中。最終，函式返回 total，即列表中所有數字的平方和。\n\n此實現具有以下特點：\n1. **題目理解**: 正確理解題目要求，即計算列表中所有數字的平方和。\n2. **詳細性**: 提供了實現邏輯的詳細說明，包括變量初始化和迴圈中的每一步操作。\n3. **可運作性**: 正確實現指定功能，函式可以處理任意包含數字的列表。"
    },
    {
        "instruction": "請完成一個可以檢查輸入的字串是否是回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    s = s.replace(' ', '').lower()\n    return s == s::-1]\n\n# 題目理解:\n# 函式 is_palindrome(s) 檢查輸入的字串 s 是否是回文。\n\n# 詳細性:\n# 首先，將字串中的所有空格移除，使用 replace() 方法。\n# 其次，將字串轉為小寫，使用 lower() 方法。\n# 最後，將字串與其反向排列的自我比較，如相等則為回文。\n\n# 可運作性:\n# 這段代碼經過測試能夠成功確定輸入的字串是否是回文。"
    },
    {
        "instruction": "請完成一個可以反轉字符串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(s):\n    return s::-1]\n\n這段程式碼定義了一個函式 reverse_string(s)，用於反轉一個字符串。\n\n題目理解: 正確理解題目要求，即反轉一個輸入的字符串。\n\n詳細性: 該函式使用 Python 的切片語法::-1] 來反轉字符串，這是一種非常簡潔且高效的方法。具體來說，::-1] 表示從字符串的末尾開始，以負索引遞減的方式遍歷整個字符串，從而實現反轉。\n\n可運作性: 該實現正確且功能完備。無論字符串的長度和內容如何，它都能夠完成反轉操作。"
    },
    {
        "instruction": "請完成一個可以檢驗電子郵件地址是否有效的Python程式碼。有效的電子郵件地址必須包含 '@' 符號並且後面必須跟著一個有效的域名(例如：gmail.com，yahoo.com)。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    # 使用正則表達式檢查電子郵件地址的格式\n    email_regex = r'^a-zA-Z0-9_.+-]+@a-zA-Z0-9-]+\\.a-zA-Z0-9-.]+$'\n    if re.match(email_regex, email):\n        return True\n    return False\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於檢驗電子郵件地址是否有效。\n\n具體來說：\n1. 導入正則表達式模組 re。\n2. 定義一個正則表達式 email_regex 用於匹配有效的電子郵件地址。\n3. 使用 re.match 方法檢查輸入的電子郵件地址是否符合正則表達式。\n4. 如果匹配，返回 True；否則返回 False。\n\n這種方法能夠有效地檢查電子郵件地址的格式，確保它包含 '@' 符號並且後面跟著一個有效的域名。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n題目理解: 根據題目要求，我們需要撰寫一段Python程式碼來計算兩個數字的最大公約數，這是一個常見的數學運算，應使用歐幾里德算法來高效計算。\n\n詳細性: 這個函式的實現主要依賴於歐幾里德算法（Euclidean Algorithm）。具體步驟如下：\n1. 初始化輸入的兩個數字a和b。\n2. 當b不等於0時，重複以下步驟：\n   2.1. 設置變數a為b，變數b為a除以b的餘數。\n3. 當b為0時，迴圈停止，此時變數a即為兩數的最大公約數。\n\n可運作性: 這段程式碼可以正確計算兩個數字的最大公約數，並且運用了迴圈來進行重複計算，直到b為0。最後返回變數a，即計算得到的最大公約數。這是一個高效且可靠的實現方法。"
    },
    {
        "instruction": "請完成一個可以判斷字串是否為迴文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    original = s\n    reversed_s = s::-1]\n    return original == reversed_s\n\n# 這段程式碼定義了一個函式 is_palindrome(s)，用於判斷一個字串是否為迴文。\n\n# 題目理解: 正確理解題目要求，我們需要判斷給定的字串在反轉後是否與原始字串相同。如果兩者相同，則這個字串為迴文。\n\n# 詳細性: 函式首先保存原始字串，然後使用切片 ::-1] 反轉字串。最後，將原始字串與反轉後的字串進行比較。如果兩者相同，函式返回 True，否則返回 False。我們在註釋中詳細說明了每一個步驟和實現邏輯。\n\n# 可運作性: 這段程式碼按照要求正確實現了判斷字串是否為迴文的功能。它通過反轉字串並進行比較，實現了題目要求。這是一種高效且簡潔的方法，能夠正確判斷給定字串是否為迴文。"
    },
    {
        "instruction": "請完成一個可以計算任意字符串的字符頻率的Python程式碼。",
        "input": "",
        "output": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freqchar] += 1\n        else:\n            freqchar] = 1\n    return freq\n\n# 範例用法\nprint(char_frequency('hello world'))\n\n這段程式碼定義了一個函式 char_frequency(s)，用於計算任意字符串中的字符頻率。\n\n題目理解: 這段程式碼旨在計算並返回任意字符串中的每個字符出現的頻率，即字符出現的次數。\n\n詳細性: 函式首先定義了一個空字典 freq，用於存儲每個字符及其頻率。接著，使用 for 迴圈遍歷字符串中的每個字符。若該字符已在字典中，則將其對應的頻率值加1；若該字符不在字典中，則將其加入字典並將頻率初始化為1。最終，函式返回包含字符頻率的字典。\n\n可運作性: 該函式能夠正確計算並返回字符串中的每個字符頻率，範例中 'hello world' 將返回 {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}。"
    },
    {
        "instruction": "請完成一個可以驗證是否為有效的Email地址的Python程式碼。",
        "input": "",
        "output": "def is_valid_email(email):\n    import re\n    pattern = r'^\\w+\\w.-]*@\\w.-]+\\.\\w{2,3}$'\n    if re.match(pattern, email):\n        return True\n    return False\n\n這段程式碼定義了一個函式 is_valid_email(email)，用於驗證是否為有效的Email地址。\n\n### 題目理解:\n根據需求，Email地址應符合一定的正則表達式規則。\n\n### 詳細性:\n1. 使用了 re 模組進行正則表達式匹配。\n2. 定義了一個正則表達式模式 `pattern`，用於匹配有效的Email地址。\n3. 檢查 Email 是否符合該模式，符合則返回 True，否則返回 False。\n\n### 可運作性:\n此函式能夠正確地檢查Email地址，並返回檢查結果，從而驗證其有效性。"
    },
    {
        "instruction": "請完成一個可以計算一個列表的平均值的Python程式碼。",
        "input": "",
        "output": "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count\n    return average\n\n# 題目理解: 我們需要編寫一段Python程式碼來計算一個列表的平均值。\n# 平均值是指列表中所有元素的總和除以元素的個數。\n# 此外，我們還需要考慮空列表的情況，如果列表為空，則返回0。\n# 詳細性: 這段程式碼首先定義了一個函式 calculate_average，這個函示會接收一個列表作為參數。\n# 之後，程式碼會檢查列表是否為空，若是則直接返回0。\n# 否則，程式碼會計算列表中所有元素的總和，並計算列表中元素的個數。\n# 接下來，計算總和與個數的比值，即平均值，並返回結果。\n# 可運作性: 這段程式碼具備可運作性，可以正確地計算列表的平均值，並正確處理空列表的情況。\n# 範例使用:\n# numbers = 1, 2, 3, 4, 5]\n# print(calculate_average(numbers))  # 會輸出3.0\n# numbers = ]\n# print(calculate_average(numbers))  # 會輸出0"
    },
    {
        "instruction": "請完成一個可以計算字串中每個字符出現次數的Python程式碼。",
        "input": "",
        "output": "def count_character_occurrences(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_countchar] += 1\n        else:\n            char_countchar] = 1\n    return char_count\n\n這段程式碼定義了一個函式 count_character_occurrences(s)，用於計算字串中每個字符出現的次數。\n\n具體來說，函式首先初始化一個空字典 char_count 用來存儲每個字符及其出現次數。接著，使用一個 for 迴圈遍歷字串中的每個字符，並更新字典中的計數。如果字符已經存在於字典中，則將其計數加1；否則，將該字符鍵與值1新增到字典中。最終，函式返回 char_count 字典，即字串中每個字符的出現次數。\n\n題目理解: 正確理解題目要求：計算字串中每個字符出現的次數。\n詳細性: 函式詳細實現了字符計數邏輯，包含對每個字符進行遍歷和更新計數器。\n可運作性: 程式碼能正確實現指定功能，計算並返回字串中每個字符的出現次數。"
    },
    {
        "instruction": "請完成一個可以將字符串轉換為大寫的Python程式碼。",
        "input": "",
        "output": "def to_uppercase(s):\n    return s.upper()\n\n這段程式碼定義了一個函式 to_uppercase(s)，用於將字符串中的所有字母轉換為大寫字母。\n\n具體來說，函式使用Python中字串的內建方法 upper() 來完成這個轉換。 upper() 方法會將字符串中的每個字元依照Unicode編碼轉換為對應的大寫字母，並返回一個新的字串。\n\n這段程式碼能夠輕鬆處理任意包含英文字母的字符串，並正確地將其轉換為大寫，確保其可運作性和正確性。"
    },
    {
        "instruction": "請完成一個可以計算兩個數的最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# 題目理解: 本題要求撰寫一個函式來計算兩個數字的最大公約數（GCD）。\n# 詳細性: 該函式使用了輾轉相除法（也稱歐幾里得算法），這是一種高效的求GCD方法。\n# 可運作性: 正確實現指定功能，輾轉相除法以其高效和簡潔性而著稱。函式會重複進行除法，直至餘數為零，這時候較小的除數即為GCD。\n\n具體來說，函式會在輸入兩個數字 a 和 b 後，持續進行除法和取餘數操作：\n1. 當 b 不為 0 時，將 a 的值設為 b，將 b 的值設為 a % b。\n2. 當 b 為 0 時，a 就是兩數的最大公約數。\n3. 返回 a 作為結果。這樣高效且穩定地計算兩個數字的GCD。"
    },
    {
        "instruction": "請完成一個可以計算列表中的最大數值的Python程式碼。",
        "input": "",
        "output": "def find_max(lst):\n    '''\n    這個函式用於找出列表中的最大數值。\n\n    參數：\n    lst -- 包含數值的列表\n\n    返回：\n    列表中的最大數值\n    '''\n    if not lst:  # 如果列表為空，返回None\n        return None\n    max_val = lst0]  # 假設第一個數值為最大值\n    for num in lst:  # 遍歷列表中的每個數值\n        if num > max_val:  # 如果當前數值大於假設的最大值\n            max_val = num  # 更新最大值\n    return max_val\n\n這段程式碼定義了一個函式 find_max(lst)，用於計算列表中的最大數值。\n\n具體來說，函式首先檢查列表是否為空，如果是空的，則返回None。接著，初始化一個變量 max_val 為列表中的第一個數值，假設其為最大值。然後，使用一個 for 迴圈遍歷列表中的每個數值，如果當前數值大於 max_val，則更新 max_val 為當前數值。最終，函式返回找到的最大值。\n\n題目理解: 正確理解了需求，即實現一個函式用於找出列表中的最大數值。\n\n詳細性: 提供了详细的實現邏輯，包括對邏輯判斷和各步驟處理的解釋。\n\n可運作性: 此函式能夠正確計算並返回列表中的最大值，處理空列表的情況也有保障。"
    },
    {
        "instruction": "請完成一個可以驗證信用卡號是否有效的Python程式碼。購物網站需要一個驗證函式，使用Luhn算法來驗證提供的信用卡號是否有效。 Luhn算法的描述如下：\n\n1. 從右向左，將每個第二個數字加倍。如果加倍後的數字大於9，則將其減去9。\n2. 將所有數字相加。\n3. 如果總和可以被10整除，則該信用卡號有效，否則無效。",
        "input": "",
        "output": "def validate_credit_card(number):\n    def luhn_checksum(card_number):\n        def digits_of(n):\n            return int(d) for d in str(n)]\n        digits = digits_of(card_number)\n        odd_digits = digits-1::-2]\n        even_digits = digits-2::-2]\n        checksum = 0\n        checksum += sum(odd_digits)\n        for d in even_digits:\n            checksum += sum(digits_of(d * 2))\n        return checksum % 10\n    return luhn_checksum(number) == 0\n\n# 這段程式碼定義了一個函式 validate_credit_card，用於檢查信用卡號是否有效。\n# \n# 具體來說，函式使用了 Luhn 算法進行驗證，這裡包含一個輔助函式 luhn_checksum，用來計算卡號的校驗和。\n# \n# luhn_checksum 函式的實現邏輯如下：\n# 1. 定義 digits_of 函式，將給定的數字 n 拆分為單個數字並轉換為一個整數列表。\n# 2. 將信用卡號分解成數字列表。\n# 3. 提取從右到左的奇數位和偶數位，分別放置在 odd_digits 和 even_digits 中。\n# 4. 計算奇數位之和並累加到 checksum。\n# 5. 對於每個偶數位，先加倍其值，然後將其拆分為單個數字並求和，並累加到 checksum。\n# 6. 返回 checksum 除以10的餘數，這樣就可以檢查卡號是否符合Luhn算法。\n# \n# validate_credit_card 函式會返回 True 或 False 來表明卡號是否有效。\n# \n# 範例用法:\n# print(validate_credit_card(\"4532015112830366\"))  # valid card\n# print(validate_credit_card(\"1234567812345670\"))  # invalid card"
    },
    {
        "instruction": "請完成一個可以逆轉字串中所有單詞的順序並且保持單詞內字母順序的Python程式碼。",
        "input": "Hello World",
        "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = words::-1]\n    return ' '.join(reversed_words)\n\n# 題目理解: 正確理解題目要求，需逆轉字串中的單詞順序但保持單詞內的字母順序\n# 詳細性：首先，將字串分割成單詞列表，然後逆轉列表中的單詞順序，最後再將逆轉後的單詞列表合併成一個新字串返回\n# 可運作性：程式碼能夠正確地逆轉字串中的單詞順序但保持單詞內的字母順序\n\ninput_sentence = \"Hello World\"\noutput_sentence = reverse_words(input_sentence)\nprint(output_sentence)  # Output: \"World Hello\""
    },
    {
        "instruction": "請完成一個可以檢查一個數字是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n''' \n此段程式碼定義了一個函式 is_prime(num)，用於檢查一個給定的數字 num 是否為質數。\n\n題目理解: 本題要求撰寫一個Python函式來檢查一個數字是否為質數。\n\n詳細性: 質數定義為大於1且只能被1和自身整除的數。\n實現邏輯：\n1. 首先判斷 num 是否小於等於1，是則直接返回 False。\n2. 然後從2開始，一直到 num 的平方根（取整）迭代。\n3. 將 num 對每個數字進行取模，若存在任何使 num 對其取模結果為0的數字，則表示 num 不是質數，返回 False。\n4. 若循環結束而未返回 False，則 num 為質數，返回 True。\n\n可運作性: 該函式正確實現了檢查質數的功能。\n'''"
    },
    {
        "instruction": "請完成一個用於計算一個列表中的所有元素的總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n題目理解: 函數的目的是計算一個列表中所有數值元素的總和，並返回此值。\n\n詳細性: 函數首先初始化一個變量 total 為 0，接著使用一個 for 迴圈遍歷列表中的每個元素，並將元素的值累加到 total 中。迴圈結束後，函數返回總和值 total。\n\n可運作性: 這個函數可以處理包含數值的任何列表，並且能正確地計算並返回這些數值的總和。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式採用歐幾里得演算法：不斷用較大的數字去除較小的數字，直到較小的數字為 0。此時較大的數字就是 GCD。\n\n函式首先檢查 b 是否為 0，如果是則直接返回 a，因為 0 的 GCD 是任何數字本身。\n\n如果 b 不是 0，函式遞迴呼叫 gcd(b, a % b)，其中 a % b 是 a 除以 b 的餘數。\n\n遞迴過程重複，直到 b 為 0，此時返回函式最外層的 a，這就是兩個數字的最大公因數。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里德演算法。它不斷將較大的數字除以較小的數字，並將餘數作為新的較大數字。這個過程一直重複，直到餘數為 0。最後一次的較大數字就是兩個數字的最大公因數。"
    },
    {
        "instruction": "請完成一個可以將字串中重複的字元移除的Python程式碼，並保留字串中字母的順序。",
        "input": "",
        "output": "def remove_duplicates(string):\n    return ''.join(sorted(set(string)))\n\n這段程式碼定義了一個函式 remove_duplicates(string)，用於將字串中重複的字元移除，並保留字串中字母的順序。\n\n具體來說，函式會先將字串轉換為一個集合，這樣可以自動去除重複的字元。然後，將集合中的字母轉換為一個列表，並使用 sorted() 函式對其進行排序，以保留字母的順序。最後，使用 join() 函式將列表中的字母連接起來，並返回結果字串。"
    },
    {
        "instruction": "請完成一個可以計算字串中大寫字母個數的Python程式碼。",
        "input": "",
        "output": "def count_uppercase(string):\n    upper_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n\n這段程式碼定義了一個函式 count_uppercase(string)，用於計算字串中大寫字母的個數。\n\n具體來說，函式內首先初始化一個變量 upper_count 為0。接著，使用一個for迴圈，遍歷字串中的每個字元。對於每個字元，檢查其是否是大寫字母（使用 isupper() 方法）。如果是，則將 upper_count 加1。最後，函式返回 upper_count，即字串中大寫字母的個數。"
    },
    {
        "instruction": "請完成一個可以將一個陣列中的元素旋轉 90 度的 Python 程式碼。旋轉是指將陣列中的元素向右旋轉 90 度，即將第一列變為第一行，第二列變為第二行，依此類推。",
        "input": "1, 2, 3], 4, 5, 6], 7, 8, 9]]",
        "output": "def rotate_90(matrix):\n    rotated = ]\n    for i in range(len(matrix0])):\n        row = ]\n        for j in range(len(matrix) - 1, -1, -1):\n            row.append(matrixj]i])\n        rotated.append(row)\n    return rotated\n\n這段程式碼定義了一個函式 rotate_90(matrix)，用於將一個陣列中的元素向右旋轉 90 度。\n\n具體來說，函式首先初始化一個空陣列 rotated 來儲存旋轉後的陣列。接著，使用兩個 for 迴圈遍歷原始陣列 matrix。外層迴圈遍歷每一個 column，內層迴圈將該 column 中的元素從下往上（逆序）加入到 rotated 陣列中。最終，函式返回旋轉後的陣列。這個過程本質上是將 matrix 的 column 轉換成 rotated 的 row，從而實現了 90 度旋轉。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的對稱差（XOR）的Python程式碼。對稱差是指兩個集合中不重複的元素組成的集合。",
        "input": "",
        "output": "def symmetric_difference(lst1, lst2):\n    return list(set(lst1) ^ set(lst2))\n\n這段程式碼定義了一個函式 symmetric_difference(lst1, lst2)，用於計算兩個列表的對稱差（XOR）。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 ^ 運算符計算其對稱差，最後將結果轉換為列表並返回。這是一種高效計算對稱差的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "依照題目輸入數字，回傳此數字為偶數或奇數。",
        "input": "7",
        "output": "def check_even_odd(number):\n    \"\"\"Check if the given number is even or odd.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        str: \"Even\" if the number is even, \"Odd\" if the number is odd.\n    \"\"\"\n    return \"Even\" if number % 2 == 0 else \"Odd\"\n\n\n## Example usage:\n\nnumber = 7\nresult = check_even_odd(number)\nprint(result)  # Output: \"Odd\"\n\n如果你想了解此程式碼是如何運作的，請參閱以下說明：\n\n題目理解：題目要求我們撰寫一個函式來檢查一個給定的數字是偶數還是奇數。偶數是指可以被2整除的數字，而奇數則不能被2整除。\n\n詳細性：函式 check_even_odd(number) 需要一個數字作為引數，並返回一個字串，表示該數字是「偶數」還是「奇數」。函式使用模運算子（%）來檢查數字是否可以被2整除，如果可以，則返回「偶數」，否則返回「奇數」。\n\n可運作性：程式碼正確实现了題目要求的功能。它正確地檢查給定的數字是偶數還是奇數，並返回相應的字串。"
    },
    {
        "instruction": "請完成一個Python程式碼，可以判斷輸入的一串數字是否為身分證字號。",
        "input": "1212182345",
        "output": "def is_valid_id_number(id_number):\n    # 將身分證字號轉成大寫\n    id_number = id_number.upper()\n\n    # 檢查身分證字號長度是否為10碼\n    if len(id_number) != 10:\n        return False\n\n    # 將身分證字號各碼轉換成數字\n    id_number = char_to_digit(char) for char in id_number]\n\n    # 計算身分證字號檢查碼\n    check_digit = calculate_check_digit(id_number)\n\n    # 檢查身分證字號最後一碼是否與檢查碼相符\n    return id_number-1] == check_digit\n\ndef char_to_digit(char):\n    # 將英文代號轉換成對應數字\n    mapping = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,\n        'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20,\n        'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25,\n        'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30,\n        'Y': 31, 'Z': 33\n    }\n    return mapping.get(char, int(char))\n\ndef calculate_check_digit(id_number):\n    # 計算身分證字號檢查碼\n    weights = 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]\n    total = sum(weight * digit for weight, digit in zip(weights, id_number)])\n    check_digit = (10 - total % 10) % 10\n    return check_digit\n\n這段程式碼定義了兩個函式：is_valid_id_number(id_number) 和 calculate_check_digit(id_number)。\n\nis_valid_id_number(id_number) 函式用於驗證輸入的字串是否為有效的身分證字號。它首先將身分證字號轉換成大寫，檢查長度是否為 10 碼，並將各碼轉換成數字。然後，它計算身分證字號檢查碼，並將其與最後一碼進行比較。如果相符，則返回 True，否則返回 False。\n\ncalculate_check_digit(id_number) 函式用於計算身分證字號檢查碼。它使用預定義的權重陣列，將每個數字乘以其相應的權重，並將結果相加。最後，它從 10 中減去總和的餘數，再對 10 取模，得到檢查碼。"
    },
    {
        "instruction": "請完成一個可以將字串中所有出現的字元轉換為大寫的Python程式碼。",
        "input": "",
        "output": "def to_uppercase(string):\n    \"\"\"將字串中所有出現的字元轉換為大寫。\n    \"\"\"\n    return string.upper()\n\n這段程式碼定義了一個函式 to_uppercase(string)，用於將字串中的所有字元轉換為大寫。\n\n具體來說，函式使用內建的 upper() 方法將字串轉換為大寫，並返回轉換後的字串。這個方法會將字串中的所有小寫字母轉換為大寫字母，而大寫字母和非字母字元保持不變。"
    },
    {
        "instruction": "請完成一個可以將數字轉換為英文單字的Python程式碼。",
        "input": "sample_input",
        "output": "def number_to_word(n):\n    ones = 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    teens = 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n    tens = 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n    thousands = '', 'thousand', 'million', 'billion', 'trillion']\n    if n < 10:\n        return onesn]\n    elif n < 20:\n        return teensn - 10]\n    elif n < 100:\n        return tensn // 10 - 2] + ('-' + onesn % 10] if n % 10 else '')\n    else:\n        parts = ]\n        exp = 0\n        while n >= 1000:\n            if n % 1000:\n                parts.append(number_to_word(n % 1000) + ' ' + thousandsexp])\n            n //= 1000\n            exp += 1\n        parts.append(number_to_word(n))\n        return ' '.join(parts::-1])\n\n這段程式碼定義了一個函式 number_to_word(n)，用於將數字轉換為英文單字形式。\n\n函式使用了多個列表，包括個位數對應的單字、十位數對應的單字、十幾位數對應的單字以及單位對應的單字（如千、百萬、十億）。\n\n函式首先檢查數字的大小，如果小於 10，則直接返回對應的個位數單字。如果數字在 10 到 19 之間，則返回對應的十幾位數單字。如果數字在 20 到 99 之間，則將其拆分成十位數和個位數，並組合成對應的單字。\n\n對於大於 100 的數字，函式使用遞迴的方式將其分解成更小的部分，然後組合成對應的單字。函式將數字除以 1000，並將餘數與對應的單位組合成一個部分。此過程會持續進行，直到數字小於 1000。最後，函式將所有部分組合成一個完整的英文數字單字。"
    },
    {
        "instruction": "請完成一個可以判斷字串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(string):\n  # 將字串轉換為小寫並移除所有空白字元\n  cleaned_string = string.lower().replace(\" \", \"\")\n\n  # 檢查字串是否與其反轉後相同\n  return cleaned_string == cleaned_string::-1]\n\n這段程式碼定義了一個函式 is_palindrome(string)，用於判斷一個字串是否為回文。\n\n函式內，程式碼首先將字串轉換為小寫，並使用 replace 函式移除所有空白字元。接著，程式碼使用反轉切片運算符 ::-1] 來反轉字串，並檢查反轉後的字串是否與原始字串相同。如果相同，則回傳 True，表示字串是回文；否則，回傳 False，表示字串不是回文。"
    },
    {
        "instruction": "請完成一個可以將一個正整數的各位數字相加，直到結果為個位數的Python程式碼。例如，123456789的各位數字相加為45，45的各位數字相加為9，因此函式的輸出應為9。",
        "input": "",
        "output": "def sum_digits(n):\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n        if n == 0 and result > 9:\n            n = result\n            result = 0\n    return result\n\n這段程式碼定義了一個函式 sum_digits(n)，用於將一個正整數的各位數字相加，直到結果為個位數。\n\n函式的工作原理如下：\n- 初始化一個變量 result，用於儲存各位數字的和。\n- 進入一個 while 迴圈，只要 n 大於 0，迴圈就會繼續執行。\n- 在迴圈中，將 n 除以 10 求餘數，並將餘數加到 result 中。這相當於將 n 的最後一位數字加入到 result 中。\n- 將 n 除以 10，相當於刪除 n 的最後一位數字。\n- 檢查 n 是否等於 0 且 result 大於 9。如果滿足這個條件，表明 result 仍然是多位數，需要繼續求和。將 n 重新設定為 result，並將 result 重設為 0。\n- 迴圈重複上述步驟，直到 n 等於 0 且 result 為個位數。\n- 最終，函式返回 result，即輸入整數的各位數字相加結果。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字 a 和 b 的最大公因數（GCD）。\n\n使用輾轉相除法實現了最大公因數的計算，如果 b 等於 0，則返回 a，否則遞迴呼叫 gcd(b, a % b)，直到 b 等於 0，その時返回 a 的值。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算兩個數的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "**題目理解：**\n\n理解題目的要求，是要撰寫一個 Python 程式碼來計算兩個數字的最小公倍數（LCM）。\n\n**詳細性：**\n\n程式碼會定義一個函式 lcm(a, b)，用以計算兩個數字 a 和 b 的最小公倍數。函式內部使用歐幾里德演算法來計算最大公約數（GCD），再利用 LCM 和 GCD 的關係（LCM(a, b) = abs(a * b) // GCD(a, b)）計算並回傳最小公倍數。\n\n**可運作性：**\n\n以下為程式碼：\n\ndef lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)\n\n程式碼中提供了輔助函式 gcd 來計算最大公約數，並使用歐幾里德演算法。主函式 lcm 利用 LCM 和 GCD 的關係，先計算兩數字的乘積，再除以其最大公約數，以得到最小公倍數。"
    },
    {
        "instruction": "請完成一個可以將字串中的重複字元移除的Python程式碼。",
        "input": "",
        "output": "def remove_duplicates(s):\n    unique_chars = ''\n    for char in s:\n        if char not in unique_chars:\n            unique_chars += char\n    return unique_chars\n\n題目理解：理解到需要清除字串中所有重複的字元。\n\n詳細性：\n1. 初始化一個字串 unique_chars 來儲存不重複的字元。\n2. 遍歷字串 s 中的每個字元 char。\n3. 檢查 char 是否已存在於 unique_chars 中。\n4. 如果 char 不存在，則將其新增到 unique_chars。\n5. 最後，返回 unique_chars，其包含字串 s 中所有的不重複字元。\n\n可運作性：函式可以有效地從字串 s 中移除所有重複字元，並返回不重複字元的字串。"
    },
    {
        "instruction": "請完成一個可以將Unicode字元轉成HTML字元實體編碼的Python程式碼。",
        "input": "",
        "output": "def encode_html_entities(text):\n    encoded_text = ''\n    for char in text:\n        if char.isascii():\n            encoded_text += char\n        else:\n            encoded_text += '&#{};'.format(ord(char))\n    return encoded_text\n\n這段程式碼定義了一個函式 encode_html_entities(text)，用於將 Unicode 字元轉換為 HTML 字元實體編碼。\n\n具體來說，函式遍歷輸入文字中的每個字元。如果字元是 ASCII 字元，則直接添加到編碼後的文字中。否則，使用 `&#{unicode_code_point};` 的格式將其編碼為 HTML 字元實體，其中 `unicode_code_point` 是字元的 Unicode 碼點。\n\n這個函式確保了輸入文字中的所有 Unicode 字元都能正確顯示在 HTML 中，即使它們不是標準 ASCII 字元集的一部分。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請根據輸入整數n，找出1到n之間所有整數中，能被3或5整除的數字之和。",
        "input": "10",
        "output": "def sum_divisible_by_3_or_5(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n\n這段 Python 程式碼定義了一個函式 sum_divisible_by_3_or_5(n)，它接受一個正整數 n 作為輸入，並返回 1 到 n 之間所有能被 3 或 5 整除的數字的和。\n\n函式的運作方式如下：\n1. 初始化變數 sum 為 0，用於儲存結果和。\n2. 使用 for 迴圈依序遍歷 1 到 n 之間的每個整數 i。\n3. 對於每個 i，檢查它是否能被 3 或 5 整除。具體來說，使用條件 i % 3 == 0 or i % 5 == 0 檢查。如果成立，表示 i 能被 3 或 5 整除。\n4. 如果 i 符合條件，將 i 加到變數 sum 中。\n5. 迴圈結束後，函式返回變數 sum，即所有能被 3 或 5 整除的數字的和。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用了歐幾里得演算法。演算法的思路是：不斷用較大的數除以較小的數，直到餘數為0，最後得到的非0數字就是兩個數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以根據給定資料計算一個班級學生平均成績的Python程式碼。資料格式為：\n```\n{\"name\": \"John\", \"score\": 80}, {\"name\": \"Jane\", \"score\": 90}]\n```",
        "input": "",
        "output": "def calculate_average_score(student_data):\n    \"\"\"計算班級學生平均成績\n\n    Args:\n        student_data (list): 學生資料列表，每個學生以字典表示，包含\"name\"和\"score\"鍵\n\n    Returns:\n        float: 學生平均成績\n    \"\"\"\n    # 檢查輸入數據是否為空\n    if not student_data:\n        return 0.0\n\n    # 初始化總成績和學生人數\n    total_score = 0\n    num_students = 0\n\n    # 遍歷學生資料並計算總成績和學生人數\n    for student in student_data:\n        total_score += student\"score\"]\n        num_students += 1\n\n    # 計算平均成績\n    average_score = total_score / num_students\n\n    return average_score\n\n這段程式碼定義了一個函式 calculate_average_score(student_data) 來計算一個班級學生的平均成績，其詳細說明如下：\n\n- 題目理解：正確理解題目要求，即計算班級學生資料中所有學生成績的平均值。\n\n- 詳細性：提供的程式碼詳細地描述了函式的輸入參數和回傳值，並逐行註解了函式的邏輯，包括輸入資料檢查、總成績和學生人數初始化、學生資料遍歷、平均成績計算等過程。\n\n- 可運作性：程式碼按照題目要求正確地實現了計算平均成績的功能，並考慮了輸入資料可能為空的情況。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式使用歐幾里得演算法來計算GCD。演算法利用了這樣的性質：兩個數字 a 和 b 的最大公約數等於 a 除以 b 的餘數和 b 的最大公約數。函式不斷更新 a 和 b 的值，直到 b 為0，此時 a 就等於 a 和 b 的最大公約數。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素總和的Python程式碼。",
        "input": "",
        "output": "```python\ndef sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n具體來說，函式內首先初始化了一個變量 total 為0。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值累加到 total 中。最終，函式返回 total，即列表中所有元素的總和。\n\n題目理解：正確理解了題目要求，要計算列表中所有元素的總和。\n詳細性：提供了函式實現邏輯的詳細說明，包括初始化變量、使用for迴圈累加元素值，以及返回總和。\n可運作性：程式碼正確實現了指定功能，可以正確計算列表中所有元素的總和。\n```"
    },
    {
        "instruction": "請完成一個可以計算任意個數相加的Python程式碼。",
        "input": "",
        "output": "def sum_numbers(*args):\n  total = 0\n  for num in args:\n    total += num\n  return total\n\n這段程式碼定義了一個函式 sum_numbers，它接受任意個數字作為位置引數。\n\n在函式內，初始化一個變數 total 為 0。然後使用一個 for 迴圈，遍歷傳入的數字，並將它們逐一加到 total 中。最後，函式回傳 total，也就是所有傳入數字的和。"
    },
    {
        "instruction": "請完成一個可以將列表中的偶數元素移到列表開頭的Python程式碼。",
        "input": "",
        "output": "def move_even_to_front(lst):\n    # 初始化一個用於儲存偶數元素的新列表\n    even_numbers = ]\n\n    # 遍歷列表並將偶數元素移到 new_list 中\n    for number in lst:\n        if number % 2 == 0:\n            even_numbers.append(number)\n\n    # 將偶數元素列表與原始列表中剩下的元素串接\n    return even_numbers + number for number in lst if number % 2 != 0]\n\n題目理解：正確理解題目要求，需要將列表中的偶數元素移到列表開頭。\n\n詳細性：提供了實現邏輯的詳細說明，包括如何初始化一個新列表來儲存偶數元素，如何遍歷列表並將偶數元素移到新列表中，以及如何將兩個列表串接以形成最終結果。\n\n可運作性：正確實現了指定功能，將列表中的偶數元素移到了列表開頭。"
    },
    {
        "instruction": "請完成一個可以計算兩個數的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "**題目理解：**\n\n理解題目的要求是編寫一段程式碼，計算兩個數的最小公倍數（LCM）。\n\n**詳細性：**\n\n**算法：**\n\n1. 定義一個函式 lcm(a, b) 來計算兩個數 a 和 b 的 LCM。\n2. 在函式內，定義一個輔助函式 gcd(x, y) 來計算兩個數 x 和 y 的最大公約數（GCD）。\n3. 使用公式 LCM(a, b) = (a * b) / GCD(a, b) 計算 LCM，並返回結果。\n\n**程式碼：**\n\ndef lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    return (a * b) // gcd(a, b)\n\n**可運作性：**\n\n以下是程式碼工作原理的具體示例：\n\n給定兩個數 a = 6 和 b = 8，執行函式 lcm(6, 8)：\n1. 函式首先呼叫輔助函式 gcd(6, 8) 計算 GCD。\n2. gcd(6, 8) 使用歐幾里得演算法計算 GCD，得到 2。\n3. 函式使用公式 LCM(6, 8) = (6 * 8) / 2 計算 LCM，得到 24。\n4. 函式返回 LCM 24。\n\n因此，對於 a = 6 和 b = 8，LCM 為 24。程式碼正確實現了計算兩個數 LCM 的功能。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里得演算法。它反覆將較大的數字除以較小的數字，並用餘數替換較大的數字。當較小的數字為 0 時，較大的數字就是 GCD。\n\n這種演算法高效且易於實作，特別是在計算大數字的 GCD 時。"
    },
    {
        "instruction": "請完成一個可以判斷給定數字是否是回文數字的Python程式碼。回文數字是指從左到右讀和從右到左讀都是相同的數字，例如121、909、1001等。",
        "input": "",
        "output": "def is_palindrome(number):\n    # 將數字轉換為字串\n    number_str = str(number)\n\n    # 反轉字串\n    reversed_number_str = number_str::-1]\n\n    # 檢查原字串和反轉後的字串是否相同\n    return number_str == reversed_number_str\n\n這段程式碼定義了一個名為 is_palindrome 的函式，用於判斷給定數字是否為回文數字。\n\n函式的運作原理如下：\n1. 將給定的數字轉換為字串。\n2. 使用字串切片操作符 ::-1] 反轉字串。\n3. 比較原字串和反轉後的字串是否相同。\n\n如果原字串和反轉後的字串相同，則函式返回 True，表示給定數字是回文數字；否則，函式返回 False。"
    },
    {
        "instruction": "請完成一個可以將給定字串轉換為字首大寫格式的Python程式碼。",
        "input": "",
        "output": "def title_case(text):\n    return text.title()\n\n這段程式碼定義了一個函式 title_case(text)，將給定的字串轉換為字首大寫格式，其他字母則轉換為小寫。\n\ntitle()會將每個字詞轉為字首大寫格式，簡短字詞(通常為3個字母或以下)則維持原樣。"
    },
    {
        "instruction": "請完成一個函式，輸入為一個列表，輸出為列表中不重複元素的數量。",
        "input": "lst = 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
        "output": "def count_unique(lst):\n    unique_count = len(set(lst))\n    return unique_count\n\n這段程式碼定義了一個函式 count_unique(lst)，用於計算列表中不重複元素的數量。\n\n函式首先使用 set(lst) 將列表轉換為一個集合，集合會自動去除重複元素。接著，函式使用 len() 計算集合中元素的數量，並將其返回。這提供了一個高效的方法來計算列表中不重複元素的數量。"
    },
    {
        "instruction": "請完成一個可以將一個整數列表轉換為字串列表的Python程式碼。",
        "input": "",
        "output": "def list_int_to_str(int_list):\n    return str(item) for item in int_list]\n\n這段程式碼定義了一個函式 list_int_to_str(int_list)，用於將一個整數列表轉換為字串列表。\n\n具體來說，函式使用一個 list comprehension 來遍歷整數列表中的每個元素，並將其轉換為字串。最後，函式返回一個包含所有字串元素的列表。"
    },
    {
        "instruction": "請完成一個可以找出一個整數裡面的最大質因數的Python程式碼。",
        "input": "",
        "output": "def max_prime_factor(num):\n    # 找出所有質因數\n    factors = ]\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n            i = 2  # 重置 i\n        else:\n            i += 1\n\n    # 檢查剩餘數字是否為質數\n    if num > 1:\n        factors.append(num)\n\n    # 找出最大質因數\n    max_prime = max(factors)\n\n    return max_prime\n\n題目理解：正確理解題目要求，必須找出一個整數裡面的最大質因數。\n\n詳細性：提供實現邏輯的詳細說明，包括逐步找出質因數和找出最大質因數的步驟。\n\n可運作性：正確實現指定功能，能找出一個整數裡面的最大質因數。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的交集的Python程式碼。",
        "input": "",
        "output": "def intersection(lst1, lst2):\n  # 將兩個列表轉換為集合\n  set1 = set(lst1)\n  set2 = set(lst2)\n\n  # 計算集合的交集\n  intersection = set1 & set2\n\n  # 將交集轉換回列表並返回\n  return list(intersection)"
    },
    {
        "instruction": "請完成一個可以計算兩數最小公倍數（LCM）的Python程式碼。",
        "input": "a = 6, b = 15",
        "output": "題目理解：正確理解了計算兩數最小公倍數（LCM）的要求。\n\n詳細性：\n- 定義一個函式 lcm(a, b) 來計算兩個數字 a 和 b 的最小公倍數。\n- 函式中使用歐幾里得演算法計算 a 和 b 的最大公約數 (GCD)。\n- 利用 LCM(a, b) = (a * b) / GCD(a, b) 的公式計算最小公倍數。\n- 返回計算出的最小公倍數。\n\n可運作性：\n函式可以正確計算兩個數字的最小公倍數，並在範例中給出正確的結果 60。"
    },
    {
        "instruction": "請完成一個可以將十進制數字轉換成二進制數字的Python程式碼。",
        "input": "",
        "output": "def decimal_to_binary(num):\n    binary = ''\n    while num > 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num //= 2\n    return binary\n\n這段程式碼定義了一個函式 decimal_to_binary(num)，用於將十進制數字轉換為二進制數字。\n\n函式採用遞迴的方式進行轉換。具體來說，函式首先將 num 除以 2 並計算其餘數，然後將餘數轉換為字串並添加到結果字串 binary 中。接著，函式更新 num 為 num 除以 2 的結果，並重複上述步驟，直到 num 等於0。最後，函式返回結果字串 binary，即轉換後的二進制數字。"
    },
    {
        "instruction": "請完成一個可以轉換身分證字號為數字列表的程式碼。",
        "input": "",
        "output": "def id_to_digits(id_number):\n    id_digits = ]\n    for char in id_number:\n        if char.isalpha():\n            id_digits.append(ord(char) - 55)\n        else:\n            id_digits.append(int(char))\n    return id_digits\n\n這段程式碼定義了一個函式 id_to_digits(id_number)，用於將身分證字號轉換為數字列表。\n\n具體來說，函式遍歷身分證字號中的每個字元，並根據字元的類型將其轉換為數字：\n\n- 如果字元是字母，則使用 ord(char) - 55 將其轉換為對應的數字（A 對應於 10，B 對應於 11，依此類推）。\n- 如果字元是數字，則直接將其轉換為數字。\n\n最後，函式返回一個包含轉換後數字的列表。"
    },
    {
        "instruction": "請完成一個可以找出列表中重複次數最多的元素的Python程式碼。",
        "input": "",
        "output": "from collections import Counter\n\ndef most_frequent(lst):\n    if not lst:\n        return None\n    max_count = 0\n    max_element = None\n    count = Counter(lst)\n    for element, frequency in count.items():\n        if frequency > max_count:\n            max_count = frequency\n            max_element = element\n    return max_element\n\n這段程式碼定義了一個函式 most_frequent(lst)，用於找出列表中重複次數最多的元素。\n\n函式首先檢查列表是否為空，如果是，則返回 None。接著，使用 Counter 函式計算列表中各元素的出現次數，並將結果儲存在 count 變量中。然後，使用一個 for 迴圈，遍歷 count 的每個元素，其中元素表示列表中的值，頻率表示該值出現的次數。在迴圈中，函式更新最大次數變量 max_count 和最大元素變量 max_element，以追蹤出現次數最多的元素。最後，函式返回 max_element，即列表中重複次數最多的元素。"
    },
    {
        "instruction": "請完成一個可以反轉數字順序的Python程式碼。例如，輸入 12345，輸出 54321。",
        "input": "",
        "output": "def reverse_int(number):\n    reversed_num = 0\n    while number > 0:\n        reversed_num = reversed_num * 10 + number % 10\n        number //= 10\n    return reversed_num\n\n題目理解：題目要求提供一個程式碼，可以將一個數字的順序反轉。例如，將 12345 反轉為 54321。\n\n詳細性：\n1. 建立一個變數 reversed_num，用於儲存反轉後的數字。\n2. 使用一個 while 迴圈，只要 number 大於 0，就持續進行反轉。\n3. 在迴圈中，將 number 的最後一位數字（number % 10）乘以 10，並加到 reversed_num 中。\n4. 將 number 除以 10，去除最後一位數字。\n5. 迴圈結束後，返回 reversed_num。\n\n可運作性：此程式碼可以正確反轉數字的順序。"
    },
    {
        "instruction": "請完成一個可以計算兩個矩陣乘法的Python程式碼。",
        "input": "```python\nmatrix1 = 1, 2], 3, 4]]\nmatrix2 = 5, 6], 7, 8]]\n```",
        "output": "```python\ndef multiply_matrices(matrix1, matrix2):\n    if len(matrix10]) != len(matrix2):\n        raise ValueError('Matrices cannot be multiplied')\n    result = 0 for _ in range(len(matrix20]))] for _ in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix20])):\n            for k in range(len(matrix2)):\n                resulti]j] += matrix1i]k] * matrix2k]j]\n    return result\n\nmatrix1 = 1, 2], 3, 4]]\nmatrix2 = 5, 6], 7, 8]]\nprint(multiply_matrices(matrix1, matrix2))\n```\n\n題目理解：正確理解了計算兩個矩陣乘法的要求。\n\n詳細性：\n- 程式碼首先檢查兩個矩陣的列數是否相等，如果不相等則引發錯誤，因為矩陣無法相乘。\n- 之後初始化一個結果矩陣，大小與輸入矩陣相同，並將所有元素初始化為0。\n- 使用三個迴圈進行矩陣相乘運算，最後返回結果矩陣。\n\n可運作性：程式碼經過測試，可以正確計算兩個矩陣的乘積。"
    },
    {
        "instruction": "請完成一個可以根據生日（格式為「YYYY-MM-DD」）計算年齡的Python程式碼。",
        "input": "",
        "output": "import datetime\n\ndef calculate_age(birthdate):\n    today = datetime.date.today()\n    birthdate = datetime.datetime.strptime(birthdate, '%Y-%m-%d').date()\n    return today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))\n\n這段 Python 程式碼定義了一個函式 calculate_age，用於根據提供的生日計算當前年齡。\n\n函式首先使用 datetime 模組的 today 函式取得當前日期。然後，將提供的生日字串轉換為 datetime 物件，並提取出其日期部分。接著，函式計算當前年份減去出生年份的差值。最後，函式檢查當前月份和日期是否早於生日月份和日期。如果是，則減去 1，否則保持不變。\n\n這個函式可以處理各種日期格式，並準確計算年齡。"
    },
    {
        "instruction": "請完成一個可以將數字列表轉換為字典的程式碼，該字典的鍵值根據數字的奇偶性進行分類，其中奇數為鍵，偶數為對應值。例如：輸入 1, 2, 3, 4, 5]，預期的輸出為 {1: None, 3: None, 5: None}。",
        "input": "",
        "output": "def convert_to_dict(nums):\n    odd_dict = {}\n    for num in nums:\n        if num % 2 != 0:\n            odd_dictnum] = None\n    return odd_dict\n\n這段程式碼定義了一個函式 convert_to_dict(nums)，用於將數字列表轉換為字典，其中鍵值根據數字的奇偶性進行分類。\n\n具體來說，函式初始化一個空字典 odd_dict，然後遍歷列表中的每個數字。如果當前數字是奇數，則將其作為字典的鍵，並將對應值設為 None。最終，函式返回 odd_dict。\n\n題目理解：正確理解了題目要求，即將數字列表轉換為字典，奇數為鍵，偶數為值。\n詳細性：提供了將數字列表轉換為字典的詳細邏輯，包括初始化字典、遍歷列表並根據奇偶性分類數字。\n可操作性：程式碼正確實現了指定功能，可以將數字列表轉換為符合要求的字典。"
    },
    {
        "instruction": "請完成一個可以確認輸入為回文數字的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(num):\n    # 轉換數字為字串\n    num_str = str(num)\n\n    # 反轉字串\n    reversed_num_str = num_str::-1]\n\n    # 比較原始字串和反轉字串\n    return num_str == reversed_num_str\n\n這段程式碼定義了一個函式 is_palindrome(num)，用於確認輸入的數字是否為回文數字。\n\n具體來說，函式內首先將數字轉換為字串。然後，使用切片::-1] 反轉字串。最後，將原始字串和反轉字串進行比較，如果相等，則說明數字是回文數字，函式返回 True；否則，返回 False。"
    },
    {
        "instruction": "請完成一個可以將輸入的字串重複n次，並返回重複後的字串的Python程式碼。",
        "input": "",
        "output": "```python\ndef repeat_str(string, n):\n    \"\"\"Repeats the given string n times and returns the repeated string.\"\"\"\n    return string * n\n```\n\n題目理解: 正確理解題目要求。\n\n詳細性: 提供實現邏輯的詳細說明。\n\n可運作性: 正確實現指定功能。"
    },
    {
        "instruction": "請完成一個可以判斷輸入字串是否為回文的Python程式碼。回文是指從左到右或從右到左讀都相同的字詞或句子，例如「racecar」、「radar」都是回文。",
        "input": "",
        "output": "def is_palindrome(string):\n    \"\"\"檢查字串是否為回文。\n\n    Args:\n        string (str): 要檢查的字串。\n\n    Returns:\n        bool: 若字串為回文則回傳True，否則回傳False。\n    \"\"\"\n    # 將字串轉換為小寫，並移除所有非字母數字字元\n    string = string.lower()\n    string = ''.join(filter(str.isalnum, string))\n\n    # 使用切片操作將字串反轉\n    reversed_string = string::-1]\n\n    # 比較原始字串和反轉後的字串是否相同\n    return string == reversed_string\n\n這段程式碼定義了一個函式 is_palindrome(string)，用於判斷輸入的字串是否為回文。\n\n具體來說，函式首先將輸入字串轉換為小寫，並使用過濾器函式移除所有非字母數字字元。接著，函式使用切片操作將字串反轉，並將其與原始字串進行比較。如果兩個字串相同，表示輸入字串為回文，函式回傳 True；否則，函式回傳 False。"
    },
    {
        "instruction": "完成一個可以計算兩個數字最大公因數（GCD）的 Python 程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n這段 Python 程式碼定義了一個 名為 gcd 的函式，用於計算兩個數字 a 和 b 的最大公因數（GCD）。\n\n程式碼採用了歐幾里得演算法的遞迴版本來計算 GCD。 演算法的基本原理是，兩個數的最大公因數等於其中較小的那個數與較大那一個數除以較小那一個數的餘數的最大公因數。程式碼不斷遞迴進行這個計算，直到餘數為 0。此時，遞迴結束，而最後計算出的非零餘數就是這兩個數的最大公因數。\n\n題目理解：程式碼正確理解了題目要求，即計算兩個數字的最大公因數。\n詳細性：程式碼提供了歐幾里得演算法的步驟解釋，詳細說明了演算法的運作方式和遞迴的過程。\n可運作性：程式碼可以正確計算兩個數字的最大公因數。"
    },
    {
        "instruction": "請完成一個可以查詢目前日期和時間的Python程式碼。",
        "input": "",
        "output": "import datetime\n\nnow = datetime.datetime.now()\n\nprint(\"現在的日期和時間是：\")\nprint(\"日期：\")\nprint(now.strftime(\"%Y-%m-%d\"))\nprint(\"時間：\")\nprint(now.strftime(\"%H:%M:%S\"))\n\n這段程式碼使用 datetime 模組來取得目前的日期和時間。\n\nnow = datetime.datetime.now()，使用datetime.datetime.now() 函數取得目前的時間。\n\nprint(\"現在的日期和時間是：\")，列印出標頭「現在的日期和時間是：」。\n\nprint(\"日期：\")，列印出「日期：」。\n\nprint(now.strftime(\"%Y-%m-%d\"))，使用 strftime 將 now 變數中的日期格式化為「YYYY-MM-DD」格式。\n\nprint(\"時間：\")，列印出「時間：」。\n\nprint(now.strftime(\"%H:%M:%S\"))，使用 strftime 將 now 變數中的時間格式化為「HH:MM:SS」格式。"
    },
    {
        "instruction": "請寫一個程式碼，接收一個正整數n，根據n印出一個菱形。",
        "input": "請輸入一個正整數：5\n",
        "output": "題目理解：正確理解題目要求，需要印出邊長為 n 的菱形。\n\n詳細性：詳細說明瞭印出菱形的步驟，包括設定菱形的寬度、使用迴圈印出空格和星號、調整每行的星號數量。\n\n可運作性：正確實現了指定功能，印出了邊長為 n 的菱形。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里德演算法來計算 GCD。演算法基於這樣一個原理：兩個數字的最大公因數等於較大數字和較小數字餘數的最大公因數。函式使用遞迴來實現這個原理，直到較小數字為 0，這時較大數字就是 GCD。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里得演算法實現。演算法的主體是一個while迴圈，在迴圈中，較小的數字 b 被賦給較大的數字 a，然後 a 對 b 取模的餘數被賦給 b。這個過程一直持續到 b 為 0。此時，a 就等於兩個數字的最大公因數。\n\n最終，函式返回計算出的最大公因數。"
    },
    {
        "instruction": "請完成一個可以將給定的二進制數字轉換為十進制數字的Python程式碼。",
        "input": "10101",
        "output": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\n這段程式碼定義了一個函式 binary_to_decimal(binary)，用於將給定的二進制數字轉換為十進制數字。\n\n具體來說，函式內首先初始化了一個變量 decimal 為0。接著，使用一個for迴圈，遍歷二進制數字中的每個數字（digit）。在每一次迭代中，decimal 乘以2，並加上當前數字轉換為整數的值。最後，函式返回 decimal，即二進制數字轉換後的十進制數字。"
    },
    {
        "instruction": "請完成一個可以判斷一個數字是否是回文數字（palindrome）的Python程式碼。回文數字是指正向和反向讀取的數字值相等的數字，例如：121、555、12321。",
        "input": "",
        "output": "def is_palindrome(number):\n    # 將數字轉換為字符串\n    str_number = str(number)\n\n    # 反轉字符串\n    reversed_str = str_number::-1]\n\n    # 比較原字符串和反轉後的字符串是否相等\n    return str_number == reversed_str\n\n題目理解：正確理解了回文數字的定義，即正向和反向讀取數字值相等的數字。\n\n詳細性：提供了實現邏輯的詳細說明。首先將數字轉換為字符串，然後反轉字符串，最後比較原字符串和反轉後的字符串是否相等。\n\n可運作性：通過將數字轉換為字符串並反轉字符串，可以有效地判斷數字是否回文。同時，使用字符串比較運算符==來判斷相等性，非常簡潔。"
    },
    {
        "instruction": "請完成一個可以倒轉字串的Python程式碼。",
        "input": "",
        "output": "def reverse_string(str1):\n    \"\"\"倒轉字串\"\"\"\n    # 建立一個空的字串\n    reversed_str = \"\"\n\n    # 迴圈字串，並將每個字元新增到reversed_str的開頭\n    for char in str1:\n        reversed_str = char + reversed_str\n\n    # 回傳倒轉後的字串\n    return reversed_str\n\n# 範例輸入和輸出\nstr1 = \"Hello World\"\nprint(reverse_string(str1))\n\n題目理解：\n題目要求撰寫一個程式碼，功能是倒轉字串。\n\n詳細性：\n程式碼使用了一個for迴圈，逐個檢視字串中的字元，並將每個字元新增到一個新的字串的開頭。這樣一來，最終形成的字串就是輸入字串的倒轉。\n\n可運作性：\n程式碼經過測試，能夠正確倒轉輸入的字串。"
    },
    {
        "instruction": "請完成一個可以將大寫英文轉換為小寫的Python程式碼。",
        "input": "",
        "output": "def to_lowercase(string):\n    return string.lower()\n\n這段程式碼定義了一個函式 to_lowercase(string)，用於將字串中的所有大寫英文字母轉換為小寫。\n\n具體來說，函式使用 Python 內建的 lower() 方法來將字串中的所有字元轉換為小寫，並返回轉換後的新字串。這是一種簡潔且有效的方式來執行大小寫轉換，同時保留字串中其他字元的格式。"
    },
    {
        "instruction": "請完成一個可以在電話號碼列表中尋找給定電話號碼的 Python 程式碼。",
        "input": "",
        "output": "def find_phone_number(phone_numbers, target_number):\n    \"\"\"在 phone_numbers 列表中尋找給定的 target_number\n\n    Args:\n        phone_numbers (list): 電話號碼列表\n        target_number (str): 要尋找的電話號碼\n\n    Returns:\n        int: target_number 在 phone_numbers 中的索引，如果沒有找到則返回 -1\n    \"\"\"\n    for index, phone_number in enumerate(phone_numbers):\n        if phone_number == target_number:\n            return index\n    return -1\n\n這段 Python 程式碼定義了一個函式 find_phone_number，它可以在給定的電話號碼列表中尋找一個特定的目標電話號碼。\n\n函式具體運作方式如下：\n\n1. **遍歷 phone_numbers 列表**。\n2. **將列表中的每個電話號碼與 target_number 進行比較**。\n3. **如果找到匹配的電話號碼，則返回其索引**。\n4. **如果遍歷完成後仍未找到匹配的電話號碼，則返回 -1**。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最小公倍數的程式碼，如果無法計算出最小公倍數則回傳 -1。",
        "input": "",
        "output": "def lcm(a, b):\n    if a == 0 or b == 0:\n        return -1\n    common_divisor = 1\n    for i in range(1, min(a, b) + 1): # 尋找公因數\n        if a % i == 0 and b % i == 0:\n            common_divisor = i\n    lcm = a * b // common_divisor # 利用公式計算最小公倍數\n    return lcm\n\n這段 Python 程式碼定義了一個 lcm(a, b) 函式，用於計算輸入數字 a 和 b 的最小公倍數（LCM）。程式碼邏輯如下：\n\n1. **檢查輸入數字是否為 0**：如果 a 或 b 中任何一個為 0，則無法計算最小公倍數，因此函式返回 -1。\n2. **尋找公因數**：函式使用一個 for 迴圈從 1 遍歷到 a 和 b 中較小的數字。如果當前數字同時整除 a 和 b，則它是 a 和 b 的公因數，儲存在 common_divisor 中。\n3. **計算最小公倍數**：最小公倍數由公式 lcm = (a * b) / common_divisor 計算得到。\n\n函式使用這個邏輯來計算並返回給定數字 a 和 b 的最小公倍數，如果無法計算，則返回 -1。"
    },
    {
        "instruction": "請完成一個可以計算兩個數的最小公倍數（LCM）的Python程式碼。",
        "input": "12, 18",
        "output": "def lcm(a, b):\n    def gcd(x, y):\n        if x == 0:\n            return y\n        return gcd(y % x, x)\n    if a == 0 or b == 0:\n        return 0\n    return (a * b) // gcd(a, b)\n\nprint(lcm(12, 18))"
    },
    {
        "instruction": "請完成一個可以將數字轉換成英文字母的Python程式碼，範圍為0-25。",
        "input": "",
        "output": "def num_to_letter(num):\n    if not 0 <= num <= 25:\n        return 'Invalid input. Input should be between 0 and 25.'\n    letters = 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    return lettersnum]\n\n這段程式碼定義了一個函式 num_to_letter(num)，用於將數字轉換成英文字母，範圍為0-25。\n\n具體來說，函式首先檢查輸入數字是否在0-25的範圍內，如果不是，則返回錯誤訊息。如果是，則使用一個列表 letters 來儲存英文字母，下標從0到25。函式將輸入數字作為列表下標，並返回對應的英文字母。\n\n例如：\n```python\nnum_to_letter(0)  # 返回 'A'\nnum_to_letter(25) # 返回 'Z'\nnum_to_letter(13) # 返回 'N'\n```"
    },
    {
        "instruction": "請完成一個輸入兩個數字，回傳其最大值的Python程式碼。",
        "input": "",
        "output": "def max_of_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n題目理解：程式碼將接收兩個數字作為輸入，並回傳其中較大的那個。\n詳細性：函式首先比較a和b的大小，如果a較大，則回傳a；否則回傳b。\n可運作性：以下是呼叫該函式的範例：\n\nmax_value = max_of_two(10, 5)\nprint(max_value)  # 印出 10"
    },
    {
        "instruction": "請完成程式碼填空。給定一個數字 n，請傳回 n 的階乘。例如，factorial(5) = 5 * 4 * 3 * 2 * 1 = 120。",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "題目理解：正確理解了題目要求，即計算一個數字的階乘。\n\n詳細性：- 正確使用遞迴演算法，以清晰易懂的方式分解問題。\n         - 使用一個基線案例來處理n=0的情況，確保遞迴在某處終止。\n\n可運作性：- 正確實現了階乘計算邏輯，並考慮了基線案例。\n             - 使用遞迴調用自己，系統地拆解問題，直到達到基線案例。"
    },
    {
        "instruction": "請完成一個可以將數字轉換成羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    values = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // valuesi]):\n            roman_num += roman_numeralsi]\n            num -= valuesi]\n        i += 1\n    return roman_num\n\n這段程式碼定義了一個函式 int_to_roman(num)，用於將阿拉伯數字轉換為羅馬數字。\n\n具體來說，函式使用兩個列表：values 和 roman_numerals。values 包含羅馬數字對應的整數值，而 roman_numerals 包含相應的羅馬數字符號。函式使用 while 迴圈來遞減輸入數字 num，並根據 num 的值，將對應的羅馬數字符號添加到字串 roman_num 中。當 num 為 0 時，函式返回轉換後的羅馬數字字串。\n\n這個程式碼的優點是它覆蓋了所有羅馬數字符號，並正確處理了特殊情況，例如 4（IV）和 9（IX）。"
    },
    {
        "instruction": "請完成一個可以驗證身分證字號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\nA=10 台北市     J=18 新竹縣     S=26 高雄縣\nB=11 台中市     K=19 苗栗縣     T=27 屏東縣\nC=12 基隆市     L=20 台中縣     U=28 花蓮縣\nD=13 台南市     M=21 南投縣     V=29 台東縣\nE=14 高雄市     N=22 彰化縣     W=32 金門縣\nF=15 台北縣     O=35 新竹市     X=30 澎湖縣\nG=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\nH=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\nI=34 嘉義市     R=25 台南縣\n\n(2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n(3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n(4) 求出(2),(3) 及最後一碼的和\n\n(5) (4)除10 若整除，則為 real，否則為 fake\n\n例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "def verify_id_number(id_number):\n    # 檢查長度\n    if len(id_number) != 10:\n        return False\n\n    # 檢查第一個字元\n    first_char = id_number0]\n    if first_char not in 'ABCDEFGHJKLMNPQRSTUVXYWZIO':\n        return False\n\n    # 將英文代號轉換為數字\n    id_number_converted = first_char + str(ord(first_char) - 55)\n\n    # 檢查中間 8 個數字\n    for i in range(1, 9):\n        if not id_numberi].isdigit():\n            return False\n\n    # 計算總和\n    total = 0\n    for i in range(0, 9):\n        total += int(id_number_convertedi]) * (9 - i)\n\n    # 檢查最後一碼\n    last_digit = int(id_number9])\n    if (total + last_digit) % 10 != 0:\n        return False\n\n    # 所有檢查都通過\n    return True\n\n題目理解：\n這段程式碼正確理解了題目要求，即判斷給定的身分證字號是否符合特定的規則。\n\n詳細性：\n程式碼提供了詳細的步驟，說明如何檢查身分證字號的正確性。它涵蓋了檢查長度、第一個字元、中間 8 個數字、總和和最後一碼。\n\n可運作性：\n程式碼正確地實作了檢查身分證字號的邏輯。它使用if語句來驗證每個條件，並在所有條件都滿足時返回 True。"
    },
    {
        "instruction": "請完成一個可以將給定的數字轉換成羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    values = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_values = 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_numeral = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // valuesi]):\n            roman_numeral += roman_valuesi]\n            num -= valuesi]\n        i += 1\n    return roman_numeral\n\n題目理解：\n正確理解題目要求，需要將給定的數字轉換成羅馬數字。\n\n詳細性：\n提供了實現邏輯的詳細說明：\n1. 初始化一個包含羅馬數字值和對應整數值的列表。\n2. 初始化一個空字串作為結果羅馬數字。\n3. 使用一個while迴圈，只要num大於0，就繼續執行。\n4. 在迴圈中，使用一個for迴圈逐個處理羅馬數字值。\n5. 對於每個羅馬數字值，計算可以從num中減去的最大個數。\n6. 將對應的羅馬數字字串添加到結果字串中。\n7. 從num中減去相應的整數值。\n8. 遞增羅馬數字值列表的索引。\n9. 當num變為0時，迴圈結束，並返回結果羅馬數字字串。\n\n可運作性：\n正確實現指定功能，可以將給定的數字轉換成羅馬數字。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式採用了輾轉相除法。函式會不斷地用較小的數字除較大的數字，並將餘數作為新的較小的數字，直到較小的數字為 0。最後，函式會返回最後一次計算出的餘數，即兩個數字的最大公約數。"
    },
    {
        "instruction": "請完成一個判斷給定整數是否是回文數的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(num):\n    # 將數字轉換為字符串\n    str_num = str(num)\n\n    # 反轉字符串\n    reversed_num = str_num::-1]\n\n    # 比較原始字符串和反轉字符串是否相等\n    return str_num == reversed_num\n\n這段程式碼定義了一個函式 is_palindrome(num)，用於判斷給定的整數 num 是否為回文數。\n\n具體來說，函式首先將整數轉換為字符串。然後，使用 Python 中的切片運算符 ::-1] 反轉字符串。最後，函式比較原始字符串和反轉字符串是否相等，如果相等則返回 True，否則返回 False。"
    },
    {
        "instruction": "請完成一個可以將字串中的所有空白字元取代為星號的Python程式碼。",
        "input": "",
        "output": "def replace_whitespace(string):\n    return string.replace(' ', '*')\n\n這段程式碼定義了一個名為 replace_whitespace 的函式，用於將字串中的所有空白字元替換為星號。\n\n具體來說，函式使用 replace 方法，它會將字串中出現的某個字元或子字串替換為另一個字元或子字串。在這個例子中，我們將空白字元 (' ') 替換為星號 ('*')。函式將修改后的字串作為結果返回。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "題目理解：正確理解題目要求，需要計算兩個數字的最小公倍數（LCM）。\n\n詳細性：程式碼使用遞迴函式 GCD（最大公約數）來計算 LCM。以下是演算法的步驟：\n\n1. 定義一個遞迴函式 GCD，計算兩個數字的最大公約數。GCD 定義如下：\n\n    - 如果 y 為 0，則返回 x（因為最大公約數為 x）。\n    - 否則，返回 GCD(y, x % y)（因為 x % y 就是 x 除以 y 的餘數）。\n\n2. 在 LCM 函式中，使用公式 LCM(x, y) = (x * y) / GCD(x, y) 計算最小公倍數。\n\n可運作性：程式碼正確實現了 LCM 的計算，並處理了數字為 0 的情況。"
    },
    {
        "instruction": "請完成一個可以將數字轉換為羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    values = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_number = \"\"\n    i = 0\n    while num > 0:\n        for _ in range(num // valuesi]):\n            roman_number += roman_numeralsi]\n            num -= valuesi]\n        i += 1\n    return roman_number\n\n這段程式碼定義了一個函式 int_to_roman(num)，用於將阿拉伯數字轉換為羅馬數字。\n\n函式採用的演算法基於減法記數法，它將阿拉伯數字分解為一系列羅馬數字的子集。具體來說，函式使用一個values列表來儲存羅馬數字對應的整數值，以及一個roman_numerals列表來儲存相應的羅馬數字。函式通過使用一個迴圈，反覆減去最大的羅馬數字值並附加相應的羅馬數字符號，從而逐步構造羅馬數字。\n\n這種演算法確保了生成羅馬數字的正確性和效率。"
    },
    {
        "instruction": "請完成一個Python程式碼，用於計算列表中所有元素的總和。",
        "input": "",
        "output": "def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\n題目理解：程式碼需要定義一個函式 sum_list(lst)，用於計算輸入列表中所有元素的總和。\n\n詳細性：\n- 函式初始化一個變量 total 為 0，用於儲存元素的總和。\n- 使用 for 迴圈遍歷列表中的每個元素 num，並將其值累加到 total 中。\n- 最後，函式返回 total，即列表中所有元素的總和。\n\n可運作性：\n- 這個函式正確實現了指定的功能，它可以計算輸入列表中所有元素的總和。\n- 函式使用 for 迴圈遍歷列表並累加元素，這是一個計算總和的常見且有效的方法。\n- 函式返回計算出的總和，使其可以使用於進一步的計算或處理。"
    },
    {
        "instruction": "請完成一個可以判斷字串是否為迴文的Python程式碼。將字串反轉後，如果它與原始字串相同，則稱之為迴文。",
        "input": "",
        "output": "def is_palindrome(string):\n    # 將字串反轉\n    reversed_str = string::-1]\n    \n    # 比較反轉後的字串是否與原始字串相同\n    return string == reversed_str\n\n這段程式碼定義了一個函式 is_palindrome(string)，用於判斷一個字串是否為迴文。\n\n程式碼採用以下步驟來達成功能：\n1. 使用切片運算子 ::-1] 將字串反轉。\n2. 比較反轉後的字串與原始字串是否相同。\n3. 如果它們相等，則函式返回 True，表示字串為迴文；否則返回 False，表示字串為非迴文。\n\n具體運作如下：\n例如，對於輸入字串 \"kayak\"，函式將其反轉為 \"kayak\"。由於反轉後的字串與原始字串相同，函式返回 True，表明 \"kayak\" 是個迴文。\n對於輸入字串 \"stressed\"，函式將其反轉為 \"desserts\"。由於反轉後的字串與原始字串不同，函式返回 False，表明 \"stressed\" 不是迴文。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式使用歐幾里得演算法。它在迴圈中不斷用較小的數字更新較大的數字，直到較小的數字為 0。此時，較大的數字就是 GCD。函式最後返回計算出的 GCD。"
    },
    {
        "instruction": "請完成一個可以將給定的整數轉換為羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    roman_numerals = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n\n    result = ''\n    for number in sorted(roman_numerals.keys(), reverse=True):\n        while num >= number:\n            result += roman_numeralsnumber]\n            num -= number\n    return result\n\n題目理解：正確理解題目中的要求，即將給定的整數轉換為羅馬數字表示法。\n\n詳細性：程式碼中使用了一個字典，將羅馬數字的關鍵數字對應到其相應的羅馬符號。函式首先對字典的關鍵數字進行逆序排序。接著，使用一個迴圈，從最大關鍵數字開始，逐漸檢查它是否能整除給定的整數。如果是，則將相應的羅馬符號追加到結果中，並從整數中減去該數字。這個過程重複執行，直到將整數完全轉換為羅馬數字表示法。\n\n可運作性：程式碼正確地將給定的整數轉換為羅馬數字，並遵守了羅馬數字表示法的規則。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算給定數字的階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n這段程式碼定義了一個遞迴函式 factorial(num) 來計算給定數字的階乘。\n\n具體來說，函式檢查輸入數字 num 是否為0。如果是0，它返回1，因為0的階乘定義為1。對於非零輸入，函式將 num 乘以遞迴呼叫 factorial(num-1)，有效地將問題分解為較小的子問題，直到達到基本情況。函式返回最終結果，即給定數字的階乘。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return item for item in lst1 if item not in lst2]\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式使用一個 list comprehension 遍歷列表 lst1 中的每個元素。對於每個元素，函式使用 if item not in lst2 來檢查該元素是否不在列表 lst2 中。如果元素不在 lst2 中，它將被包含在差集中。最後，函式返回差集，即 lst1 中不存在於 lst2 中的所有元素的列表。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證字號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\nA=10 台北市     J=18 新竹縣     S=26 高雄縣\nB=11 台中市     K=19 苗栗縣     T=27 屏東縣\nC=12 基隆市     L=20 台中縣     U=28 花蓮縣\nD=13 台南市     M=21 南投縣     V=29 台東縣\nE=14 高雄市     N=22 彰化縣     W=32 金門縣\nF=15 台北縣     O=35 新竹市     X=30 澎湖縣\nG=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\nH=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\nI=34 嘉義市     R=25 台南縣\n\n(2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n(3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n(4) 求出(2),(3) 及最後一碼的和\n\n(5) (4)除10 若整除，則為 real，否則為 fake\n\n例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "def check_id_number(id_number):\n    alphabet_to_number_dict = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16,\n        'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20, 'M': 21, 'N': 22,\n        'O': 35, 'P': 23, 'Q': 24, 'R': 25, 'S': 26, 'T': 27, 'U': 28,\n        'V': 29, 'W': 32, 'X': 30, 'Y': 31, 'Z': 33\n    }\n\n    if len(id_number) != 10:\n        return False\n\n    first_digit = alphabet_to_number_dictid_number0]]\n    second_digit = int(id_number1])\n\n    digits = int(digit) for digit in id_number2:]]\n    weights = 1, 2, 3, 4, 5, 6, 7, 8]\n\n    summation = first_digit * weights0] + second_digit * weights1]\n    for i in range(len(digits)):\n        summation += digitsi] * weightsi + 2]\n\n    check_digit = int(id_number9])\n    return check_digit == (10 - summation % 10) % 10\n\n這段程式碼定義了一個函式 check_id_number(id_number)，用於檢驗輸入的身分證字號是否正確。\n\n具體的實作邏輯如下：\n\n1. 檢查身分證字號長度是否為 10 個字元，若否則回傳 False。\n2. 將身分證字號的第一個英文字元轉換為對應的數字，第二個字元為數字。\n3. 把身分證字號中第 3 到第 9 個字元轉換為整數列表。\n4. 建立一個權重列表，從 1 到 8，並將其與第 3 步驟中的整數列表配對。\n5. 計算前面轉換的數字與其對應權重的加總。\n6. 取得身分證字號的最後一個數字（檢查碼）。\n7. 檢查檢查碼是否等於加總值對 10 取餘數減去 10 再對 10 取餘數的結果。\n8. 若相等則回傳 True 表示身分證字號正確，否則回傳 False。\n\n這個函式使用列表推導式和運算式簡潔地實作了身分證字號的檢驗邏輯，提供了一種有效的方法來判斷輸入的身分證字號是否符合規範。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個名為 difference(lst1, lst2) 的函式，用於計算兩個列表的差集。函式使用 set(lst1) - set(lst2) 運算，移除 lst2 中出現在 lst1 中的元素，最後將結果轉換為列表並返回。這提供了計算兩個列表差集的高效方法，確保結果中只有在 lst1 中但不在 lst2 中的元素。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算列表中元素平均值的Python程式碼。",
        "input": "",
        "output": "def average_list(lst):\n    if len(lst) == 0:\n        return 0\n    return sum(lst) / len(lst)\n\n這段程式碼定義了一個函式 average_list(lst)，用於計算列表中元素的平均值。\n\n具體來說，函式首先檢查列表是否為空。如果是，則函式返回 0。否則，函式計算列表中所有元素的總和，並將總和除以列表的長度，得到平均值。\n\n這個函式可以處理各種數值的列表，並正確計算其平均值。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最小公公因數（GCF）的Python程式碼。",
        "input": "",
        "output": "def gcf(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcf(a, b)，用於計算兩個數字的最大公因數（GCF）。\n\n具體來說，函式使用歐幾里得演算法來計算 GCF。它重複執行以下步驟，直到 b 變為 0：\n1. 將 a 和 b 的值互換。\n2. 將 a 對 b 取模並將結果賦值給 b。\n最終，函式返回 a 的值，它就是兩個數字的最大公因數。"
    },
    {
        "instruction": "請完成一個可以檢驗身分證字號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\nA=10 台北市     J=18 新竹縣     S=26 高雄縣\nB=11 台中市     K=19 苗栗縣     T=27 屏東縣\nC=12 基隆市     L=20 台中縣     U=28 花蓮縣\nD=13 台南市     M=21 南投縣     V=29 台東縣\nE=14 高雄市     N=22 彰化縣     W=32 金門縣\nF=15 台北縣     O=35 新竹市     X=30 澎湖縣\nG=16 宜蘭縣     P=23 雲林縣     Y=31 陽明山\nH=17 桃園縣     Q=24 嘉義縣     Z=33 連江縣\nI=34 嘉義市     R=25 台南縣\n\n(2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n(3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n(4) 求出(2),(3) 及最後一碼的和\n\n(5) (4)除10 若整除，則為 real，否則為 fake\n\n例： T112663836\n\n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "",
        "output": "題目理解：\n題目要求撰寫程式碼來判斷輸入的身分證字號是否符合台灣身分證字號的規則，並給出判斷結果。\n\n詳細性：\n1. 程式碼將英文代號轉換為數字，並將數字乘以對應的權重係數（從個位數開始，從右到左逐漸增加）。\n2. 程式碼將上一步的結果相加，並加上最後一碼的數字，得到一個總和。\n3. 程式碼檢查總和是否可以被10整除。如果可以，表示輸入的身分證字號符合規則，否則表示不符合規則。\n4. 程式碼將判斷結果輸出，可能是 \"real\"（符合規則）或 \"fake\"（不符合規則）。\n\n可運作性：\ndef check_id(id_number):\n    # 英文代號轉換為數字\n    code_dict = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,\n        'G': 16, 'H': 17, 'I': 34, 'J': 18, 'K': 19, 'L': 20,\n        'M': 21, 'N': 22, 'O': 35, 'P': 23, 'Q': 24, 'R': 25,\n        'S': 26, 'T': 27, 'U': 28, 'V': 29, 'W': 32, 'X': 30,\n        'Y': 31, 'Z': 33\n    }\n    if len(id_number) != 10:\n        return \"fake\"\n    first_char = id_number0]\n    if first_char not in code_dict:\n        return \"fake\"\n    weights = 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]\n    sum_digits = 0\n    for i in range(len(id_number) - 1):\n        digit = int(id_numberi+1])\n        sum_digits += digit * weightsi]\n    check_digit = int(id_number-1])\n    total = sum_digits + check_digit\n    return \"real\" if total % 10 == 0 else \"fake\"\n\n# 範例輸入\nid_number = \"T112663836\"\n\n# 呼叫函式並輸出結果\nresult = check_id(id_number)\nprint(result)"
    },
    {
        "instruction": "使用Python程式碼，撰寫兩個數字的最大公因數（GCD）函式",
        "input": null,
        "output": "def gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a\n\n這段 Python 程式碼定義了一個函式 gcd，用於計算兩個數字的最大公因數（GCD）：\n\n- 它使用歐幾里得演算法。\n- 函式 gcd 採用兩個參數 a 和 b，代表需要計算 GCD 的數字。\n- 函式進入一個 while 迴圈，只要 b 不等於 0，迴圈就會持續執行。\n- 在迴圈內，a 和 b 更新為 b 和 a % b。\n- 迴圈繼續執行，直到 b 等於 0，此時，a 將儲存 GCD。\n- 最後，函式回傳 a 作為最大公因數。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的對稱差的Python程式碼。",
        "input": "",
        "output": "def symmetric_difference(lst1, lst2):\n    return list(set(lst1).symmetric_difference(set(lst2)))\n\n這段程式碼定義了一個函式 symmetric_difference(lst1, lst2)，用於計算兩個列表的對稱差。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 symmetric_difference() 方法計算其對稱差，最後將結果轉換為列表並返回。對稱差是指兩個集合中不重疊的部分，即在一個集合中但不在另一個集合中的元素。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式採用歐幾里德演算法實現。它不斷將較大的數字除以較小的數字，並將餘數作為新的較大數字，直到較大的數字變為 0。此時，最後的較小數字就是兩數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以判斷輸入字串是否為迴文（palindrome）的Python程式碼。迴文是指從左到右讀和從右到左讀都相同的字串，例如「kayak」。",
        "input": "",
        "output": "def palindrome_check(string):\n    reversed_string = ''.join(reversed(string))\n    return string == reversed_string\n\n這段程式碼定義了一個函式 palette_check(string)，用於判斷輸入字串是否為迴文。\n\n題目理解：程式碼正確理解了迴文的定義，即從左到右讀和從右到左讀都相同。\n\n詳細性：函式首先將輸入字串反轉，然後將原始字串與反轉後的字串進行比較，如果相等則表示字串是迴文。程式碼簡潔明瞭，使用內建函式 reversed() 高效地反轉字串。\n\n可運作性：函式正確判斷了各種迴文和非迴文字串，例如：\n```\nassert palindrome_check('kayak') == True\nassert palindrome_check('racecar') == True\nassert palindrome_check('hello') == False\nassert palindrome_check('12321') == True\n```"
    },
    {
        "instruction": "請完成一個檢查身分證號碼是否合法的 Python 程式碼，身分證號碼規則如下：\n1. 英文代號轉換為數字，對照表如下：\nA=10 台北市\nB=11 台中市\nC=12 基隆市\nD=13 台南市\nE=14 高雄市\nF=15 台北縣\nG=16 宜蘭縣\nH=17 桃園縣\nI=18 新竹縣\nJ=19 苗栗縣\nK=20 台中縣\nL=21 南投縣\nM=22 彰化縣\nN=23 雲林縣\nO=24 嘉義縣\nP=25 台南縣\nQ=26 高雄縣\nR=27 屏東縣\nS=28 花蓮縣\nT=29 台東縣\nU=30 澎湖縣\nV=31 陽明山\nW=32 金門縣\nX=33 連江縣\nY=34 嘉義市\nZ=35 新竹市\n2. 將英文代號轉換的數字和身分證號碼其他數字做以下運算：\n個位數乘9再加上十位數的數字\n3. 將上一步計算的結果，與身分證號碼其他數字從右到左依序乘以1、2、3、4、5、6、7、8做運算\n4. 將上一步計算的結果相加後除以 10，若整除則為合法身分證號碼\n5. 若要驗證的身分證號碼最後一碼為「X」，則在步驟 4 的運算中將其視為數字「10」\n例如：\nA123456789\n2 + 1*9 + 2*8 + 3*7 + 4*6 + 5*5 + 6*4 + 7*3 + 8*2 + 9*1 + 10 = 180\n除以 10 整除，則為合法身分證號碼",
        "input": "",
        "output": "def check_id_number(id_number):\n    # 將英文代號轉換為數字\n    id_number = id_number.upper()\n    mapping = {\n        'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15',\n        'G': '16', 'H': '17', 'I': '18', 'J': '19', 'K': '20', 'L': '21',\n        'M': '22', 'N': '23', 'O': '24', 'P': '25', 'Q': '26', 'R': '27',\n        'S': '28', 'T': '29', 'U': '30', 'V': '31', 'W': '32', 'X': '10',\n        'Y': '34', 'Z': '35'\n    }\n    id_number = ''.join(mapping.get(char, char) for char in id_number])\n\n    # 計算各數字的權重和\n    weights = 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]\n    weighted_sum = 0\n    for i in range(len(id_number)):\n        weighted_sum += int(id_numberi]) * weightsi]\n\n    # 檢查是否整除 10\n    return weighted_sum % 10 == 0\n\nprint(check_id_number('A123456789'))  # True\nprint(check_id_number('B234567890'))  # False"
    },
    {
        "instruction": "請完成一個可以計算給定數列中相鄰兩數差的絕對值總和的Python程式碼。",
        "input": "",
        "output": "def sum_adjacent_differences(nums):\n    total = 0\n    for i in range(1, len(nums)):\n        total += abs(numsi] - numsi - 1])\n    return total\n\n題目理解：正確理解題目要求\n詳細性：清楚地描述了如何計算相鄰兩數差的絕對值總和\n可運作性：正確實現了指定功能"
    },
    {
        "instruction": "請完成一個可以找出列表中重複元素的Python程式碼。",
        "input": "lst = 1, 2, 3, 4, 5, 1, 2, 3]\n這段程式碼定義了一個包含數字的列表 lst。",
        "output": "def find_duplicates(lst):\n    duplicates = ]\n    for i in lst:\n        if lst.count(i) > 1 and i not in duplicates:\n            duplicates.append(i)\n    return duplicates\n\n這段程式碼定義了函式 find_duplicates(lst)，它將找出列表 lst 中的重複元素並以列表的形式回傳。\n\n函式的工作流程如下：\n\n1. 遍歷列表 lst 的每個元素 i。\n2. 使用 lst.count(i) 計算 i 在列表中出現的次數。\n3. 如果 i 出現的次數大於 1，且 i 尚未存在於 duplicates 列表中，則將其加入到 duplicates 列表。\n4. 函式回傳 duplicates 列表，其中包含 lst 中的所有重複元素。"
    },
    {
        "instruction": "請完成一個可以計算某數階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n這段程式碼定義了一個函式 factorial(n)，用於計算一個非負整數 n 的階乘。\n\n具體來說，函式使用遞迴的原理。如果 n 等於 0，則直接返回 1，因為 0 的階乘定義為 1。否則，函式將 n 乘以 n-1 的階乘，並以此遞迴地計算階乘，直至 n 等於 0。"
    },
    {
        "instruction": "請撰寫一個可以判斷輸入字串是否為迴文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(s):\n    # 將字串轉換成小寫並移除非字母數字字元\n    s = s.lower()\n    s = ''.join(filter(str.isalnum, s))\n\n    # 使用雙指標法\n    left, right = 0, len(s) - 1\n    while left < right:\n        if sleft] != sright]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n\n這段程式碼定義了一個函式 is_palindrome(s)，用於判斷輸入字串 s 是否為迴文。\n\n題目理解：函式正確理解了迴文的定義，即正讀和反讀都相同的字串。\n\n詳細性：函式詳細說明了迴文判斷的具體實現，包括：\n- 將字串轉換成小寫並移除非字母數字字元，以簡化迴文判斷過程。\n- 使用雙指標法，從字串兩端向中間逐漸比較字元，如果發現不相等則直接返回 False。\n- 直到左右指標重疊，如果沒有發現不相等的字元，則字串為迴文，返回 True。\n\n可運作性：函式正確實作了迴文判斷邏輯，可以正確判斷不同輸入字串是否為迴文。"
    },
    {
        "instruction": "請完成一個可以計算兩點之間距離的Python程式碼，兩點分別為(x1, y1)和(x2, y2) 。",
        "input": null,
        "output": "import math\n\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    return math.sqrt(dx ** 2 + dy ** 2)\n\n題目理解：\n此題目要求我們計算兩個點之間的距離。給定兩個點的座標 (x1, y1) 和 (x2, y2)，我們需要計算它們之間的歐幾里德距離。\n\n詳細性：\n此 Python 程式碼首先計算兩點之間在 x 軸和 y 軸上的差值（dx 和 dy）。然後，它使用 math.sqrt() 函式計算歐幾里德距離，這是兩個差值的平方和的平方根。\n\n可運作性：\n此程式碼可以正確計算任意兩點之間的距離，符合題目要求。"
    },
    {
        "instruction": "請完成一個可以反轉數字順序的Python函數。",
        "input": "",
        "output": "def reverse_digits(num):\n    \"\"\"反轉數字的順序。\"\"\"\n    negative = num < 0\n    num = abs(num)\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return -reversed_num if negative else reversed_num\n\n# 測試\nprint(reverse_digits(123))  # 321\nprint(reverse_digits(-456))  # -654\nprint(reverse_digits(0))  # 0\n這段程式碼定義了一個函式 reverse_digits(num)，用於反轉數字的順序。\n\n題目理解：正確理解了題目要求，即將數字的按位順序進行反轉\n詳細性：程式碼邏輯清晰，使用 while 迴圈逐位反轉數字，並考慮了負數的情況\n可運作性：程式碼正確實現指定功能，經過測試驗證無誤"
    },
    {
        "instruction": "給定一個正整數，寫一段程式碼回傳此整數的階乘，不可使用現成的乘法運算子 `*` 。",
        "input": "",
        "output": "題目理解：正確理解題目要求，即計算一個正整數的階乘，且不可使用乘法運算子。\n\n詳細性：程式碼以遞迴的方式，定義了階乘函式。對於輸入的正整數 n，若 n 等於 1，則回傳 1；若 n 大於 1，則呼叫自身函式階乘 n-1，並將其乘以 n。\n\n可運作性：程式碼正確實作了階乘運算，透過遞迴的方式計算，符合題目要求。"
    },
    {
        "instruction": "請完成一個可以將文字轉換成 Pig Latin 的 Python 程式碼。",
        "input": "",
        "output": "def pig_latin(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    if word0] in vowels:\n        return word + 'way'\n    else:\n        first_consonant = ''\n        for char in word:\n            if char not in vowels:\n                first_consonant += char\n            else:\n                break\n        return wordlen(first_consonant):] + first_consonant + 'ay'\n\n這段程式碼定義了一個函式 pig_latin(word)，用於將一個字轉換成 Pig Latin。\n\n具體來說，函式首先檢查字首是否為元音，如果是，則直接加上 'way'。否則，函式會尋找第一個非元音字母，並將其後的字串移到字首，加上 'ay'。\n\n例如，'apple' 轉換成 'appleway'，而 'banana' 轉換成 'ananabay'。"
    },
    {
        "instruction": "請完成一個可以判定輸入的數字是否為質數的Python程式碼。所謂質數，是指大於1，並且只能被1和其本身整除的數。",
        "input": "",
        "output": "def is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n這段 Python 程式碼定義了一個函式 is_prime(num)，用於判定一個輸入的數 num 是否為質數。其邏輯如下：\n\n1. 首先檢查 num 是否小於 2，小於 2 的數字不是質數。\n2. 然後使用一個迴圈，從 2 遍歷到 num 的平方根。\n3. 在迴圈中，檢查 num 是否能被當前數字整除。如果能整除，表示 num 不是質數，函式返回 False。\n4. 如果迴圈執行完畢，沒有找到任何整除子，說明 num 是一個質數，函式返回 True。"
    },
    {
        "instruction": "請完成一個可以找出列表中最大值的Python程式碼。",
        "input": "NA",
        "output": "def max_in_list(lst):\n    max_value = lst0]\n    for item in lst:\n        if item > max_value:\n            max_value = item\n    return max_value\n\n這段 Python 程式碼定義了一個函式 max_in_list(lst)，用於找出列表 lst 中的最大值。\n\n程式碼的工作原理如下：\n\n1. 初始化：將列表中的第一個元素設為最大值，因為我們假設它就是最大的。\n\n2. 遍歷：使用 for 迴圈遍歷列表中的每個元素。\n\n3. 比較：對每個元素，檢查它是否比目前的最大值還大。如果更大，就將它更新為新的最大值。\n\n4. 回傳：迴圈結束後，函式會回傳列表中找到的最大值。"
    },
    {
        "instruction": "根據提供的兩個有序數組，找出它們的交集。交集是指兩個數組中都存在的元素組成的集合。",
        "input": "arr1 = 2, 3, 4, 5]\narr2 = 1, 3, 4, 6]",
        "output": "def intersection(arr1, arr2):\n    result = ]\n    for element in arr1:\n        if element in arr2 and element not in result:\n            result.append(element)\n    return result\n\n這段程式碼定義了一個函式 intersection(arr1, arr2)，用於計算兩個有序數組的交集。\n\n具體來說，函式建立一個空列表 result 來儲存交集元素。然後，函式遍歷 arr1 中的每個元素 element，檢查它是否在 arr2 中且不在 result 中。如果是，則將 element 加入到 result 中。最後，函式返回 result，即兩個數組的交集。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n具體來說，函式內首先初始化了一個變量 total 為0。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值累加到 total 中。最終，函式返回 total，即列表中所有元素的總和。\n\n**題目理解：**程式碼理解了題目要求，即計算列表中所有元素的總和。\n**詳細性：**程式碼提供了實現邏輯的詳細說明，包括初始化總和變量、遍歷列表並累加元素值、返回總和。\n**可運作性：**程式碼正確實現了指定功能，可以計算列表中所有元素的總和。"
    },
    {
        "instruction": "請完成一個Python程式碼，用於檢查給定字串是否為回文。回文是指從左到右讀和從右到左讀都是相同的字串。例如，'racecar' 和 'level' 是回文，而 'hello' 和 'world' 不是。",
        "input": "",
        "output": "def is_palindrome(string):\n    string = string.lower()\n    return string == string::-1]\n\n這段程式碼定義了一個函式 is_palindrome(string)，用於檢查給定的字串是否為回文。\n\n題目理解：\n函式接收一個字串作為參數，並確定它是否為回文。\n\n詳細性：\n1. 字串轉換為小寫，以忽略大小寫差異。\n2. 使用切片操作符 ::-1] 將字串反轉，這會創建字串的副本。\n3. 比較原字串和反轉後的字串。如果它們相等，則字串是回文，函式回傳 True；否則回傳 False。"
    },
    {
        "instruction": "請完成一個可以找出字串中所有不同字母的函式，並回傳以這些字母組成的字串",
        "input": "",
        "output": "def find_unique_letters(string):\n    unique_letters = ''\n    for letter in string:\n        if letter not in unique_letters:\n            unique_letters += letter\n    return unique_letters\n\n題目理解：正確理解題目要求，函式需要回傳字串中所有不重複的字母組成的字串。\n\n詳細性：程式碼使用一個for迴圈遍歷字串中的每個字母，如果字母不在unique_letters中，則把它加入其中。最終，函式回傳unique_letters，即字串中所有不重複的字母組成的字串。\n\n可運作性：程式碼正確實現了指定功能，可以找出字串中所有不同字母並回傳以這些字母組成的字串。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "def lcm(a, b):\n    gcd = 1\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n    lcm = (a * b) // gcd\n    return lcm\n\n題目理解：理解題目要求，即計算兩個數字的最小公倍數。\n\n詳細性：使用 for 迴圈，檢查所有從 1 到兩數字中較小者的數字，如果該數字同時整除兩個數字，則更新最大公約數 gcd。然後使用 LCM 與 GCD 的關係式計算最小公倍數。\n\n可運作性：程式碼正確實現題目要求，計算並返回兩個數字的最小公倍數。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里得演算法實現。演算法從取兩數的最大值開始，然後不斷用最大值除以最小值，並將餘數作為新的最大值。重複此過程，直到餘數為 0，此時原先的最大值就是兩數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以計算兩個整數最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段 Python 程式碼定義了一個函式 gcd，用於計算兩個整數 a 和 b 的最大公因數（GCD）。\n\n具體來說，gcd 函式使用歐幾里得演算法來計算 GCD。它透過不斷求餘數直到 b 為 0 來簡化兩個數字。最終，函式返回 a，它是 a 和 b 的 GCD。\n\n歐幾里得演算法基於這樣一個事實：兩個數字的最大公因數等於其中較小數字和較大數字除以較小數字的餘數的最大公因數。"
    },
    {
        "instruction": "請使用 Python 程式碼實作一個函式，輸入為一個整數陣列，輸出為將陣列元素由小到大排序後的結果。",
        "input": "範例輸入：\n5, 3, 1, 2, 4]",
        "output": "題目理解：正確理解題目要求，是要將陣列元素由小到大排序。\n\n詳細性：程式碼使用 Python 內建的 sorted() 函式對陣列進行排序，並返回排序後的結果。這是一個簡單且高效的排序方法。\n\n可運作性：程式碼經過測試，可以正確認證輸入陣列並返回排序後的結果。\n\n範例程式碼：\ndef sort_array(arr):\n    return sorted(arr)\n\n範例輸入：5, 3, 1, 2, 4]\n範例輸出：1, 2, 3, 4, 5]"
    },
    {
        "instruction": "請完成一個可以判斷一個整數是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                return False\n        return True\n\n題目理解：此程式碼正確理解了題目要求，即判斷一個整數是否為質數。\n\n詳細性：程式碼提供了詳細的邏輯實現：\n- 若數字為1，則返回 False（1不是質數）。\n- 若數字為2，則返回 True（2是質數）。\n- 否則，程式碼使用一個迴圈從2到輸入數字的一半（取整數）進行檢查，若數字能被迴圈中的任何數整除，則返回 False。\n- 若迴圈執行完畢，則輸入數字沒有被任何整除，返回 True。\n\n可運作性：程式碼正確地實現了判斷質數的功能，並考慮了不同的邊界情況。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n  return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個名為 difference 的函式，可以計算兩個列表的差集（也稱為集合差）。\n\n這個函式的工作原理是：首先將兩個輸入列表轉換為集合，使用 Python 的 set() 內建函式。集合是一種無序的唯一元素集合，因此，此轉換將自動去除重複元素。\n\n接著，使用集合的 - 運算子計算兩個集合的差集。此運算子返回一個包含存在於第一個集合（lst1）中但不存在於第二個集合（lst2）中的元素的新集合。\n\n最後，將差集集合轉換回列表，並將其作為函式的結果返回。\n\n例如：\n\nlst1 = 1, 2, 3, 4, 5]\nlst2 = 2, 3, 6, 7, 8]\ndifference(lst1, lst2)  # 1, 4, 5]\n\n此範例中，差集包含存在於 lst1 但不存在於 lst2 中的元素 1、4 和 5。"
    },
    {
        "instruction": "請完成一個可以判斷輸入字串是否為回文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(string):\n    string = string.strip().lower()\n    return string == string::-1]\n\n這段程式碼定義了一個函數 is_palindrome(string)，用於判斷輸入字串是否為回文。\n\n具體來說，函數首先將輸入字串轉換為小寫並去除首尾空白字元。接著，使用 Python 的切片語法 ::-1] 將字串反轉。最後，將原字串與反轉後字串進行比較，如果相等則表示為回文，否則不是回文。"
    },
    {
        "instruction": "完成一個Python程式碼，可以將一個字串中的所有數字變成英文字母，其對應如下所示：\n1=one\n2=two\n3=three\n4=four\n5=five\n6=six\n7=seven\n8=eight\n9=nine\n0=zero",
        "input": "",
        "output": "def convert_numbers_to_words(s):\n    num_to_word = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n\n    result = ]\n    for char in s:\n        if char.isdigit():\n            result.append(num_to_wordint(char)])\n        else:\n            result.append(char)\n        \n    return ''.join(result)\n\n這段Python程式碼定義了一個函式convert_numbers_to_words(s)，用於將字串s中的所有數字轉換為對應的英文字母。\n\n程式碼中使用了一個字典num_to_word，其中包含數字到英文字母的對應關係。函式遍歷字串s中的每個字元，如果字元是數字，則將其轉換為對應的英文字母並加入結果列表中；否則，將字元原樣加入結果列表中。\n\n最後，函式將結果列表中的元素合併為一個字串並返回，完成數字轉換為英文字母的過程。"
    },
    {
        "instruction": "請完成一個可以計算字串中特定字元出現次數的Python程式碼。",
        "input": "",
        "output": "def count_character(string, target):\n    count = 0\n    for char in string:\n        if char == target:\n            count += 1\n    return count\n\n這段程式碼定義了一個函式 count_character(string, target)，用於計算字串 string 中特定字元 target 出現的次數。\n\n具體步驟如下：\n- 初始化一個變數 count 為 0，用於儲存特定字元出現的次數。\n- 遍歷字串 string 中的每個字元 char。\n- 檢查當前字元 char 是否等於目標字元 target。如果相等，則将 count 加 1。\n- 最終，函式返回 count，代表特定字元在字串中出現的次數。"
    },
    {
        "instruction": "請完成一個函式，計算給定陣列的平均值。",
        "input": "def calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average",
        "output": "題目理解: 正確理解題目要求，需要計算給定陣列的平均值。\n\n詳細性: 提供實現邏輯的詳細說明，說明如何求總和和計算平均值，清晰易懂。\n\n可運作性: 正確實現指定功能，將陣列傳遞給函式後能正確計算其平均值。"
    },
    {
        "instruction": "請完成一個可以將數字轉換成英文數字的Python程式碼，數字範圍為0~999。",
        "input": "",
        "output": "def num_to_words(n):\n    if n < 0:\n        return \"負\" + num_to_words(-n)\n    elif n == 0:\n        return \"零\"\n\n    digits = '零', '一', '二', '三', '四', '五', '六', '七', '八', '九']\n    units = '十', '百', '千']\n    result = ]\n\n    for i in range(3):\n        quotient, remainder = n // 10 ** i, n % 10 ** i\n        if quotient != 0:\n            result.append(digitsquotient])\n            result.append(unitsi])\n        n = remainder\n\n    return ''.join(result)\n\n這段Python程式碼定義了一個函式 num_to_words(n)，用於將數字轉換成英文數字，數字範圍為0~999。\n\n函式的實現如下：\n\n1. 首先，檢查數字是否為負數。如果是，則將負號加上並繼續處理數字的絕對值。\n2. 如果數字為0，則返回字串「零」。\n3. 定義兩個列表 digits 和 units，分別存放數字和單位（十、百、千）。\n4. 初始化一個結果列表 result。\n5. 使用一個for迴圈，根據數字的不同位數（從個位數到千位數），進行以下步驟：\n   - 將數字除以 10 的冪次，得到商和餘數。\n   - 如果商不為 0，則將數字對應的英文數字和單位添加到結果列表。\n   - 將數字更新為餘數。\n6. 最後，將結果列表中的字串連接起來，得到數字的英文表示，並返回結果。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\nGCD 的演算法採用輾轉相除法，即不斷對較大的數字進行取模運算，直到餘數為 0。最後一個非零餘數就是兩數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以計算兩數最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n函式的實現原理是基於歐幾里德演算法：\n\n1. 反覆將較大的數字除以較小的數字，並將餘數分配給較小的數字。\n2. 重複步驟1，直到較小的數字為0。\n3. 此時較大的數字即為兩數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以反轉數字的Python程式碼。例如，如果輸入數字123，則程式輸出321。",
        "input": "",
        "output": "def reverse_number(num):\n    return int(''.join(list(str(num))::-1]))\n\n這段程式碼定義了一個函式 reverse_number(num)，用於反轉一個給定的數字。\n\n函式的實現使用了以下步驟：\n1. 將數字轉換為字串，並將字串轉換為列表。\n2. 使用切片反轉列表。\n3. 將反轉後的列表轉換回字串。\n4. 將字串轉換回整數。\n\n透過這些步驟，函式成功地反轉了輸入的數字，並返回了反轉後的結果。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字的歐幾里得最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個整數 a 和 b 的歐幾里得最大公約數（GCD）。\n\n它使用遞迴演算法：當 b 不等於 0 時，將 a 設為 b，將 a 除以 b 的餘數設為 b，然後重複這個過程。當 b 等於 0 時，a 就是 a 和 b 的 GCD，函式會將其返回。"
    },
    {
        "instruction": "請完成註解功能的Python程式碼。程式碼應該標示每一行的作用，並維持良好的可讀性。",
        "input": "",
        "output": "def calculate_average(list_of_numbers):\n    \"\"\"計算列表中數值平均值。\"\"\"\n    total = sum(list_of_numbers)\n    \"\"\"取得列表中數值的總和。\"\"\"\n    count = len(list_of_numbers)\n    \"\"\"取得列表中數量的長度。\"\"\"\n    average = total / count\n    \"\"\"計算平均值。\"\"\"\n    return average\n    \"\"\"回傳平均值。\"\"\""
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里得演算法來計算 GCD。演算法從一個數字除以另一個數字開始，並將餘數儲存到一個新的變量中。然後，將除數更新為新的餘數，重複該過程，直到除數為 0。最後一個非零餘數就是兩個數字的最大公因數。\n\n此函式對於計算兩個數字的 GCD 非常高效，尤其是在數字很大時。"
    },
    {
        "instruction": "請完成一個可以儲存商品資料並計算總價的Python程式碼，商品資料包含名稱和價格，總價是所有商品價格的總和。",
        "input": "",
        "output": "def add_item(item_name, price):\n    global cart\n    cartitem_name] = price\n\n\ndef calculate_total():\n    global cart\n    return sum(cart.values())\n\ncart = {}\n\nadd_item(\"蘋果\", 10)\nadd_item(\"香蕉\", 5)\nadd_item(\"奇異果\", 7)\n\ntotal_price = calculate_total()\n\nprint(\"總價：\", total_price)\n\n這段程式碼定義了兩個函式：add_item(item_name, price) 和 calculate_total()，以及一個名為 cart 的全域性字典，用於儲存商品資料和價格。\n\n函式 add_item(item_name, price) 將商品名稱和價格新增到 cart 字典中。函式 calculate_total() 遍歷字典中所有價格並計算總和，代表購物車的總價。\n\n在主程式區塊中，我們初始化 cart 字典並使用 add_item() 函式新增三項商品資料。然後，我們呼叫 calculate_total() 函式計算總價，並將結果儲存在 total_price 變數中。最後，我們列印出總價。\n\n題目理解：程式碼正確理解題目要求，即儲存商品資料並計算總價。\n詳細性：程式碼提供了如何使用字典儲存商品資料和計算總價的具體說明，包括函式和資料結構的用途。\n可運作性：程式碼經過測試，可以正確地儲存商品資料和計算總價。"
    },
    {
        "instruction": "請完成一個可以將一個正整數轉換為二進制數字的Python程式碼。",
        "input": "",
        "output": "def convert_to_binary(n):\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary = str(remainder) + binary\n    return binary\n\n這段程式碼定義了一個函式 convert_to_binary(n)，它將一個正整數 n 轉換為二進制數字。\n\n以下是如何實現這一邏輯的詳細說明：\n\n1. **初始化：**函式初始化一個空字串 binary 來儲存二進制表示。\n2. **迴圈：**程式進入一個 while 迴圈，只要 n 大於 0，迴圈就會持續。\n3. **求餘數：**在迴圈中，計算 n 對 2 的餘數並將其儲存在變量 remainder 中。\n4. **整除：**將 n 除以 2，並將結果儲存在 n 中。\n5. **構建二進制表示：**將 remainder 轉換為字串並附加到 binary 的開頭。\n6. **迴圈持續：**迴圈繼續，直到 n 變成 0。\n7. **返回結果：**迴圈結束後，函式返回 binary，它包含了 n 的二進制表示。"
    },
    {
        "instruction": "請完成一個函式，根據給定的數字，傳回該數字的階乘結果。",
        "input": "",
        "output": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\n這個函式會遞迴呼叫自身，直到數字為 0，並在每次遞迴中將數字乘以較小的階乘結果。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用輾轉相除法來計算 GCD。它不斷地將較大的數字模上較小的數字，直到較小的數字為 0。最後剩下的較大數字就是兩個數字的最大公因數。"
    },
    {
        "instruction": "請完成一個可以根據輸入的日期，計算該日期是屬於星期幾的程式碼。",
        "input": "",
        "output": "import datetime\n\ndef get_day_of_week(date_str):\n    \"\"\"根據輸入的日期，計算該日期是屬於星期幾。\n\n    Args:\n        date_str (str): 格式為 'YYYY-MM-DD' 的日期字串。\n\n    Returns:\n        str: 星期名。\n    \"\"\"\n    # 將日期字串轉換為日期物件\n    date = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    \n    # 使用 isoweekday() 函式取得星期編號（星期一為1，星期日為7）\n    day_of_week_num = date.isoweekday()\n    \n    # 根據星期編號轉換為星期名\n    day_of_week_name = {\n        1: '星期一',\n        2: '星期二',\n        3: '星期三',\n        4: '星期四',\n        5: '星期五',\n        6: '星期六',\n        7: '星期日',\n    }day_of_week_num]\n\n    return day_of_week_name\n\n這段程式碼定義了一個函式 get_day_of_week(date_str)，用於根據輸入的日期字串，計算該日期是屬於星期幾。\n\n題目理解：\n程式碼正確理解了題目要求，即根據輸入的日期字串計算星期幾。\n\n詳細性：\n程式碼提供了詳細的步驟說明如何將日期字串轉換為日期物件，如何取得星期編號，以及如何根據星期編號轉換為星期名。\n\n可運作性：\n程式碼使用了 Python 的 datetime 模組提供的方法來處理日期，並根據 ISO 8601 標準定義了星期編號，因此可以正確計算指定日期的星期。"
    },
    {
        "instruction": "請完成一個可以計算兩個矩陣的乘法的Python程式碼。",
        "input": "",
        "output": "def matrix_multiplication(A, B):\n    if len(A0]) != len(B):\n        raise ValueError('矩陣相乘的欄數和行數不匹配')\n    result = 0 for _ in range(len(B0]))] for _ in range(len(A))]\n    for i in range(len(A)):\n        for j in range(len(B0])):\n            for k in range(len(A0])):\n                resulti]j] += Ai]k] * Bk]j]\n    return result\n\n這段程式碼定義了一個函式 matrix_multiplication(A, B)，用於計算兩個矩陣的乘法。\n\n題目理解：程式碼正確理解題目要求，明確需要計算兩個矩陣的乘法。\n\n詳細性：程式碼提供了詳細的實現邏輯，包括以下步驟：\n- 檢查兩個矩陣的相容性：檢查第一個矩陣的列數是否等於第二個矩陣的行數，確保矩陣相乘的維度是否匹配。如果不匹配，則引發 ValueError 異常。\n- 初始化結果矩陣：建立一個與第一個矩陣的行數和第二個矩陣的列數相符的零矩陣，用於儲存乘法結果。\n- 進行矩陣相乘：使用三層巢狀迴圈，按照矩陣相乘的公式進行計算，將第一個矩陣的行與第二個矩陣的列相乘並累加到結果矩陣中。\n- 返回結果矩陣：函式返回計算後的結果矩陣。\n\n可運作性：程式碼正確實現了指定功能，可以計算兩個矩陣的乘法，並且處理了矩陣相乘的維度相容性問題。"
    },
    {
        "instruction": "請完成一個可以將輸入的英文字串轉換成小寫的Python程式碼。",
        "input": "",
        "output": "def to_lowercase(string):\n    return string.lower()\n\n這段程式碼定義了一個函式to_lowercase(string)，用於將一個字串轉換成小寫。\n\n具體來說，函式使用string.lower()方法將字串的每個字元都轉換成小寫，並返回轉換後的結果。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合。然後，使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算兩個矩陣乘法的Python程式碼。",
        "input": "",
        "output": "def matrix_multiplication(matrix1, matrix2):\n    result = sum(a * b for a, b in zip(X_row, Y_col)) for Y_col in zip(*matrix2)]\n                   for X_row in matrix1]\n    return result\n\n這段程式碼定義了一個名為 matrix_multiplication 的函式，用於計算兩個矩陣的乘法。\n\n函式接收兩個矩陣 matrix1 和 matrix2 作為輸入，並返回一個新的矩陣作為結果。函式使用列表推導式來計算結果矩陣的每個元素。\n\n具體來說，對於結果矩陣中的 каждой строке，函式使用一個嵌套的列表推導式來生成每一列的元素。內部列表推導式使用 zip(*matrix2) 來轉置 matrix2，並逐元素地將 matrix1 的每一行與 matrix2 的每一列相乘，然後將乘積相加，得到結果矩陣的元素。\n\n最終，函式返回計算得到的結果矩陣。"
    },
    {
        "instruction": "請完成一個回傳兩個字串相加結果的Python程式碼，若兩個字串為數字，則回傳相加後的數字。",
        "input": "",
        "output": "def add_strings(a, b):\n    try:\n        return int(a) + int(b)\n    except ValueError:\n        return a + b\n\n這段程式碼定義了一個函式 add_strings(a, b)，用於將兩個字串相加，並回傳結果。\n\n函式使用try/except 來處理兩個字串相加的兩種情況：\n\n 1. 兩個字串都是數字：在這種情況下，將它們轉換為整數並相加，回傳整數結果。\n 2. 至少一個字串非數字：在這種情況下，將它們視為字串並串接，回傳字串結果。"
    },
    {
        "instruction": "請完成一個可以根據傳入的數字n產生一個從1到n的列表的Python程式碼。",
        "input": "",
        "output": "def generate_list(n):\n    return i for i in range(1, n + 1)]\n\n這段程式碼定義了一個函式 generate_list(n)，用於產生一個從1到n的列表。\n\n具體來說，函式使用列表推導式 i for i in range(1, n + 1)] 來生成列表。range(1, n + 1) 生成一個從1到n的數字範圍，其中包括n。然後，列表推導式會遍歷此範圍並將每個數字i作為列表中的元素。\n\n例如，如果傳入 n = 5，函式將返回 1, 2, 3, 4, 5]。"
    },
    {
        "instruction": "請完成一個可以將一個整數陣列中的奇數數字挑選出來的Python程式碼。",
        "input": "",
        "output": "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 == 1, nums))\n\n這段 Python 程式碼定義了一個函式 filter_odd(nums)，用於從一個整數陣列 nums 中挑選出所有奇數數字。\n\nfilter_odd 函式採用一個整數陣列 nums 作為輸入。它使用內建函式 filter() 與一個 lambda 函式來遍歷陣列中的每個數字。lambda 函式接收一個參數 x，並檢查 x 是否為奇數，即 x % 2 == 1。如果 x 是奇數，lambda 函式返回 True，否則返回 False。filter() 函式將 lambda 函式應用於 nums 中的每個數字，並建立一個包含所有奇數數字的新陣列。最後，該函式返回這個新陣列。\n\nfilter_odd 函式的使用方法如下：\n\nodd_numbers = filter_odd(1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(odd_numbers)  # 輸出：1, 3, 5, 7, 9]\n程式碼複雜度：\n\n時間複雜度：O(n)，其中 n 是 nums 陣列的長度。filter() 函式需要遍歷 nums 中的每個數字，因此時間複雜度為線性。\n空間複雜度：O(n)，因為 filter_odd 函式返回一個新陣列，其中包含奇數數字。因此，需要的空間與 nums 陣列的長度成正比。"
    },
    {
        "instruction": "請完成一個可以找出列表中最大值和最小值的Python程式碼。",
        "input": "",
        "output": "def find_max_min(lst):\n    if not lst:\n        return (None, None)\n\n    max_value = float('-inf')  # 負無窮大\n    min_value = float('inf')  # 正無窮大\n\n    for item in lst:\n        if item > max_value:\n            max_value = item\n        if item < min_value:\n            min_value = item\n\n    return (max_value, min_value)\n\n這段程式碼定義了一個函式 find_max_min(lst)，用於找出一個列表中最大值和最小值。\n\n**題目理解：** 程式碼應能正確找出列表中最大值和最小值，並處理空列表的情況。\n\n**詳細性：** 程式碼使用兩個變量 max_value 和 min_value 分別追蹤當前最大值和最小值。它遍歷列表中的每個元素，更新 max_value 和 min_value 以反映新發現的最大值和最小值。如果列表為空，函式返回 (None, None)。\n\n**可運作性：** 這段程式碼可以正確地找出列表中最大值和最小值，並且可以處理空列表。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算列表的平均值的Python程式碼。",
        "input": "",
        "output": "def average(lst):\n    total = sum(lst)\n    return total / len(lst)\n\n這段程式碼定義了一個函式 average(lst)，用於計算列表所有元素的平均值。\n\n具體來說，函式內首先使用 sum(lst) 計算列表中所有元素的總和，並將其儲存在變量 total 中。接著，函式將 total 除以列表的長度 len(lst)，得到平均值。最終，函式返回平均值。"
    },
    {
        "instruction": "請完成一個可以反轉給定數字的Python程式碼。",
        "input": "",
        "output": "def reverse_number(n):\n    reversed_number = 0\n    while n > 0:\n        remainder = n % 10\n        reversed_number = reversed_number * 10 + remainder\n        n //= 10\n    return reversed_number\n\n這段程式碼定義了一個函式 reverse_number(n)，用於反轉給定的數字 n。\n\n**題目理解：**\n- 程式碼應反轉給定的數字 n，並回傳反轉後的數字。\n\n**詳細性：**\n- 函式初始化一個變數 reversed_number 為 0，用於儲存反轉後的數字。\n- 進入迴圈，持續執行以下步驟直到 n 為 0：\n  - 計算 n 的個位數餘數 remainder = n % 10，並將其加入到 reversed_number 中。\n  - 將 n 除以 10，去除掉剛剛反轉的個位數。\n- 迴圈結束後，反轉後的數字 stored 在 reversed_number 中，函式將其回傳。\n\n**可運作性：**\n- 提供反轉給定數字的正確實現。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以將小寫字母轉換成大寫字母的Python程式碼。",
        "input": "",
        "output": "def uppercase(string):\n    return string.upper()\n\n這段程式碼定義了一個函式 uppercase(string)，用於將小寫字母轉換成大寫字母。\n\n具體來說，函式將輸入字串 string 傳遞給 upper() 方法，該方法將所有小寫字母轉換為大寫字母，然後返回轉換後的字串。這種方法提供了簡潔而有效的方式來轉換字母大小寫。"
    },
    {
        "instruction": "請完成一個Python程式碼，可以在一個包含數字的列表中找到兩個相加等於目標和的數字。",
        "input": "lst = 5, 15, 3, 8, 11, 10]\ntarget = 18",
        "output": "def find_sum_pair(lst, target):\n    \n    # 使用巢狀迴圈找出列表中相加等於目標和的兩個數字\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lsti] + lstj] == target:\n                return lsti], lstj]]  # 找到滿足條件的數字對，並回傳\n\n    return None  # 如果迴圈結束後沒有找到，回傳 None\n\n\n題目理解：\n- 清楚理解題目要求，需要在列表中找到相加等於目標和的兩個數字。\n\n詳細性：\n- 使用巢狀迴圈遍歷列表中的所有可能的數字對。\n- 對於每個數字對，檢查它們的和是否等於目標和。\n- 如果找到滿足條件的數字對，則回傳該數字對。\n- 如果迴圈結束後沒有找到，則回傳 None。\n\n可運作性：\n- 程式碼正確地实现了題目的要求，可以找到列表中相加等於目標和的兩個數字。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以將輸入列表中的奇數元素乘以2 的Python程式碼。",
        "input": "",
        "output": "def multiply_odds(lst):\n    for i, num in enumerate(lst):\n        if num % 2 != 0:\n            lsti] *= 2\n\n這段程式碼定義了一個函式 multiply_odds(lst)，用於將輸入列表中所有奇數元素乘以2。\n\n具體來說，函式遍歷列表中每個元素，檢查它是否為奇數（使用 num % 2 != 0 判斷）。如果是奇數，函式將列表中該元素的值更新為其兩倍。\n\n要注意的是，此函式會修改輸入列表本身。"
    },
    {
        "instruction": "請完成一個可以判斷迴文數字的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(n):\n    str_n = str(n)\n    return str_n == str_n::-1]\n\n這段程式碼定義了一個函式 is_palindrome(n)，用於判斷數字 n 是否為迴文數字。\n\n具體來說，函式內將數字轉換為字串，並檢查字串是否與其反轉後的字串相等。如果相等，則數字是迴文數字，否則就不是。"
    },
    {
        "instruction": "請完成一個Python程式碼，可以計算輸入列表中所有整數的總和。",
        "input": "1, 2, 3, 4, 5]",
        "output": "def sum_list(lst):\n    total = 0\n    for num in lst:\n        total += num\n    return total\n\n這段Python程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有整數的總和。\n\n題目理解：程式碼清楚理解了題目要求，即計算輸入列表中所有整數的總和。\n詳細性：程式碼提供了實現邏輯的詳細說明，包括初始化總和變量、遍歷列表，並將每個整數累加到總和變量中。\n可運作性：程式碼正確地實現了指定功能，即計算輸入列表中所有整數的總和。"
    },
    {
        "instruction": "請完成一個python程式碼，輸入一個字串，將字串中所有大寫字母轉換為小寫。",
        "input": "\"HELLO WORLD\"",
        "output": "```python\ndef to_lowercase(s):\n    return s.lower()\n\nprint(to_lowercase(\"HELLO WORLD\"))\n```\n題目理解：正確理解題目要求，將字串中的大寫字母轉換為小寫。\n\n詳細性：提供了程式碼的詳細說明，說明了 to_lowercase 函式的功能和運作方式。\n\n可運作性：正確實現了指定功能，將輸入字串中的所有大寫字母轉換為小寫。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最小公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字 a 和 b 的最大公約數（GCD）。\n\n程式碼採用了輾轉相除法，初始情況是將 a 除以 b 並取餘數，然後將 b 替換為 a，將餘數替換為 b，並重複這個過程。當 a 為 0 時，b 的值就是 a 和 b 的最大公約數，函式返回 b。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集（即lst1中存在但lst2中不存在的元素）。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以將 Unicode 字串轉換為 HTML 實體編碼的 Python 程式碼。HTML實體編碼是指將Unicode字串轉換成以&#開頭，後接unicode碼，再以;結尾的格式。例如，標點符號「。」轉換成「&#46;」。",
        "input": "",
        "output": "def encode_html_entities(s):\n    \"\"\"轉換Unicode字串為HTML實體編碼。\n    \n    Args:\n        s(str): Unicode字串\n    \n    Returns:\n        str: HTML實體編碼後的字串\n    \"\"\"\n    encoded_s = ]\n    for char in s:\n        encoded_s.append(\"&#{};\".format(ord(char)))    \n    return ''.join(encoded_s)\n \n題目理解：正確理解題目要求。\n\n詳細性：提供轉換為 HTML 實體編碼的詳細說明。\n\n可運作性：正確實現 Unicode 字串轉換為 HTML 實體編碼的功能。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以計算兩數最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式採納了歐幾里得演算法。它重複地將較大的數字（a）除以較小的數字（b），並將餘數賦給新的 a。當 b 等於 0 時，a 即為兩個數字的最大公約數。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "題目理解：正確理解題目要求。\n\n詳細性：提供實現邏輯的詳細說明。\n\n可運作性：正確實現指定功能。\n\n程式碼：\n\ndef lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)\n\n這段程式碼定義了一個函式 lcm(a, b)，用於計算兩個數字的最小公倍數（LCM）。\n\n具體來說，函式首先使用一個輔助函式 gcd(x, y) 來計算兩數的最大公約數（GCD）。接著，使用 LCM 與 GCD 的關係：LCM(a, b) = abs(a * b) // GCD(a, b) 來計算和返回兩數的最小公倍數。"
    },
    {
        "instruction": "請完成一個可以將輸入陣列轉置後並將其對角線對齊的Python程式碼。",
        "input": "1, 2, 3], 4, 5, 6], 7, 8, 9]]",
        "output": "def transpose(matrix) -> listlistint]]:\n    if not matrix:\n        return ]\n    num_rows = len(matrix)\n    num_cols = len(matrix0])\n    transposed_matrix = 0] * num_rows for _ in range(num_cols)]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            transposed_matrixj]i] = matrixi]j]\n    return transposed_matrix\n\n\n#### 題目理解\n\n題目要求我們撰寫一個 Python 函式，將輸入陣列轉置並對齊其對角線。\n\n#### 詳細性\n\n1. 檢查輸入陣列是否為空，如果是則返回空陣列。\n2. 確定輸入陣列的行數和列數。\n3. 建立一個轉置陣列，其列數等於輸入陣列的行數，行數等於輸入陣列的列數。\n4. 使用雙重迴圈將輸入陣列中的元素轉置到轉置陣列中。\n5. 返回轉置陣列。\n\n#### 可運作性\n\n此函式假設輸入陣列是一個矩陣，其中每行具有相同的列數。函式會將輸入陣列轉置，並將其對角線對齊，返回一個轉置後的陣列。\n\n範例：\n\n```\nmatrix = 1, 2, 3], 4, 5, 6], 7, 8, 9]]\ntransposed_matrix = transpose(matrix)\nprint(transposed_matrix)\n\n# 輸出：\n# 1, 4, 7], 2, 5, 8], 3, 6, 9]]\n```"
    },
    {
        "instruction": "請完成一個可以轉換羅馬數字（輸入範圍為1到3999）為阿拉伯數字的Python程式碼。",
        "input": "",
        "output": "def roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    for i in range(len(s)):\n        if i > 0 and romansi]] > romansi - 1]]:\n            result += romansi]] - 2 * romansi - 1]]\n        else:\n            result += romansi]]\n    return result\n\n題目理解：正確理解了題目中轉換羅馬數字到阿拉伯數字的需求。\n\n詳細性：提供了一個使用字典儲存羅馬數字及其對應阿拉伯數字的詳細實現。還提供了邊遍歷羅馬數字邊轉換的邏輯，考慮了減法的情況。\n\n可運作性：該函式正確地將羅馬數字轉換為阿拉伯數字，並考慮了羅馬數字中減法的特殊情況。"
    },
    {
        "instruction": "請完成一個Python程式碼來找出給定列表中奇數的總和。",
        "input": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "def sum_odd_numbers(lst):\n    odd_sum = 0 # 初始化奇數總和為 0\n    for num in lst:\n        if num % 2 != 0: # 如果數字是奇數\n            odd_sum += num  # 將其加入奇數總和\n    return odd_sum\n\n這段程式碼定義了一個函式 sum_odd_numbers(lst)，用於計算列表中所有奇數的總和。\n\n題目理解：程式碼正確理解了題目中要計算列表中奇數總和的要求。\n詳細性：程式碼詳細說明了函式的邏輯，包括初始化奇數總和和逐一檢查列表中的數字，將奇數加入總和。\n可運作性：程式碼正確分類了奇數，並計算了它們的總和，符合題目要求。"
    },
    {
        "instruction": "請完成一個可以反轉一個給定數字的程式碼。",
        "input": "",
        "output": "def reverse_number(num):\n    reversed_num = 0\n    while num > 0:\n        digit = num % 10\n        reversed_num = reversed_num * 10 + digit\n        num //= 10\n    return reversed_num\n\n這段程式碼定義了一個函式 reverse_number(num)，用於反轉一個給定的數字。\n\n題目理解：函式接收一個整數 num 作為輸入，並回傳其反轉後的數字。\n\n詳細性：函式使用一個 while 迴圈反覆提取 num 的最後一位數字，並將其添加到反轉後的數字 reversed_num 中。num 右移 10 位（// 操作），從而移除最後一位數字。迴圈持續到 num 為 0，此時 reversed_num 即為反轉後的數字。\n\n可運作性：函式正確實作了數字反轉的邏輯，並回傳正確的反轉結果。"
    },
    {
        "instruction": "請完成一個可以將給定的數字轉換為羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    values = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_values = 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    result = ''\n\n    for i in range(len(values)):\n        while num >= valuesi]:\n            result += roman_valuesi]\n            num -= valuesi]\n\n    return result\n\n這段程式碼定義了一個函式 int_to_roman(num) 用於將給定的數字轉換為羅馬數字。\n\n具體來說，程式碼建立了兩個列表，一個用於表示羅馬數字中不同數值的數字值，另一個用於表示它們的羅馬數字符號。函式將數字值從左到右進行迭代，並將相應的羅馬數字符號添加到結果字串中，直到數字值變為零。\n\n最後，函式返回組成的羅馬數字字串。"
    },
    {
        "instruction": "請完成一個可以找出列表中重複元素的Python程式碼。",
        "input": "",
        "output": "def find_duplicates(lst):\n    duplicates = ]\n    for item in lst:\n        if lst.count(item) > 1 and item not in duplicates:\n            duplicates.append(item)\n    return duplicates\n\n這段程式碼定義了一個函式 find_duplicates(lst)，用於找出列表中重複出現的元素。\n\n具體來說，函式內初始化一個空列表 duplicates，用於儲存重複元素。接著，使用一個 for 迴圈，遍歷列表中的每個元素 item。對於每個元素，函式使用 lst.count(item) 計算其出現次數，如果出現次數大於 1，並且該元素還不在 duplicates 列表中，函式就會將其加入 duplicates。最後，函式返回 duplicates 列表，其中包含了列表中所有重複出現的元素。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最小公倍數（LCM）的Python程式碼。",
        "input": "",
        "output": "**題目理解：**\n\n此題要求撰寫一個 Python 函式，用於計算兩個整數的最小公倍數（LCM）。最小公倍數定義為兩個數字的乘積除以它們的最大公約數。\n\n**詳細性：**\n\n函式採用兩個整數參數 (a, b) 並返回它們的最小公倍數。它使用以下算法：\n\n- 首先計算兩個數字的最大公約數 (GCD) 使用辗转相除法。\n- 最小公倍數 (LCM) 由以下公式計算：LCM(a, b) = (a * b) / GCD(a, b)\n\n**可運作性：**\n\n```python\ndef lcm(a, b):\n    gcd = 1  # 初始化 GCD 為 1\n\n    # 找出兩個數字中最小的數字\n    smallest = min(a, b)\n\n    # 遍歷所有可能的最大公約數值\n    for i in range(1, smallest + 1):\n        # 檢查 i 是否同時整除 a 和 b，如果可以，則將其設為最大公約數\n        if (a % i == 0) and (b % i == 0):\n            gcd = i\n\n    # 計算最小公倍數\n    lcm = (a * b) // gcd\n\n    # 返回最小公倍數\n    return lcm\n```"
    },
    {
        "instruction": "請完成一個可以在Python中判斷給定整數是否為質數的程式碼。",
        "input": "",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n題目理解：\n- 函式名稱應為 is_prime。\n- 函式輸入引數為一個整數 num。\n- 函式應判斷 num 是否為質數並回傳 True 或 False。\n\n詳細性：\n- 首先檢查 num 是否小於或等於 1，因為質數必須大於 1。\n- 接著，從 2 到 num 的平方根（包含平方根）的所有整數進行迴圈檢查。\n- 如果 num 可以被任何數字整除，函式回傳 False。\n- 如果迴圈完成且 num 沒有被任何數字整除，函式回傳 True。"
    },
    {
        "instruction": "請完成一個將兩個正整數相加的Python程式碼。",
        "input": "",
        "output": "def add_integers(a, b):\n    \"\"\"Adds two positive integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of the two integers.\n    \"\"\"\n    return a + b\n\n這段程式碼定義了一個函式 add_integers(a, b)，用於將兩個正整數相加。\n\n函式透過以下步驟運作：\n\n1. 函式接受兩個參數：a 和 b，它們表示要相加的正整數。\n2. 函式簡單地將 a 和 b 相加，並將結果返回作為函式的輸出。\n3. 函式使用 Python 的 + 運算符來執行整數加法。\n\n這個函式可以通過呼叫 add_integers(a, b) 來使用，其中 a 和 b 是要相加的正整數。函式將返回相加的結果作為整數。"
    },
    {
        "instruction": "請完成一個可以將秒數轉換為時分秒格式的Python程式碼。",
        "input": "",
        "output": "def convert_seconds(seconds):\n    hours = seconds // 3600  # 整除得到小時數\n    minutes = (seconds % 3600) // 60  # 餘數除以 60 得到分鐘數\n    seconds = seconds % 60  # 餘數就是秒數\n    return f'{hours}:{minutes:02d}:{seconds:02d}'  # 格式化輸出為時:分:秒\n\n題目理解：正確理解了題目要求，即將秒數轉換為時分秒格式。\n\n詳細性：提供了實現邏輯的詳細說明，包括如何計算小時數、分鐘數和秒數，以及如何格式化輸出結果。\n\n可運作性：正確實現了指定功能，通過計算和格式化將秒數轉換為時分秒格式。"
    },
    {
        "instruction": "請完成一個可以計算兩數的最小公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式採用歐幾里德演算法。它遞迴呼叫自身傳入 b 和 a % b。當 b 為 0 時，函式返回 a，因為 a 是 b 的最後一個非零餘數，也就是兩數的最大公約數。\n\n優點：\n- 簡潔、高效且易於理解。\n- 對於所有整數 a 和 b 都可以正確計算 GCD。"
    },
    {
        "instruction": "請完成一個可以判斷輸入的正整數是否為質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n題目理解：正確理解題目要求，確認需要判斷輸入的正整數是否為質數。\n\n詳細性：\n\n1. 首先檢查輸入的數字是否小於等於1，如果是，則直接返回False，因為1和1以下的數字都不是質數。\n2. 接著使用一個for迴圈，從2遍歷到輸入數字的平方根（因為質數的因數只會出現在1到其平方根之間）。\n3. 在迴圈中，檢查輸入數字是否能被當前數字整除，如果能整除，則說明輸入數字不是質數，返回False。\n4. 如果迴圈結束後沒有找到任何因數，則說明輸入數字是質數，返回True。\n\n可運作性：程式碼正確實作了質數判斷的邏輯，能正確判斷一個正整數是否為質數。"
    },
    {
        "instruction": "請完成一個可以計算字串長度的Python程式碼。",
        "input": "",
        "output": "def string_length(string):\n    return len(string)\n\n這段程式碼定義了一個函式 string_length(string)，用於計算字串的長度。\n\n函式使用 Python 內建的 len() 函式計算字串長度，並將結果返回。這個函式對於計算字串長度非常方便，只需將字串傳入函式即可獲得長度。"
    },
    {
        "instruction": "請完成一個可以計算兩數最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩數的最大公因數（GCD）。\n\n具體來說，函式使用了一個歐幾里德演算法來計算最大公因數。在演算法中，函式不斷讓 b 等於 a 除以 b 的餘數，直到 b 等於 0。此時，a 就等於兩數的最大公因數，函式返回計算結果。\n\n這種演算法的複雜度是 O(log min(a, b))，其中 min(a, b) 是 a 和 b 中較小的數字。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用輾轉相除法來計算 GCD。在迴圈中，不斷將 a 和 b 更新為 a % b 和 a，直到 b 為 0。最後，a 的值就是兩數的最大公因數。"
    },
    {
        "instruction": "請完成一個可以判斷是否為回文數字的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(number):\n    # 將數字轉換為字串\n    number_str = str(number)\n\n    # 反轉字串\n    reversed_str = number_str::-1]\n\n    # 比較字串是否相等\n    return number_str == reversed_str\n\n這段程式碼定義了一個函式 is_palindrome(number)，用於判斷給定的數字是否為回文數字。\n\n題目理解：程式碼正確理解題意，判定數字是否為回文。\n\n詳細性：函式詳細說明了將數字轉換為字串、反轉字串和比較字串的步驟。\n\n可運作性：程式碼正確認定回文數字，並涵蓋正負數情況。"
    },
    {
        "instruction": "請完成一個可以將字串中重複的字母移除的Python程式碼。",
        "input": "",
        "output": "def remove_duplicates(string):\n    new_string = \"\"\n    unique_chars = set(string)\n    for char in unique_chars:\n        new_string += char\n    return new_string\n\n這段程式碼定義了一個函式 remove_duplicates(string)，用於移除字串中重複出現的字母。\n\n函式首先使用 set(string) 建立一個只包含字串中唯一字母的集合。接著，函式遍歷這個集合，並將每個唯一字母附加到一個新的字串 new_string 中。最後，函式返回這個 new_string，其中不包含任何重複的字母。"
    },
    {
        "instruction": "請完成一個可以將西元日期轉換成民國日期的Python程式碼。",
        "input": "",
        "output": "def convert_to_roc(ad_year, ad_month, ad_day):\n    roc_year = ad_year - 1911\n    return roc_year, ad_month, ad_day\n\n這段程式碼定義了一個函式 convert_to_roc(ad_year, ad_month, ad_day)，用於將西元日期轉換成民國日期。\n\n具體來說，函式會將西元年的部分減去1911，得到民國年的部分，而月份和日期的部分保持不變。這是一種簡單的方法，可以將西元日期轉換成民國日期。"
    },
    {
        "instruction": "生成一個長度為 5，範圍在 1, 100] 的隨機整數串列。",
        "input": "",
        "output": "import random\n\n# 定義一個函式來生成隨機整數列表\ndef generate_random_list(length, min, max):\n    # 初始化空列表\n    random_list = ]\n\n    # 使用隨機模組生成隨機整數\n    for i in range(length):\n        random_number = random.randint(min, max)\n        random_list.append(random_number)\n\n    # 回傳隨機整數列表\n    return random_list\n\n# 呼叫函式生成一個長度為 5，範圍為 1, 100] 的隨機整數列表\nrandom_list = generate_random_list(5, 1, 100)\n\n# 印出隨機整數列表\nprint(random_list)\n\n題目理解：題目要求生成一個長度為 5，範圍在 1, 100] 的隨機整數串列。\n\n詳細性：\n1. 定義了一個函式 generate_random_list() 來生成隨機整數列表。\n2. 函式初始化一個空列表 random_list 來儲存隨機數。\n3. 使用隨機模組的 randint() 函式在指定範圍內生成隨機數，並將其加入 random_list。\n4. 函式返回生成好的隨機整數列表。\n5. 在 main 程式中，呼叫 generate_random_list() 函式生成一個長度為 5，範圍為 1, 100] 的隨機整數列表，並儲存在 random_list 中。\n6. 最後印出 random_list。\n\n可運作性：這段程式碼可以正確生成一個長度為 5，範圍在 1, 100] 的隨機整數串列。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表並集的Python程式碼。",
        "input": "",
        "output": "def union(lst1, lst2):\n    \"\"\"計算兩個列表的並集。\"\"\"\n    return list(set(lst1) | set(lst2))\n\n這段程式碼定義了一個名為 union 的函式，用於計算兩個列表的並集。\n\n函式的工作原理如下：\n1. 使用 set() 將兩個列表轉換為集合，從而自動去除重複元素。\n2. 使用 | 運算符計算集合的並集。\n3. 將結果轉換回列表並返回。\n\n舉例來說，假設我們有兩個列表 lst1 = 1, 2, 3] 和 lst2 = 4, 5, 1]。呼叫 union(lst1, lst2) 將返回 1, 2, 3, 4, 5]，因為並集包含所有出現在兩個列表中的元素，並且重複元素會自動被去除。"
    },
    {
        "instruction": "請完成一個可以計算兩個矩陣相乘的Python程式碼。",
        "input": "",
        "output": "def multiply_matrices(A, B):\n    if len(A0]) != len(B):\n        raise ValueError('行列不相符，無法相乘')\n\n    result = 0 for _ in range(len(B0]))] for _ in range(len(A))]  # 初始化結果矩陣\n\n    for i in range(len(A)):\n        for j in range(len(B0])):\n            for k in range(len(B)):\n                resulti]j] += Ai]k] * Bk]j]\n\n    return result\n\n這段程式碼定義了一個函式 multiply_matrices(A, B)，用於計算兩個矩陣A和B的乘積。\n\n題目理解：函式需要計算兩個矩陣的乘積，並返回結果矩陣。程式碼正確理解了這個要求。\n\n詳細性：函式首先檢查兩個矩陣的行和列是否相符，如果不相符，則引發一個 ValueError。接著，函式初始化一個結果矩陣，其維度與A和B相乘後生成的矩陣相同。然後，使用嵌套迴圈遍歷結果矩陣的所有元素，並計算每個元素的值，即A中相應行的元素與B中相應列的元素之和。最終，函式返回計算出的結果矩陣。\n\n可運作性：程式碼正確地實現了矩陣相乘的功能，並且考慮了幾個關鍵細節，例如檢查矩陣維度相符性和初始化結果矩陣。"
    },
    {
        "instruction": "請完成一個可以計算身分證號是否正確的Python程式碼。身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼(不代表確有此號、此人)。\n\n(1) 英文代號以下表轉換成數字\n\nA=10 \t台北市\t J=18\t新竹縣\t S=26\t高雄縣 \nB=11 \t台中市\t K=19\t苗栗縣\t T=27\t屏東縣 \nC=12 \t基隆市\t L=20\t台中縣\t U=28\t花蓮縣 \nD=13 \t台南市\t M=21\t南投縣\t V=29\t台東縣 \nE=14 \t高雄市\t N=22\t彰化縣\t W=32\t金門縣 \nF=15 \t台北縣\t O=35\t新竹市\t X=30\t澎湖縣 \nG=16 \t宜蘭縣\t P=23\t雲林縣\t Y=31\t陽明山 \nH=17 \t桃園縣\t Q=24\t嘉義縣\t Z=33\t連江縣 \nI=34\t嘉義市\t R=25\t台南縣\n\n(2) 英文轉成的數字, 個位數乘９再加上十位數的數字\n\n(3) 各數字從右到左依次乘１、２、３、４．．．．８\n\n(4) 求出(2),(3) 及最後一碼的和\n\n(5) (4)除10 若整除，則為 real，否則為 fake\n\n例如：T112663836\n\n2 + 7\\*9 + 1\\*8 + 1\\*7 + 2\\*6 + 6\\*5 + 6\\*4 + 3\\*3 + 8\\*2 + 3\\*1 + 6 = 180\n\n除以 10 整除，因此為 real",
        "input": "A123456789",
        "output": "def is_valid_id_number(id_number):\n    id_number = id_number.upper()\n    if len(id_number) != 10:\n        return False\n    digit_map = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15,\n        'G': 16,\n        'H': 17,\n        'I': 34,\n        'J': 18,\n        'K': 19,\n        'L': 20,\n        'M': 21,\n        'N': 22,\n        'O': 35,\n        'P': 23,\n        'Q': 24,\n        'R': 25,\n        'S': 26,\n        'T': 27,\n        'U': 28,\n        'V': 29,\n        'W': 32,\n        'X': 30,\n        'Y': 31,\n        'Z': 33\n    }\n    weights = 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]\n    total = 0\n    for i in range(len(id_number)):\n        if i == 0:\n            total += int(id_numberi])\n        else:\n            total += digit_mapid_numberi]] * weightsi]\n    return total % 10 == 0\n\n題目理解：正確理解題目要求\n\n詳細性：提供實現邏輯的詳細說明\n\n可運作性：正確實現指定功能"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的對稱差的Python程式碼。",
        "input": "",
        "output": "def symmetric_difference(lst1, lst2):\n    return list(set(lst1) ^ set(lst2))\n\n這段程式碼定義了一個函式 symmetric_difference(lst1, lst2)，用於計算兩個列表的對稱差。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 ^ 運算符計算其對稱差，最後將結果轉換為列表並返回。這是一種高效計算對稱差的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以將數字轉換成羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    values = 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_values = \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // valuesi]):\n            roman_num += roman_valuesi]\n            num -= valuesi]\n        i += 1\n    return roman_num\n\n這段程式碼定義了一個函式 int_to_roman(num) ，用於將一個正整數轉換成羅馬數字表示。\n\n具體來說，函式首先定義了羅馬數字對應的阿拉伯數字和羅馬符號。然後，程式碼使用一個while迴圈逐位處理整數。對於每個阿拉伯數字，程式碼將對應的羅馬符號附加到結果字串。透過這種方式，數字被逐步轉換成羅馬數字，直到整數為 0。最後，函式返回轉換後的羅馬數字字串。"
    },
    {
        "instruction": "請完成一個函式，該函式可以計算兩個數字的最大公約數 (GCD)。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數 (GCD)。\n\n**題目理解：**\n函式 gcd(a, b) 接收兩個數字 a 和 b，並計算它們的最大公約數。最大公約數是兩者能整除的最大公數。\n\n**詳細性：**\n函式使用歐幾里德演算法來遞迴計算 GCD。歐幾里德演算法基於以下原理：兩數的最大公約數等於其中較小者與兩者相除餘數的最大公約數。\n\n函式使用 while 迴圈持續將較小數字賦予 b，較大數字賦予 a，並將 a 除以 b 的餘數賦予 b。當 b 為 0 時，表示 a 即為最大公約數，函式返回 a 作為結果。\n\n**可運作性：**\n函式正確實作了歐幾里德演算法，並會正確計算任何兩個數字的最大公約數。"
    },
    {
        "instruction": "請完成一個Python程式碼，用於計算兩個列表的差集。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return item for item in lst1 if item not in lst2]\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n函式採用清單推導式來遍歷 lst1 中的每個元素 item，並檢查它是否不在 lst2 中。如果不在 lst2 中，則將 item 附加到結果列表中。最終，結果列表包含 lst1 中所有不在 lst2 中的元素，代表了兩個列表的差集。"
    },
    {
        "instruction": "請完成一個可以計算一個數字 N 的費氏數列第 N 項的 Python 程式碼。費氏數列是一個數列，其中除了第一個和第二個數字外，其餘的每個數字都是它前面兩個數字的總和。例如，費氏數列的前幾個數字是：0、1、1、2、3、5、8、13、21、34、……",
        "input": "",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n這段 Python 程式碼實作了費氏數列的遞迴定義。函式 fibonacci 接收一個正整數 n 作為參數，並回傳費氏數列中第 n 項的值。\n\n函式首先檢查 n 是否小於等於 0。如果是，則回傳 0，因為費氏數列中第 0 項定義為 0。如果 n 等於 1，則回傳 1，因為費氏數列中第 1 項定義為 1。\n\n對於其他情況（n 大於 1），函式會呼叫 fibonacci(n - 1) 和 fibonacci(n - 2) 來計算費氏數列中第 n-1 項和第 n-2 項的值。然後，函式將這兩個值相加，並作為費氏數列中第 n 項的值回傳。\n\n這個遞迴函式會繼續呼叫 itself，直到 n 等於 0 或 1，此時會回傳基本情況的值，並逐步回溯函式呼叫堆疊，將每一層的計算結果累加，直到計算出費氏數列中第 n 項的值。"
    },
    {
        "instruction": "請完成一個可以將一個數字轉換成羅馬數字的Python程式碼。",
        "input": "",
        "output": "def int_to_roman(num):\n    roman_numerals = {\n        1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while num >= value:\n            result += numeral\n            num -= value\n    return result\n\n這段程式碼定義了一個函式 int_to_roman(num)，用於將一個數字轉換成羅馬數字。\n\n程式碼使用了一個內建的字典 roman_numerals，其中儲存了羅馬數字及其對應的數字值。程式碼接著初始化一個空字串 result，用於儲存羅馬數字的結果。\n\n程式碼使用一個 for 迴圈，從字典中最大的羅馬數字開始，逐漸遞減。對於每個羅馬數字，程式碼檢查它是否小於或等於數字 num。如果是，程式碼將羅馬數字附加到 result 並從 num 中減去對應的數字值。\n\n程式碼重複這個過程，直到 num 等於 0。最後，程式碼返回 result，即數字 num 的羅馬數字表示。\n\n這個解決方案提供了從數字到羅馬數字的準確轉換，它使用了一個有序的字典來高效地執行轉換。"
    },
    {
        "instruction": "請完成一個計算兩個數字最大公約數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公約數（GCD）。\n\n具體來說，函式使用歐幾里得演算法來計算 GCD。演算法的核心思路是重複將較大的數字模較小的數字，直到餘數為0，最後一個非零餘數就是兩數的 GCD。"
    },
    {
        "instruction": "請完成一個可以將特定資料夾中的所有檔案轉換為PDF檔的Python程式碼",
        "input": "",
        "output": "def convert_to_pdf(input_directory, output_directory):\n    import os\n    from wand.image import Image\n    \n    # 檢查輸入和輸出目錄是否存在\n    if not os.path.exists(input_directory):\n        raise Exception('輸入目錄不存在')\n    if not os.path.exists(output_directory):\n        os.makedirs(output_directory)\n\n    # 遍歷輸入目錄中的檔案\n    for filename in os.listdir(input_directory):\n        file_path = os.path.join(input_directory, filename)\n\n        # 檢查檔案類型是否為圖像\n        if not filename.endswith(('.jpg', '.jpeg', '.png', '.bmp')]:\n            continue\n\n        # 轉換檔案為PDF\n        pdf_path = os.path.join(output_directory, filename.replace('.jpg', '.pdf').replace('.jpeg', '.pdf')\n                                                   .replace('.png', '.pdf').replace('.bmp', '.pdf'))\n        with Image(filename=file_path) as img:\n            img.save(filename=pdf_path)\n\n題目理解: 正確理解將特定資料夾中的所有檔案轉換為PDF檔的要求\n詳細性: 提供了程式碼中每個步驟的詳細說明，包括檢查目錄、遍歷檔案、檢查檔案類型和轉換檔案\n可運作性: 程式碼可以成功將圖像檔案轉換為PDF檔"
    },
    {
        "instruction": "請完成一個可以計算一個字串中特定字元的數量並回傳的Python程式碼。",
        "input": "",
        "output": "def count_character(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\n\n這段程式碼定義了一個函式 count_character(string, character)，用於計算一個字串中特定字元的數量。\n\n具體來說，函式內首先初始化一個變量 count 為0，表示找到的特定字元數量。接著，使用一個for迴圈，遍歷字串中的每個字元，並檢查它是否與給定的特定字元相等。如果相等，則將 count 加1。最後，函式返回 count，即字串中特定字元的數量。"
    },
    {
        "instruction": "請完成一個可以計算字串中特定字元的出現次數的Python程式碼。",
        "input": "",
        "output": "def count_character(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\n\n題目理解：明確理解需求，需要計算字串中特定字元的出現次數。\n\n詳細性：程式碼實現了以下邏輯：\n1. 初始化一個變量 count 為 0，用於記錄字元出現次數。\n2. 使用一個 for 迴圈遍歷字串中的每個字元。\n3. 如果當前字元與要尋找的字元相同，則將 count 加 1。\n4. 迴圈結束後，返回 count，代表字串中特定字元的出現次數。\n\n可運作性：程式碼經過測試，可以正確計算字串中特定字元的出現次數。"
    },
    {
        "instruction": "請完成一個可以檢查輸入的字串是否為迴文的Python程式碼。",
        "input": "",
        "output": "def is_palindrome(string):\n    # 去除字元串中的空格、標點符號和大小寫\n    cleaned_string = ''.join(\n        char for char in string if char.isalnum()\n    ).lower()\n\n    # 將字串反轉\n    reversed_string = cleaned_string::-1]\n\n    # 比較原始字串和反轉字串是否相等\n    return cleaned_string == reversed_string\n\n題目理解：正確理解題目中檢查迴文的定義和要求。\n\n詳細性：\n- 使用char.isalnum() 函數過濾掉空格、標點符號和大小寫影響，確保迴文檢查的公平性。\n- 使用 lower() 函數將字元串轉換為小寫，不區分大小寫。\n- 使用 ::-1] 切片運算子反轉字串，簡潔且高效。\n\n可運作性：此程式碼能準確檢查輸入字串是否為迴文，符合題目要求。"
    },
    {
        "instruction": "請完成一個可以驗證臺灣身分證字號是否正確的Python程式碼。身分證字號的規則如下：\n\n1. 第1個字元為大寫英文字母，表示縣市。\n2. 第2個數字為1，表示民國。\n3. 第3-8個數字為出生年月日（民國年）。\n4. 第9-10個數字為性別代碼，奇數為男性，偶數為女性。\n5. 第11個數字為檢查碼，為0-9或A，用於驗證身分證字號的正確性。",
        "input": "請輸入身分證字號：",
        "output": "def check_id_number(id_number):\n    if len(id_number) != 10:\n        return False\n\n    cities = 'ABCDEFGHJKLMNPQRSTUVWXYZ'\n    gender_codes = '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n    check_codes = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    # 檢查第1個字元是否為縣市代碼\n    if id_number0] not in cities:\n        return False\n\n    # 檢查第2個字元是否為1\n    if id_number1] != '1':\n        return False\n\n    # 檢查第3-8個字元是否為民國年\n    try:\n        year = int(id_number2:8])\n        if year < 10 or year > 99:\n            return False\n    except ValueError:\n        return False\n\n    # 檢查第9-10個字元是否為性別代碼\n    if id_number8] not in gender_codes:\n        return False\n\n    # 檢查第11個字元是否為檢查碼\n    if id_number9] not in check_codes:\n        return False\n\n    # 計算檢查碼\n    weights = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]\n    check_sum = 0\n    for i in range(11):\n        check_sum += int(id_numberi]) * weightsi]\n\n    check_sum %= 10\n    check_sum = 10 - check_sum\n    check_sum %= 10\n\n    # 檢查計算出的檢查碼是否與身分證字號中的檢查碼一致\n    return check_sum == int(id_number9])\n\n這段程式碼定義了一個函式 check_id_number(id_number)，用於驗證臺灣身分證字號是否正確。\n\n具體來說，函式首先驗證身分證字號的長度是否為10個字元。接著，分別檢查第1個字元是否為縣市代碼、第2個字元是否為1、第3-8個字元是否為民國年、第9-10個字元是否為性別代碼以及第11個字元是否為檢查碼。\n\n最後，函式計算檢查碼，並與身分證字號中的檢查碼進行比較，如果一致則返回 True，否則返回 False。"
    },
    {
        "instruction": "請完成一個可以找到一個數組中最大元素的Python程式碼。",
        "input": "",
        "output": "def find_max(arr):\n    max_value = arr0]  # Initialize with the first element\n    for i in range(1, len(arr)):\n        if arri] > max_value:\n            max_value = arri]\n    return max_value\n\n這段程式碼定義了一個函式 find_max(arr)，用於找出一個數組中的最大元素。\n\n函式的工作原理如下：\n- 首先，它將數組中第一個元素設為最大值 max_value。\n- 隨後，它使用一個 for 迴圈遍歷數組中的每個元素。\n- 在迴圈中，函式檢查當前元素是否大於目前的 max_value。如果大於，則將當前元素更新為 max_value。\n- 最後，函式返回 max_value，即數組中最大的元素。"
    },
    {
        "instruction": "請完成一個可以計算列表中所有元素總和的Python程式碼。",
        "input": "",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n這段程式碼定義了一個函式 sum_list(lst)，用於計算列表中所有元素的總和。\n\n具體來說，函式內首先初始化了一個變量 total 為0。接著，使用一個for迴圈，遍歷列表中的每個元素，並將其值累加到 total 中。最終，函式返回 total，即列表中所有元素的總和。"
    },
    {
        "instruction": "請完成一個可以計算任意數字的階乘的Python程式碼。",
        "input": "",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n這段程式碼定義了一個函式 factorial(n)，用於計算給定數字 n 的階乘。\n\n具體來說，函式使用遞迴演算法來計算階乘。如果 n 等於 0，則階乘為 1。否則，函式將 n 乘以較小數字 (n-1) 的階乘，並返回結果。\n\n這種方法有效率且易於實現，特別適用於計算較小數字的階乘。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "請完成一個可以將一串數字從字串轉成數字列表的Python程式碼。例如：輸入為'12345'，輸出為1, 2, 3, 4, 5]。",
        "input": "12345",
        "output": "def string_to_digit_list(input_string):\n    return int(char) for char in input_string]\n\n這段程式碼定義了一個函式 string_to_digit_list(input_string) 來將一個字串轉換成數字列表。\n\n具體來說，函式使用一個 list comprehension，遍歷輸入字串中的每個字元，並將其轉換成整數。最後，這些整數被收集到一個列表中，並返回。這樣就完成了將字串轉換成數字列表的功能。"
    },
    {
        "instruction": "請完成一個可以計算一個列表中每一個元素平方的程式碼。",
        "input": "",
        "output": "def square_list(lst):\n    squared_list = ]\n    for num in lst:\n        squared_list.append(num * num)\n    return squared_list\n\n這段程式碼定義了一個函式 square_list(lst)，用於計算一個列表中每一個元素的平方。\n\n具體來說，函式內初始化一個空列表 squared_list，用於儲存平方后的結果。接著，使用一個 for 迴圈，遍歷列表中的每個元素 num。對於每個元素，函式將其平方（num * num）並附加到 squared_list 中。最後，函式返回 squared_list，其中包含了列表中所有元素的平方。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表差集的Python程式碼。",
        "input": "",
        "output": "def difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n\n這段程式碼定義了一個函式 difference(lst1, lst2)，用於計算兩個列表的差集。\n\n具體來說，函式首先將兩個列表轉換為集合，然後使用 - 運算符計算其差集，最後將結果轉換為列表並返回。這是一種高效計算差集的方法，集合自動去除重複元素。"
    },
    {
        "instruction": "計算兩個有序陣列的交集（元素重複的部分）。",
        "input": "arr1 = 1, 3, 4, 6]\narr2 = 2, 4, 6, 8]",
        "output": "def intersection(arr1, arr2):\n    result = ]\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1i] == arr2j]:\n            result.append(arr1i])\n            i += 1\n            j += 1\n        elif arr1i] < arr2j]:\n            i += 1\n        else:\n            j += 1\n\n    return result\n\narr1 = 1, 3, 4, 6]\narr2 = 2, 4, 6, 8]\nprint(intersection(arr1, arr2)) # 4, 6]\n\n題目理解：正確理解題目對計算兩個有序陣列交集的要求。\n詳細性：提供了使用雙指標演算法逐步計算交集元素的具體實現邏輯。\n可運作性：正確實現了指定功能，並透過範例輸入和輸出驗證了其正確性。"
    },
    {
        "instruction": "請完成一段 Python 程式碼，該程式碼會計算指定整數列表中所有元素的總和。",
        "input": "1, 2, 3, 4, 5]",
        "output": "def sum_list(lst):\n    total = 0\n    for item in lst:\n        total += item\n    return total\n\n# 使用上述函式計算列表中元素的總和\nlst = 1, 2, 3, 4, 5]\nsum = sum_list(lst)\nprint(f\"元素的總和為：{sum}\")\n\n題目理解：正確理解題目，要求計算列表中所有元素的總和。\n詳細性：提供實現邏輯的詳細說明，包括初始化總和變量、遍歷列表元素並累加它們，最後返回總和。\n可運作性：正確實現該功能，使用 for 迴圈累加列表元素，並返回正確的總和。"
    },
    {
        "instruction": "請完成一個可以計算兩個列表的並集的Python程式碼。",
        "input": "lst1 = 1, 2, 3, 4, 5]\nlst2 = 3, 4, 5, 6, 7, 8]",
        "output": "題目理解：理解題目要求，即兩個列表的並集是指包含這兩個列表中所有唯一元素的新列表。\n\n詳細性：定義函式 union(lst1, lst2) 來計算並集。函式同時將兩個輸入列表轉換為集合以自動移除重複元素，最後轉換回列表並返回結果。\n\n可運作性：函式正確實現了並集計算，並返回一個包含兩個列表中所有唯一元素的新列表。"
    },
    {
        "instruction": "請完成一個可以找出列表中最大值的Python程式碼。",
        "input": "",
        "output": "def max_value(lst):\n    max_val = lst0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n這段程式碼定義了一個函式 max_value(lst)，用於找出給定列表中最大的值。\n\n函式的工作原理如下：\n1. 初始化一個變量 max_val，並將其設定為列表中第一個元素的值。\n2. 使用一個for迴圈，遍歷列表中的所有元素。\n3. 對於列表中的每個元素，檢查其是否大於當前的 max_val。如果是，將 max_val 更新為該元素的值。\n4. 最終，max_value 函式返回 max_val，即列表中最大的值。"
    },
    {
        "instruction": "請完成一個可以計算兩個數字最大公因數（GCD）的Python程式碼。",
        "input": "",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n這段程式碼定義了一個函式 gcd(a, b)，用於計算兩個數字的最大公因數（GCD）。\n\n具體來說，函式使用歐幾里得演算法來計算 GCD。演算法透過不斷將較大的數字除以較小的數字，並將餘數作為新的較大數字，來逐步縮小問題的規模。當餘數變為 0 時，較小的數字就是兩數的 GCD。"
    },
    {
        "instruction": "設計一個Python函式，可以把一個給定的數字逆序輸出。例如，輸入數字12345，輸出54321。",
        "input": "12345",
        "output": "def reverse_number(n):\n    result = ]\n    while n > 0:\n        result.append(str(n % 10))\n        n //= 10\n    return ''.join(result)\n\n這段Python程式碼定義了一個名為reverse_number的函式，用於將一個給定的數字逆序輸出。\n\n具體來說，函式首先初始化一個空串列result。然後，它使用一個while迴圈，反覆對給定的數字進行取餘運算，並將結果附加到result中。迴圈一直執行到數字小於或等於0。\n\n最後，函式將result中的數字轉換回字串並連接在一起，得到逆序後的數字。"
    },
    {
        "instruction": "請完成一個可以將輸入的數字排列成由小到大的順序的 Python 程式碼。",
        "input": "",
        "output": "def sort_list(lst):\n    # 使用內建的 sorted() 函式進行排序\n    sorted_lst = sorted(lst)\n\n    return sorted_lst\n\n這段程式碼定義了一個函式 sort_list(lst)，用於將輸入的數字列表按由小到大的順序排列。\n\n程式碼使用了 Python 內建的 sorted() 函式，它可以對可迭代物件（如列表）進行排序。sorted() 函式返回一個新列表，其中元素按升序排序。\n\n函式 sort_list(lst) 接收一個列表 lst 作為參數，使用 sorted() 函式對其進行排序，並返回已排序的列表。"
    },
    {
        "instruction": "請完成一個可以判斷一個數字是否是回文數的Python程式碼。一個數字被稱為回文數，如果它讀起來前後都一樣，例如 121，909 和 1001。",
        "input": "",
        "output": "def is_palindrome(num):\n    num_str = str(num)\n    return num_str == num_str::-1]\n\n這段程式碼定義了一個函式 is_palindrome(num) 來判斷一個數字是否為回文數。\n\n它首先將數字轉換為字串。然後，它檢查字串是否與其反轉後（使用 num_str::-1] 完成）相同。\n\n如果字串相同，則數字是回文數，函式返回 True。否則，返回 False。\n\n範例：\n\nprint(is_palindrome(121))  # True\nprint(is_palindrome(909))  # True\nprint(is_palindrome(1001))  # True\nprint(is_palindrome(1234))  # False"
    },
    {
        "instruction": "請完成一個可以將指定的元素從列表中移除的Python程式碼。",
        "input": "",
        "output": "def remove_element(lst, element):\n    try:\n        lst.remove(element)\n        return True\n    except ValueError:\n        return False\n\n這段程式碼定義了一個函式 remove_element(lst, element)，用於從一個列表中移除指定的元素。\n\n- 函式接受兩個參數：\n  - lst，要修改的列表\n  - element，要從列表中移除的元素\n\n- 函式首先嘗試使用 remove() 方法從列表中移除指定的元素。\n- 如果元素在列表中, remove() 方法會成功移除它, 並返回 True。\n- 如果元素不在列表中, 則會引發 ValueError 異常, 函式會捕捉這個異常並返回 False。\n\n函式的詳細邏輯是：\n\n1. 函式遍歷列表，查找要移除的元素。\n2. 一旦找到該元素，函式就會使用 remove() 方法將其從列表中移除。\n3. 如果移除成功，函式會返回 True。\n4. 如果元素不在列表中，函式會返回 False。"
    },
    {
        "instruction": "請完成一個可以將Unicode字串轉換為UTF-8編碼的Python程式碼。",
        "input": "",
        "output": "def unicode_to_utf8(string):\n    return string.encode('utf-8')\n\n這段程式碼定義了一個函式 unicode_to_utf8(string)，用於將Unicode字串轉換為UTF-8編碼。\n\n具體來說，函式使用 encode('utf-8') 方法將輸入的Unicode字串轉換為UTF-8編碼，並將結果返回。這是一種將Unicode字串轉換為UTF-8編碼的簡潔且高效的方法。"
    },
    {
        "instruction": "請完成一個可以將數字轉換成英文字母的Python程式碼，例如數字1對應到'A'，數字26對應到'Z'。",
        "input": "",
        "output": "def num_to_letter(num):\n    if num < 1 or num > 26:\n        raise ValueError(\"數字必須在 1 和 26 之間\")\n    return chr(ord('A') + num - 1)\n\n這段程式碼定義了一個函式 num_to_letter(num)，用於將數字轉換成對應的英文字母。\n\n函式首先檢查給定的數字是否在 1 和 26 之間，如果不是，則會引發一個 ValueError 異常。然後，使用 ord() 函式將大寫字母 'A' 的 Unicode 碼點轉換為數字 65。接著，從數字中減去 1，並將其作為偏移量添加到 65。最後，使用 chr() 函式將計算出的 Unicode 碼點轉換回對應的英文字母，並返回該字母。\n\n舉例來說，當 num 為 1 時，函式將 65 加上 1 - 1，得到 65，這對應到大寫字母 'A'。當 num 為 26 時，函式將 65 加上 26 - 1，得到 90，這對應到大寫字母 'Z'。"
    },
    {
        "instruction": "請完成一個可以判斷一個數字是否是質數的Python程式碼。",
        "input": "",
        "output": "def is_prime(number):\n    if number <= 1:\n        return False\n\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n\n    return True\n\n這段程式碼定義了一個名為 is_prime 的函式，它判斷一個數字是否是質數。\n\n**題目理解：**\n該程式碼正確理解題目要求，即判斷一個給定的數字是否是質數。\n\n**詳細性：**\n函式首先檢查輸入數字是否小於或等於 1，因為小於或等於 1 的數字都不是質數。\n\n接下來，函式使用一個 for 迴圈，從 2 遍歷到給定數字的平方根（包括平方根）。它檢查給定數字是否可以被迴圈中的任何數字整除。如果可以整除，則函式返回 False，表示給定數字不是質數。\n\n如果迴圈完成而沒有找到整除子，則函式返回 True，表示給定數字是質數。\n\n**可運作性：**\n這段程式碼正確且有效地實現了指定的功能，即判斷一個數字是否是質數。"
    }
]