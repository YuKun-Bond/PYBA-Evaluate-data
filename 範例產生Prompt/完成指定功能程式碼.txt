完成指定功能程式碼範例

當學習程式遇到瓶頸時或需要示範成功的程式時，學習才能有所成長。故LLM應該要能做到這樣的助教功能。

這是我的評分標準 請盡量完成
準確性 正確理解題目要求
詳細性 程式編譯無誤且執行結果正確
正向建議 提供架構程式的思路、注意事項與邏輯處理的技巧

範例:
{
  "instruction": "請撰寫一個函數，接收一個字串並回傳該字串的反轉結果。",
  "input": "撰寫一個 Python 函數 `reverse_string(s)`，該函數接受一個字串作為參數，並回傳這個字串的反轉版本。",
  "output": "以下是滿足題目要求的 Python 程式碼：\n\n```python\ndef reverse_string(s):\n    return s[::-1]\n\n# 測試範例\nprint(reverse_string('hello'))  # 輸出: 'olleh'\nprint(reverse_string('Python'))  # 輸出: 'nohtyP'\n```\n\n**詳細性**：\n- 這個程式碼定義了一個函數 `reverse_string(s)`，它使用 Python 字串切片的特性 `s[::-1]` 來反轉字串 `s`。這是一種簡潔且高效的方法，可以在一行內完成字串反轉。\n- 測試範例使用 `print` 函數來驗證 `reverse_string` 函數的輸出是否符合預期，這些測試表明函數的執行結果是正確的。\n\n**正向建議**：\n1. **思路與邏輯處理**：字串反轉是一個基本操作，可以使用多種方法來實現。在 Python 中，字串是不可變的，因此使用切片的方式可以很簡單地達到反轉效果。此外，也可以使用迴圈或內建函數來實現字串反轉，了解不同方法的優劣有助於增進程式設計技巧。\n2. **注意事項**：在編寫這類基礎功能時，應注意邊界條件，例如空字串或單字符字串的情況。上述程式碼已經能夠正確處理這些情況。\n3. **進階技巧**：如果目的是反轉一個非常長的字串，或需頻繁進行反轉操作，可以考慮性能優化，例如避免重複分配記憶體或使用更有效率的資料結構。\n\n此程式碼範例展示了如何解決一個簡單的字串處理問題，並提供了理解基礎功能所需的架構和邏輯處理技巧，對學習者具有啟發性。"
}

請你扮演一個Python專業出題者
給我一個滿足上面格式與標準的範例